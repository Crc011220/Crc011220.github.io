"use strict";(self.webpackChunkpersonalweb=self.webpackChunkpersonalweb||[]).push([[5879],{6262:(t,d)=>{d.A=(t,d)=>{const r=t.__vccOpts||t;for(const[t,h]of d)r[t]=h;return r}},6788:(t,d,r)=>{r.r(d),r.d(d,{comp:()=>a,data:()=>l});var h=r(641);const e=r.p+"assets/img/process_status.e243b1e0.png",n={},a=(0,r(6262).A)(n,[["render",function(t,d){return(0,h.uX)(),(0,h.CE)("div",null,d[0]||(d[0]=[(0,h.Fv)('<h1 id="操作系统" tabindex="-1"><a class="header-anchor" href="#操作系统"><span>操作系统</span></a></h1><h2 id="操作系统的概念" tabindex="-1"><a class="header-anchor" href="#操作系统的概念"><span>操作系统的概念</span></a></h2><h3 id="操作系统的特性" tabindex="-1"><a class="header-anchor" href="#操作系统的特性"><span>操作系统的特性</span></a></h3><table><thead><tr><th>特征</th><th>含义</th><th>关键点</th><th>举例</th><th>实现方式</th></tr></thead><tbody><tr><td>并发性</td><td>系统允许<strong>多个程序同时存在</strong>，并<strong>交替执行</strong></td><td>提高资源利用率、吞吐量</td><td>多个进程同时驻留内存</td><td>多道程序设计</td></tr><tr><td>共享性</td><td>多个进程可<strong>共同使用资源</strong>（资源复用）</td><td>并发进程共享系统资源</td><td>多个进程共享打印机</td><td>资源统一管理</td></tr><tr><td>虚拟性</td><td><strong>一个物理资源</strong>被“变成”<strong>多个逻辑资源</strong>，用户感觉“独占”</td><td>逻辑 &gt; 物理</td><td>虚拟内存、虚拟 CPU</td><td>时分复用、空分复用</td></tr><tr><td>异步性</td><td>程序执行过程<strong>不可预期</strong>，按调度策略<strong>交替推进</strong></td><td>非连续执行</td><td>一个进程执行到一半被切换</td><td>调度、切换机制</td></tr></tbody></table><h3 id="操作系统的目标" tabindex="-1"><a class="header-anchor" href="#操作系统的目标"><span>操作系统的目标</span></a></h3><table><thead><tr><th>目标</th><th>含义</th><th>关键点/作用</th><th>举例或说明</th></tr></thead><tbody><tr><td>方便性</td><td>为用户提供一个<strong>方便的操作界面和开发环境</strong></td><td>屏蔽底层硬件差异，提高交互体验</td><td>提供图形界面、命令行界面、API</td></tr><tr><td>有效性</td><td>提高<strong>系统资源利用率和吞吐量</strong>，让硬件“物尽其用”</td><td>强调性能和资源管理</td><td>多道程序、调度算法、缓冲区管理等</td></tr><tr><td>可扩充性</td><td>能<strong>方便地加入新功能或适应新硬件</strong></td><td>保持系统的模块化、灵活性</td><td>插件式内核、微内核设计</td></tr><tr><td>开放性</td><td>遵循<strong>开放标准</strong>，便于移植、开发与兼容</td><td>硬件平台/开发者友好、便于移植</td><td>Linux 遵循 POSIX，支持多平台部署</td></tr></tbody></table><h3 id="操作系统的发展" tabindex="-1"><a class="header-anchor" href="#操作系统的发展"><span>操作系统的发展</span></a></h3><table><thead><tr><th>阶段/类型</th><th>特点/分类</th><th>关键速记要点</th><th>举例</th></tr></thead><tbody><tr><td>无操作系统阶段</td><td>- <strong>人工操作方式</strong>：用户手动操作输入设备<br>- <strong>脱机输入/输出</strong>：用外围设备批量输入输出</td><td>效率低、人工繁琐，没有程序自动调度</td><td>早期打孔卡机</td></tr><tr><td>批处理系统</td><td>- <strong>单道批处理</strong>：始终只运行一道作业<br>- <strong>多道批处理</strong>：多作业在内存中并存</td><td>单道特征：自动性、顺序性、单道性<br>多道优点：资源利用高、吞吐量大<br>缺点：周转慢、<strong>无交互</strong></td><td>单道：IBM 709<br>多道：IBM 360</td></tr><tr><td>分时系统</td><td>支持<strong>多人共享主机时间</strong>，定时轮换使用处理器</td><td>特点：交互性、<strong>独占性</strong>（轮转时独占CPU）、<strong>及时性</strong>、多路性</td><td>Unix</td></tr><tr><td>实时系统</td><td>对任务响应必须在严格时限内完成</td><td>特点：交互性、独占性、及时性、多路性、<strong>可靠性</strong></td><td>导弹系统、工业控制系统</td></tr><tr><td>微机操作系统</td><td>根据用户/任务数分类：</td><td>1. 单用户单任务：MS-DOS<br>2. 单用户多任务：Windows 7<br>3. 多用户多任务：Unix、Linux</td><td>MS-DOS, Windows, Linux</td></tr></tbody></table><h3 id="操作系统的功能" tabindex="-1"><a class="header-anchor" href="#操作系统的功能"><span>操作系统的功能</span></a></h3><table><thead><tr><th>功能模块</th><th>核心作用</th><th>关键子功能</th><th>速记关键词</th></tr></thead><tbody><tr><td>处理机管理</td><td>控制<strong>进程调度与切换</strong>，实现对CPU的有序管理</td><td>- 进程控制<br>- 进程同步与通信<br>- 调度算法等</td><td><strong>进程管理</strong>、调度</td></tr><tr><td>存储器管理</td><td>统一管理和分配<strong>内存空间</strong>，保障内存安全与高效使用</td><td>- 内存分配<br>- 地址映射<br>- 内存保护<br>- 内存扩充（如虚拟内存）</td><td>分配、保护、扩展</td></tr><tr><td>设备管理</td><td>控制和协调<strong>I/O设备</strong>的使用，屏蔽硬件差异</td><td>- 缓冲管理<br>- 设备分配与控制<br>- 虚拟设备（如打印池）</td><td><strong>缓冲</strong>、分配、虚拟化</td></tr><tr><td>文件管理</td><td>实现对<strong>数据文件的组织、存储与访问</strong></td><td>- 文件空间管理<br>- 目录管理<br>- 文件访问与保护</td><td>存取、目录、保护</td></tr><tr><td>用户接口</td><td>为用户或程序提供与系统交互的通道</td><td>- 用户接口（命令接口、图形接口、程序接口（系统调用））<br>- 程序接口（系统调用）</td><td>CLI、GUI、系统调用</td></tr></tbody></table><ul><li>系统调用是用户程序请求操作系统内核提供服务的接口。 <ul><li>用户态程序无法直接访问硬件或操作系统核心资源（CPU、内存管理、文件、网络等），</li><li>所以通过系统调用向 <strong>内核态</strong> 发起请求，由内核执行相应操作并返回结果。</li></ul></li></ul><h3 id="操作系统的结构" tabindex="-1"><a class="header-anchor" href="#操作系统的结构"><span>操作系统的结构</span></a></h3><table><thead><tr><th>操作系统结构类型</th><th>特点与描述</th></tr></thead><tbody><tr><td>无结构操作系统</td><td>- 早期操作系统无统一设计思想<br>- 各过程随意调用，系统内部混乱<br>- 缺乏结构性</td></tr><tr><td>模块化操作系统</td><td>- 基于模块-接口方法设计<br>- 按功能划分模块，每个模块独立实现特定功能<br>- 各模块间通过接口交互，结构清晰</td></tr><tr><td>分层操作系统</td><td>- 改进模块化结构中“无序性”<br>- 使用<strong>自底向上</strong>方法构建各层，确保每层建立在稳定基础上<br>- 每层仅使用下一层提供的服务</td></tr><tr><td>微内核操作系统</td><td>- 当前主流，支持多处理机<br>- 内核仅包含最基本功能，其它功能放在<strong>服务器进程</strong>中<br>- 结构清晰、易维护</td></tr></tbody></table><h4 id="微内核" tabindex="-1"><a class="header-anchor" href="#微内核"><span>微内核</span></a></h4><table><thead><tr><th>微内核特性</th><th>描述</th></tr></thead><tbody><tr><td>足够小的内核</td><td>- 只实现最基本功能（硬件相关处理、基础通信等）<br>- 不包含完整OS，仅为其提供运行基础</td></tr><tr><td>客户/服务器模式</td><td>- 大部分OS功能以<strong>服务器进程</strong>形式运行<br>- 微内核与各功能模块解耦，提高系统灵活性</td></tr><tr><td>机制与策略分离</td><td>- <strong>机制</strong>在微内核中，执行基本功能<br>- <strong>策略</strong>通过外部服务器进程实现<br>- 实现最小化内核</td></tr><tr><td>面向对象技术</td><td>- 应用对象、封装、继承等思想构建系统<br>- 提高系统的可扩展性、可维护性和健壮性</td></tr></tbody></table><h2 id="进程管理" tabindex="-1"><a class="header-anchor" href="#进程管理"><span>进程管理</span></a></h2><h3 id="进程的特征" tabindex="-1"><a class="header-anchor" href="#进程的特征"><span>进程的特征</span></a></h3><table><thead><tr><th>特征</th><th>速记点描述</th></tr></thead><tbody><tr><td>动态性</td><td>进程是程序的执行过程，有生命周期（创建→执行→消亡）</td></tr><tr><td>并发性</td><td>多个进程可以同时存在于内存中并发运行</td></tr><tr><td>独立性</td><td>每个进程独立运行，拥有自己的资源和调度控制</td></tr><tr><td>异步性</td><td>每个进程按不可预知的速度独立运行，互不干扰</td></tr></tbody></table><ul><li>PCB 全称是 Process Control Block，中文叫 进程控制块，是操作系统用来管理进程的最关键数据结构。可以把它理解为“进程的身份证”，操作系统就是通过 PCB 来识别和控制每一个进程的。</li></ul><h3 id="进程的三种基本状态" tabindex="-1"><a class="header-anchor" href="#进程的三种基本状态"><span>进程的三种基本状态</span></a></h3><ul><li>三种基本状态（就绪、运行、阻塞）描述的是进程在执行过程中的不同阶段：就绪等待CPU，运行中使用CPU，阻塞等待资源</li></ul><table><thead><tr><th>状态名称</th><th>含义</th><th>特点</th><th>转换条件</th></tr></thead><tbody><tr><td><strong>就绪态</strong></td><td>进程已具备运行条件，等待CPU</td><td>有资源但没CPU</td><td>获取CPU → 变为运行态</td></tr><tr><td><strong>运行态</strong></td><td>正在使用CPU执行指令</td><td>独占CPU（单核只有一个）</td><td>被剥夺CPU → 就绪态<br>等待事件 → 阻塞态</td></tr><tr><td><strong>阻塞态</strong></td><td>正在等待某事件（如I/O）</td><td>没有运行条件</td><td>事件完成 → 回到就绪态</td></tr></tbody></table><figure><img src="'+e+'" alt="进程的三种基本状态和转换" tabindex="0" loading="lazy"><figcaption>进程的三种基本状态和转换</figcaption></figure><h4 id="挂起状态" tabindex="-1"><a class="header-anchor" href="#挂起状态"><span>挂起状态</span></a></h4><ul><li>挂起状态是指进程被操作系统暂时暂停执行以便检查或调度</li></ul><table><thead><tr><th>挂起状态产生原因</th><th>说明</th><th>目的/作用</th></tr></thead><tbody><tr><td>终端用户的请求</td><td>用户程序运行中发现可疑问题，主动使程序暂停</td><td>便于用户研究程序执行情况或进行修改</td></tr><tr><td>父进程请求</td><td>父进程希望挂起某个子进程</td><td>便于考查子进程或协调多个子进程的活动</td></tr><tr><td>负荷调节的需要</td><td>实时系统负荷过重，影响实时任务控制</td><td>挂起不重要的进程，保证系统正常运行</td></tr><tr><td>操作系统的需要</td><td>操作系统主动挂起某些进程</td><td>检查资源使用或进行记账管理</td></tr></tbody></table><h3 id="进程同步" tabindex="-1"><a class="header-anchor" href="#进程同步"><span>进程同步</span></a></h3><ul><li>临界资源（Critical Resource） 是指 多个进程/线程不能同时使用的共享资源，必须<strong>互斥访问</strong>，否则会发生冲突或错误。</li><li>临界区（Critical Section） 是指 <strong>访问临界资源的代码段</strong>。</li></ul><h3 id="同步机制规则" tabindex="-1"><a class="header-anchor" href="#同步机制规则"><span>同步机制规则</span></a></h3><table><thead><tr><th>规则名称</th><th>说明</th><th>目的</th></tr></thead><tbody><tr><td>空闲让进</td><td>当临界区空闲时，允许请求进入临界区的进程立即进入</td><td>有效利用临界资源</td></tr><tr><td>忙则等待</td><td>临界区被占用时，其他进程必须等待</td><td>保证临界资源的互斥访问</td></tr><tr><td>停止等待</td><td>保证等待进程在有限时间内能进入临界区</td><td>避免“死等”（死锁）</td></tr><tr><td>让权等待</td><td>进程不能进入临界区时应释放CPU</td><td>避免“忙等”浪费CPU资源</td></tr></tbody></table><h3 id="信号量" tabindex="-1"><a class="header-anchor" href="#信号量"><span>信号量</span></a></h3><ul><li>原语（Primitive） 是操作系统提供的一个 不可被打断 的最小执行单元，常用于多线程/进程同步中，保证共享资源的安全访问。</li><li>低级原语是“底层锁” —— 控资源互斥，不管通信</li><li>高级原语是“系统服务” —— 能同步、能通信、能阻塞管理</li></ul><table><thead><tr><th>操作名称</th><th>类型</th><th>作用简介</th></tr></thead><tbody><tr><td>P 操作</td><td>低级原语</td><td>申请资源，若资源不可用则阻塞等待</td></tr><tr><td>V 操作</td><td>低级原语</td><td>释放资源，唤醒等待进程</td></tr><tr><td>send 操作</td><td>高级原语</td><td>发送信号量（消息传递）</td></tr><tr><td>receive 操作</td><td>高级原语</td><td>接收信号量（消息传递）</td></tr></tbody></table><ul><li>P操作尝试“占用”一个资源，若资源已用完，则阻塞等待。 每次执行P操作会使信号量S减1</li><li>V操作释放一个资源，若有进程等待，则唤醒其中一个。 每次执行V操作会使信号量S加1</li><li>send/receive 更多用于进程间通信的高级同步。</li></ul><h3 id="进程通信" tabindex="-1"><a class="header-anchor" href="#进程通信"><span>进程通信</span></a></h3><table><thead><tr><th>通信方式</th><th>是否共享内存</th><th>是否阻塞</th><th>特点简介</th></tr></thead><tbody><tr><td>管道（Pipe）</td><td>❌ 否</td><td>✅ 是/否</td><td>父子进程间简单通信（匿名管道）或任意进程通信（命名管道 FIFO）</td></tr><tr><td>消息队列（Message Queue）</td><td>❌ 否</td><td>✅ 是/否</td><td>内核维护的消息列表，支持异步、结构化传输</td></tr><tr><td>信号量（Semaphore）</td><td>❌ 否</td><td>✅ 是</td><td>一般用于同步或互斥，不适合传数据</td></tr><tr><td>共享内存（Shared Memory）</td><td>✅ 是</td><td>❌ 否</td><td>速度最快，需要配合信号量等机制控制同步</td></tr><tr><td>套接字（Socket）</td><td>❌ 否</td><td>✅ 是/否</td><td>跨主机通信，基于网络协议，适合分布式系统</td></tr><tr><td>信号（Signal）</td><td>❌ 否</td><td>✅ 是</td><td>传递简单通知或控制指令（如中断）</td></tr><tr><td>内存映射文件（mmap）</td><td>✅ 是（文件）</td><td>❌ 否</td><td>多进程共享同一个磁盘文件映射的内存区域</td></tr></tbody></table><h3 id="mmap" tabindex="-1"><a class="header-anchor" href="#mmap"><span>mmap</span></a></h3><ul><li>mmap（memory map，内存映射）是操作系统提供的一种将文件直接映射到进程虚拟内存地址空间的机制。</li><li>它的核心思想是：让文件内容像数组一样可以直接读写，而不需要传统的 read() / write() 系统调用来搬运数据。</li></ul><table><thead><tr><th>特性</th><th>共享内存（Shared Memory）</th><th>mmap（Memory Mapped File）</th></tr></thead><tbody><tr><td>数据来源</td><td>内存</td><td>文件或匿名内存</td></tr><tr><td>是否持久化</td><td>否（除非配合文件映射）</td><td>可以持久化（文件映射）</td></tr><tr><td>生命周期</td><td>独立于进程，需要手动删除</td><td>依赖映射对象和进程，文件映射可持久</td></tr><tr><td>访问方式</td><td>直接访问内存</td><td>通过映射内存访问文件或匿名页</td></tr><tr><td>同步/锁机制</td><td>需要显式同步（信号量/互斥锁）</td><td>文件可用 msync，进程间需锁</td></tr><tr><td>典型用途</td><td>高速 IPC</td><td>大文件处理、进程间共享文件</td></tr></tbody></table><h3 id="进程调度算法" tabindex="-1"><a class="header-anchor" href="#进程调度算法"><span>进程调度算法</span></a></h3><table><thead><tr><th>调度算法</th><th>特点描述</th><th>优缺点</th></tr></thead><tbody><tr><td>FIFO（先入先出）</td><td>进程按到达顺序排队执行</td><td>有利于长作业，不利于短作业</td></tr><tr><td>短进程优先</td><td>优先执行运行时间短的进程</td><td>有利于短进程，不利于长作业</td></tr><tr><td>高优先权</td><td>根据优先权调度，分静态和动态优先权</td><td>可能导致低优先级进程饥饿</td></tr><tr><td>时间片轮转</td><td>每个进程分配固定时间片，循环执行</td><td>公平，适合交互系统，响应快</td></tr></tbody></table><ul><li>在多个作业同时到达的情况下，短作业优先(SJF)调度算法能够获得最短的平均周转时间，这是一个经过数学证明的结论。</li></ul><h2 id="处理和调度" tabindex="-1"><a class="header-anchor" href="#处理和调度"><span>处理和调度</span></a></h2><h3 id="作业状态" tabindex="-1"><a class="header-anchor" href="#作业状态"><span>作业状态</span></a></h3><table><thead><tr><th>状态名称</th><th>说明</th></tr></thead><tbody><tr><td>提交</td><td>作业从输入设备进入外部存储设备的过程，信息未完全进入系统，不能被调度程序选取。</td></tr><tr><td>收容</td><td>也叫后备状态，作业被存放在外存的“输入井”中，等待后续处理。</td></tr><tr><td>执行</td><td>调度程序从后备作业中选取作业加载到内存并分配资源，作业进入执行状态。但同一时刻只有部分作业占用CPU，其余处于等待。</td></tr><tr><td>完成</td><td>作业运行结束，资源未完全回收，系统进行打印结果、回收资源等善后处理。</td></tr></tbody></table><h3 id="进程调度时机" tabindex="-1"><a class="header-anchor" href="#进程调度时机"><span>进程调度时机</span></a></h3><ul><li>进程调度指的是操作系统在内存中多个就绪进程之间分配CPU使用权，是微观的调度，涉及进程切换</li></ul><table><thead><tr><th>调度时机</th><th>说明</th></tr></thead><tbody><tr><td>1. 正在运行的进程运行完毕或发生不可继续运行事件</td><td>当前进程执行完毕或遇到阻塞，需调度其他进程执行</td></tr><tr><td>2. 运行中的进程提出输入/输出请求而暂停运行</td><td>进程等待I/O操作完成，CPU调度其他进程</td></tr><tr><td>3. 进程执行通信或同步原语操作（如 P 操作）</td><td>因同步操作阻塞，CPU调度其他进程</td></tr><tr><td>4. 可抢先式调度中更高优先级进程进入就绪队列</td><td>更高优先级进程抢占CPU，当前进程被挂起</td></tr><tr><td>5. 时间片轮转法中时间片用完</td><td>当前进程时间片耗尽，调度器切换到下一个进程</td></tr></tbody></table><h3 id="死锁产生的四个必要条件" tabindex="-1"><a class="header-anchor" href="#死锁产生的四个必要条件"><span>死锁产生的四个必要条件</span></a></h3><table><thead><tr><th>条件名称</th><th>说明</th></tr></thead><tbody><tr><td>互斥条件</td><td>资源在某一时刻只能被一个进程独占使用，其他进程必须等待资源释放才能使用。</td></tr><tr><td>请求和保持条件</td><td>进程已占有至少一个资源，同时又请求新的资源，若新资源被占用，则进程阻塞，但不释放已占有的资源。</td></tr><tr><td>不剥夺条件</td><td>资源只能由占有它的进程主动释放，不能被系统强行剥夺。</td></tr><tr><td>环路等待条件</td><td>存在进程-资源的环形等待链，进程依次等待下一个进程占有的资源，形成死锁环路。</td></tr></tbody></table><h3 id="死锁的处理" tabindex="-1"><a class="header-anchor" href="#死锁的处理"><span>死锁的处理</span></a></h3><table><thead><tr><th>处理方法</th><th>说明</th></tr></thead><tbody><tr><td>预防死锁</td><td>事先破坏产生死锁的四个必要条件之一或多个，通过设置限制条件避免死锁发生。</td></tr><tr><td>避免死锁</td><td>银行家算法。动态分配资源时检测系统安全状态，防止进入不安全状态，从而避免死锁。</td></tr><tr><td>检测死锁</td><td>允许死锁发生，通过检测机制发现死锁，并定位相关进程和资源。</td></tr><tr><td>解除死锁</td><td>发现死锁后采取措施，如撤销或挂起进程，回收资源，恢复进程运行，解除死锁状态。</td></tr></tbody></table><h2 id="存储器管理" tabindex="-1"><a class="header-anchor" href="#存储器管理"><span>存储器管理</span></a></h2><h3 id="存储器分类" tabindex="-1"><a class="header-anchor" href="#存储器分类"><span>存储器分类</span></a></h3><table><thead><tr><th>存储类型</th><th>访问速度</th><th>容量</th><th>所在位置</th><th>主要作用与特点</th></tr></thead><tbody><tr><td><strong>寄存器</strong></td><td>极快（最快）</td><td>极小</td><td>CPU 内部</td><td>暂存指令/数据，直接与CPU协同工作，价格昂贵，数量有限</td></tr><tr><td><strong>高速缓存（Cache）</strong></td><td>很快</td><td>较小</td><td>CPU 与内存之间</td><td>存放最近/常用数据，减小CPU与内存速度差，提高系统效率</td></tr><tr><td><strong>内存（主存）</strong></td><td>中等（比Cache慢）</td><td>中等</td><td>主板上，直接与CPU相连</td><td>存放运行中的程序和数据，CPU必须从内存中读取指令和数据</td></tr><tr><td><strong>磁盘缓存</strong></td><td>较慢（比内存慢）</td><td>大（缓冲区级）</td><td>磁盘和内存之间</td><td>缓解磁盘I/O慢的问题，提前加载常用数据，减少磁盘访问次数</td></tr></tbody></table><h3 id="程序装入方式" tabindex="-1"><a class="header-anchor" href="#程序装入方式"><span>程序装入方式</span></a></h3><table><thead><tr><th>装入方式</th><th>地址处理方式</th><th>是否支持移动</th><th>是否支持分段装入</th><th>适用环境</th><th>主要特点/备注</th></tr></thead><tbody><tr><td><strong>绝对装入</strong></td><td>编译时生成<strong>绝对地址</strong></td><td>❌ 不能移动</td><td>❌ 不支持</td><td>单道程序系统</td><td>编译阶段固定内存地址，装入时直接执行，简单高效，但灵活性差</td></tr><tr><td><strong>可重定位装入</strong></td><td>编译时生成<strong>相对地址</strong>，<br>装入时静态重定位</td><td>❌ 不能移动</td><td>❌ 不支持</td><td>多道批处理系统</td><td>装入时根据起始地址重定位；装入后地址固定，不能再动；需一次性分配完整内存空间</td></tr><tr><td><strong>动态运行时装入</strong></td><td>编译时生成<strong>相对地址</strong>，<br>运行时动态重定位</td><td>✅ 支持移动</td><td>✅ 支持</td><td>多道+虚拟存储系统</td><td>程序可分段、动态装入、动态扩展；支持非连续分配、地址空间大、程序段共享、高灵活性</td></tr></tbody></table><h3 id="连续内存分配" tabindex="-1"><a class="header-anchor" href="#连续内存分配"><span>连续内存分配</span></a></h3><ul><li>连续内存分配是指将内存中的空闲区域按照地址连续的方式分配给作业，从而使作业可以连续地使用内存空间。</li></ul><table><thead><tr><th>分配方式</th><th>是否支持多道程序</th><th>分区是否固定</th><th>是否支持移动</th><th>存在问题</th><th>适用场景</th><th>补充说明</th></tr></thead><tbody><tr><td><strong>单一连续分配</strong></td><td>❌ 只支持一道作业</td><td>❌ 无分区</td><td>❌ 不支持</td><td>内存利用率低，只能一道程序</td><td>单用户操作系统</td><td>最简单，已基本淘汰</td></tr><tr><td><strong>固定分区分配</strong></td><td>✅ 支持</td><td>✅ 固定大小</td><td>❌ 不支持</td><td>内部碎片大（分区大 &gt; 作业大小）</td><td>早期多道系统</td><td>每个分区一道作业，分区提前划定</td></tr><tr><td><strong>动态分区分配</strong></td><td>✅ 支持</td><td>❌ 动态划分</td><td>❌ 不支持</td><td>外部碎片严重</td><td>多道程序系统</td><td>每次装入根据作业需要分配内存</td></tr><tr><td><strong>可重定位分区分配</strong></td><td>✅ 支持</td><td>❌ 动态划分</td><td>✅ 支持（重定位+紧凑）</td><td>有开销但能解决外部碎片问题</td><td>高级操作系统</td><td>支持地址重定位和紧凑处理</td></tr></tbody></table><ul><li><p>紧凑（Compaction）是指将分散在内存中零碎的空闲分区，通过搬移正在运行的程序（即已分配分区）的位置，将它们集中起来形成一个大的连续空闲区，从而使一个较大的作业能装入内存。</p></li><li><p>在多道程序环境中，要想将一个用户源代码变成一个可以在内存中执行的 程序，通常分为三个步骤：编译、链接、载入。</p><ul><li>编译：由编译程序将用户的源代码编译成若干个目标模块。</li><li>链接：由链接程序将编译后形成的一组目标模块以及它们所需要的库函数链 接在一起，形成一个完整的载入模块。</li><li>载入：由载入程序将载入模块载入内存。</li></ul></li></ul><h3 id="动态分区分配算法" tabindex="-1"><a class="header-anchor" href="#动态分区分配算法"><span>动态分区分配算法</span></a></h3><ul><li>动态分区分配是为了在多道程序环境下动态分配内存，根据作业实际需要的大小，临时划分内存分区，从而提高内存利用率，支持多个作业并发执行。</li></ul><table><thead><tr><th>算法名称</th><th>英文缩写/别名</th><th>排列依据</th><th>查找起点</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td><strong>首次适应算法</strong></td><td><strong>First Fit</strong></td><td>按地址递增排序</td><td>空闲区表首开始</td><td>查找快，开销小</td><td>易产生大量小碎片（靠前位置）</td></tr><tr><td><strong>循环首次适应算法</strong></td><td><strong>Next Fit</strong></td><td>按地址递增排序</td><td>上次查找结束处继续</td><td>避免首次适应“靠前碎片堆积”</td><td>整体内存利用率不如最佳适应</td></tr><tr><td><strong>最佳适应算法</strong></td><td><strong>Best Fit</strong></td><td>按大小递增排序</td><td>空闲区表首开始</td><td>能尽量利用小块空间</td><td>易产生许多无法再用的小碎片</td></tr><tr><td><strong>最坏适应算法</strong></td><td><strong>Worst Fit</strong></td><td>按大小递减排序</td><td>空闲区表首开始</td><td>保留大空闲区，方便大作业</td><td>分配后剩大空闲区→也易碎片化</td></tr><tr><td><strong>快速适应算法</strong></td><td><strong>Quick Fit</strong></td><td>分区大小分类链表</td><td>查找对应大小链表</td><td>查找效率高，分配速度快</td><td>维护多个链表开销大，更新麻烦</td></tr></tbody></table><h3 id="分页和分段" tabindex="-1"><a class="header-anchor" href="#分页和分段"><span>分页和分段</span></a></h3><ul><li>分页：把程序按固定大小切成页，让他们分散存到内存空闲块中，提高内存利用率，对程序员不可见。</li><li>分段：把程序按逻辑功能划分为段（如代码段、数据段），方便管理和共享，对程序员可见。</li></ul><table><thead><tr><th>对比项</th><th>分页（Page）</th><th>分段（Segment）</th><th>段页式（Segmented Paging）</th></tr></thead><tbody><tr><td>📌 分配单位</td><td>页（Page）</td><td>段（Segment）</td><td>段 ➕ 页</td></tr><tr><td>📌 单位性质</td><td>物理单位</td><td>逻辑单位</td><td>逻辑 + 物理组合</td></tr><tr><td>📌 地址结构</td><td>一维（页号 + 页内地址）</td><td>二维（段号 + 段内地址）</td><td>三维（段号 + 页号 + 页内地址）</td></tr><tr><td>📌 地址空间</td><td>一维线性地址空间</td><td>二维逻辑结构</td><td>二维逻辑结构 + 页表支持</td></tr><tr><td>📌 页/段大小</td><td>固定，由系统统一设定</td><td>不固定，由用户程序决定</td><td>段大小不一，每段再分页，页大小固定</td></tr><tr><td>📌 分配方式</td><td>离散分配</td><td>离散分配（逻辑上连续）</td><td>离散分配</td></tr><tr><td>📌 地址转换机制</td><td>页表</td><td>段表</td><td>段表 ➕ 页表</td></tr><tr><td>📌 设计目的</td><td>解决内存碎片问题，提高内存利用率</td><td>方便程序设计和逻辑管理</td><td>综合分页和分段优点</td></tr><tr><td>📌 是否支持共享段</td><td>不支持</td><td>支持</td><td>支持</td></tr><tr><td>📌 程序员可见性</td><td>不可见，系统自动完成</td><td>可见，程序员感知逻辑段</td><td>可见段结构，分页由系统处理</td></tr></tbody></table><h3 id="虚拟存储器三大特性" tabindex="-1"><a class="header-anchor" href="#虚拟存储器三大特性"><span>虚拟存储器三大特性</span></a></h3><ul><li>虚拟存储器是操作系统为了实现多道程序并发执行而提供的一种存储器管理技术，它将内存和外存（硬盘）结合起来，形成一个逻辑上的大内存，从而实现内存的按需分配和动态扩展。<strong>虚拟存储器利用“虚拟性”提供大地址空间，用“多次性”按需加载程序片段，再通过“对换性”腾出空间保持高效运行。</strong></li></ul><table><thead><tr><th>特性</th><th>含义说明</th><th>举例/关键词</th><th>目的/好处</th></tr></thead><tbody><tr><td><strong>多次性</strong></td><td>作业不是一次性全部调入内存，而是<strong>按需分批</strong>调入（边运行边加载）</td><td>局部性原理、按需分页</td><td><strong>减少内存压力</strong>，提升并发能力</td></tr><tr><td><strong>对换性</strong></td><td>暂时不用的内容可以<strong>调出内存到磁盘</strong>，等需要再调回</td><td>整体对换（进程级）、部分对换（页/段）</td><td><strong>腾出空间</strong>，提升内存利用率</td></tr><tr><td><strong>虚拟性</strong></td><td>用户看到的地址空间（逻辑内存）<strong>比实际内存大得多</strong></td><td>虚拟地址 &gt; 物理内存，地址映射机制</td><td><strong>让程序感觉内存“无限大”</strong></td></tr></tbody></table><h3 id="请求分页存储管理方式" tabindex="-1"><a class="header-anchor" href="#请求分页存储管理方式"><span>请求分页存储管理方式</span></a></h3><ul><li>是虚拟存储器的一种管理方法，核心思想：程序的页面（代码和数据）只有在真正需要使用时，才从外存调入内存，而不是一开始就全部加载进来。</li></ul><table><thead><tr><th>调页策略</th><th>定义说明</th><th>优点</th><th>缺点</th><th>典型应用</th></tr></thead><tbody><tr><td><strong>预调页策略</strong> (Pre-Paging)</td><td>一次性调入多个相邻页，预测后续可能访问的页面提前加载。</td><td>减少缺页中断次数，提高首次加载效率</td><td>若预测不准，调入未使用页，浪费内存资源</td><td>程序首次加载时，程序员可指定预调页</td></tr><tr><td><strong>请求调页策略</strong> (Demand Paging)</td><td>只在访问页面时发生缺页，才调入所需页面。</td><td>调入的页面一定会被访问，内存利用高</td><td>缺页中断较多，开销较大</td><td>当前主流虚拟存储器系统采用策略</td></tr></tbody></table><h3 id="页面置换算法" tabindex="-1"><a class="header-anchor" href="#页面置换算法"><span>页面置换算法</span></a></h3><ul><li>页面置换算法决定了在内存不足时，如何选择要换出的页面。</li></ul><table><thead><tr><th>算法名称</th><th>原理说明</th><th>优缺点</th><th>实现复杂度</th><th>备注</th></tr></thead><tbody><tr><td>最佳（OPT）</td><td>淘汰未来最长时间内不再使用的页面</td><td>理论最优，但需预知未来访问序列</td><td>不可实现</td><td>只作为最优参考标准</td></tr><tr><td>FIFO</td><td>淘汰最先进入内存的页面</td><td>简单实现，可能淘汰常用页（Belady现象）</td><td>低</td><td>可能出现Belady异常</td></tr><tr><td>LRU</td><td>淘汰最近最久未使用的页面</td><td>效果好，接近OPT，但实现较复杂</td><td>中高</td><td>需要记录访问时间</td></tr><tr><td>Clock</td><td>使用“访问位”和“修改位”指针循环检测</td><td>性能接近LRU，硬件支持较好</td><td>中</td><td>适合实际系统</td></tr></tbody></table><ul><li>Belady: 在某些情况下，增加物理内存的页面数，反而导致缺页次数增多的奇怪现象。因为FIFO算法只考虑了页面进入内存的先后顺序，而没有考虑页面的访问频率。</li></ul><h2 id="设备管理" tabindex="-1"><a class="header-anchor" href="#设备管理"><span>设备管理</span></a></h2><h3 id="i-o设备分类" tabindex="-1"><a class="header-anchor" href="#i-o设备分类"><span>I/O设备分类</span></a></h3><table><thead><tr><th>分类依据</th><th>分类类别</th><th>说明</th></tr></thead><tbody><tr><td>按使用特性</td><td>存储设备</td><td>用于数据存储，如硬盘、闪存</td></tr><tr><td></td><td>输入设备</td><td>用于向计算机输入信息，如键盘、鼠标</td></tr><tr><td></td><td>输出设备</td><td>用于从计算机输出信息，如显示器、打印机</td></tr><tr><td>按传输速率</td><td>低速设备</td><td>传输速度较慢，如键盘、鼠标</td></tr><tr><td></td><td>中速设备</td><td>传输速度中等，如磁带</td></tr><tr><td></td><td>高速设备</td><td>传输速度快，如硬盘、光驱</td></tr><tr><td>按共享属性</td><td>独占设备</td><td>同一时刻只能被一个进程使用</td></tr><tr><td></td><td>共享设备</td><td>多个进程可以共享使用</td></tr><tr><td></td><td>虚拟设备</td><td>通过软件模拟的设备</td></tr><tr><td>按信息交换单位</td><td>块设备</td><td>以块为单位进行数据传输，如硬盘</td></tr><tr><td></td><td>字符设备</td><td>以字符为单位进行数据传输，如键盘、鼠标</td></tr></tbody></table><h3 id="i-o软件分类" tabindex="-1"><a class="header-anchor" href="#i-o软件分类"><span>I/O软件分类</span></a></h3><table><thead><tr><th>软件层级</th><th>作用说明</th><th>备注</th></tr></thead><tbody><tr><td><strong>用户层软件</strong></td><td>提供用户与操作系统交互的接口，通过系统调用访问操作系统服务</td><td>高级语言通过库函数调用系统调用</td></tr><tr><td><strong>设备独立性软件</strong></td><td>统一设备驱动接口，负责设备命名、保护、分配和释放，管理数据传输存储空间</td><td>实现设备管理的抽象，屏蔽硬件差异</td></tr><tr><td><strong>设备驱动程序</strong></td><td>与硬件设备控制器直接通信，实现具体设备操作指令，控制设备运行</td><td>具体实现硬件操作，依赖硬件特性</td></tr><tr><td><strong>中断处理程序</strong></td><td>保存被中断进程环境，处理中断信号，切换进程上下文，读取设备状态及修改进程状态</td><td>保证系统响应硬件中断，恢复被中断进程运行状态</td></tr></tbody></table><h3 id="i-o控制方式" tabindex="-1"><a class="header-anchor" href="#i-o控制方式"><span>I/O控制方式</span></a></h3><ul><li>指的是操作系统或CPU如何管理和控制外围设备（如键盘、磁盘、打印机）的输入输出</li></ul><table><thead><tr><th>控制方式</th><th>原理及特点</th><th>优缺点</th><th>CPU与I/O关系</th></tr></thead><tbody><tr><td>程序I/O方式</td><td>CPU不断轮询检测I/O设备状态（忙等待），无中断机制</td><td>简单实现，但浪费CPU资源</td><td>CPU等待I/O完成，不能做其它任务</td></tr><tr><td>中断驱动I/O方式</td><td>I/O设备完成操作后通过中断通知CPU，CPU暂停当前任务处理中断</td><td>CPU和I/O并行，提高效率</td><td>CPU执行任务，I/O完成时打断CPU处理</td></tr><tr><td>直接存储器访问(DMA)</td><td>I/O设备直接与内存交换数据，CPU只负责启动和结束，减少CPU干预</td><td>进一步提升CPU利用率</td><td>CPU与I/O设备、内存并行工作</td></tr><tr><td>通道方式</td><td>专门I/O处理机（通道）负责I/O任务，CPU主要处理数据，三者并行工作</td><td>最大化系统吞吐量，CPU负担最轻</td><td>CPU、通道、I/O设备三者同时工作</td></tr></tbody></table><ul><li>程序I/O：CPU等设备，一直盯着设备，看它有没有准备好，浪费资源。</li><li>中断驱动：设备准备好了，打个招呼给CPU，CPU再去处理，节省等待时间。</li><li>DMA：设备和内存直接传输数据，CPU只管安排，不用操心具体数据搬运。</li><li>通道方式：多了个专门的“帮手”去管I/O，CPU专心干别的，效率最高。</li></ul><h3 id="i-o通道控制方式" tabindex="-1"><a class="header-anchor" href="#i-o通道控制方式"><span>I/O通道控制方式</span></a></h3><ul><li>一种更高级的I/O控制方式，通常出现在大型机和高端服务器中</li><li>I/O通道是专门的硬件“辅助处理器”或“专用控制器”，负责处理I/O任务，减轻CPU负担</li><li>这样CPU可以专注做计算，I/O通道专注做设备管理，实现三者（CPU、通道、设备）并行工作，大幅提升性能。</li></ul><table><thead><tr><th>通道类型</th><th>特点描述</th><th>适用设备类型</th><th>优缺点</th></tr></thead><tbody><tr><td>字节多路通道</td><td>多个非分配子通道，按时间片轮转方式分时共享主通道，按字节交叉传输</td><td>低速设备</td><td>利用率较高，不丢信息，但不适合高速设备</td></tr><tr><td>数组选择通道</td><td>只有一个分配子通道，一次只能控制一台设备，设备独占通道，闲置时不能切换</td><td>高速设备</td><td>传输速率高，但通道利用率低，易闲置</td></tr><tr><td>数组多路通道</td><td>结合数组选择通道的高速和字节多路通道的分时共享，含多个非分配子通道，实现数组方式传输</td><td>高速和中速设备</td><td>传输速率高且通道利用率好，广泛用于多设备连接</td></tr></tbody></table><ul><li>字节多路通道：像排队轮流用，一个字节一个字节地传输，适合慢设备。</li><li>数组选择通道：一个设备一次用到底，快但浪费通道。</li><li>数组多路通道：综合两者优点，快速且多设备共享，效率高。</li></ul><h3 id="中断分类" tabindex="-1"><a class="header-anchor" href="#中断分类"><span>中断分类</span></a></h3><ul><li>中断是计算机系统中的一种重要机制，用于处理突发事件或异步事件，提高系统的响应能力和可靠性。</li></ul><table><thead><tr><th>中断类型</th><th>来源</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>内中断</td><td>处理器和内存内部产生</td><td>也称陷阱，程序执行错误或非法操作导致的中断</td><td>地址非法、校验错误、执行特权指令</td></tr><tr><td>外中断</td><td>处理器和内存外部设备产生</td><td>设备或外部事件触发的中断</td><td>I/O设备中断、断点调试</td></tr><tr><td>软中断</td><td>软件模拟硬中断的信号通信</td><td>用于进程间通信，CPU在适当时机处理软中断信号</td><td>Unix系统的信号机制</td></tr><tr><td>硬中断</td><td>硬件设备产生的中断</td><td>用于处理硬件设备的中断请求</td><td>键盘、鼠标、网卡中断</td></tr></tbody></table><h3 id="缓冲分类" tabindex="-1"><a class="header-anchor" href="#缓冲分类"><span>缓冲分类</span></a></h3><ul><li>I/O设备速度远低于CPU，为了协调I/O设备和CPU的速度差，引入缓冲区。</li></ul><table><thead><tr><th>缓冲类型</th><th>工作原理</th><th>优点</th><th>缺点 / 注意事项</th></tr></thead><tbody><tr><td><strong>单缓冲</strong></td><td>设置一个缓冲区，I/O 和 CPU 轮流访问它</td><td>简单，支持基本并行处理</td><td>CPU 或 I/O 常常空闲，效率不高</td></tr><tr><td><strong>双缓冲</strong></td><td>设置两个缓冲区，I/O 装填一个，CPU 处理另一个，两者并行交替</td><td>提高 CPU 与 I/O 并行度，减少等待时间</td><td>CPU 必须等待另一个缓冲区填满或清空，仍有等待情况</td></tr><tr><td><strong>缓冲池</strong></td><td>设置多个缓冲区，并划分为三种：①空缓冲区 ②输入缓冲区 ③输出缓冲区；用队列管理</td><td>支持多个并发 I/O 操作，效率最高，资源利用率高</td><td>管理复杂，需要操作系统协调多个队列</td></tr></tbody></table><h4 id="举例" tabindex="-1"><a class="header-anchor" href="#举例"><span>举例</span></a></h4><table><thead><tr><th>项目</th><th>解释</th></tr></thead><tbody><tr><td><strong>T1</strong></td><td>I/O 设备读取数据 → 写入缓冲区的时间</td></tr><tr><td><strong>T2</strong></td><td>操作系统从缓冲区 → 用户进程的时间</td></tr><tr><td><strong>T3</strong></td><td>CPU 对数据的处理时间</td></tr><tr><td><strong>单缓冲效率</strong></td><td>取决于 Max(T1, T3) + T2</td></tr><tr><td><strong>双缓冲优势</strong></td><td>T1 和 T3 可以<strong>真正并行</strong>（一个写缓冲，一个读处理），减少等待</td></tr><tr><td><strong>缓冲池作用</strong></td><td>支持更多设备、多个进程同时读写数据，提升 I/O 整体吞吐能力</td></tr></tbody></table><h3 id="磁盘调度算法" tabindex="-1"><a class="header-anchor" href="#磁盘调度算法"><span>磁盘调度算法</span></a></h3><ul><li>磁盘调度就是操作系统为了提高磁盘访问效率，根据一定算法安排磁头移动的顺序，从而减少寻道时间（磁头移动的时间）和平均响应时间。</li></ul><table><thead><tr><th>算法</th><th>简称</th><th>原理</th><th>优点</th><th>缺点</th><th>关键词/比喻</th></tr></thead><tbody><tr><td>先来先服务</td><td>FCFS</td><td>谁先请求谁先服务，按请求顺序处理</td><td>简单、公平、实现容易</td><td>平均寻道时间不稳定，可能很长</td><td>排队买票</td></tr><tr><td>最短寻道优先</td><td>SSTF</td><td>选离当前磁头最近的磁道请求优先</td><td>平均寻道时间较短</td><td>有可能导致远程请求长期饥饿</td><td>最近的先上车</td></tr><tr><td>扫描算法</td><td>SCAN</td><td>磁头按一个方向扫过去，有请求就服务，走到底再反方向扫回</td><td>避免饥饿，效率较高</td><td>两端请求被服务频率低</td><td>电梯（来回跑）</td></tr><tr><td>循环扫描</td><td>CSCAN</td><td>磁头只朝一个方向移动，走到底立即跳回起点重新开始扫描</td><td>服务更均衡，延迟更平均</td><td>跳回成本高（非真正物理跳，但服务延迟）</td><td>单向电梯，绕圈跑</td></tr></tbody></table><h3 id="磁盘阵列" tabindex="-1"><a class="header-anchor" href="#磁盘阵列"><span>磁盘阵列</span></a></h3><ul><li>RAID 是通过将多个磁盘组合成一个逻辑磁盘，利用数据冗余和并行访问技术，来提升：存储性能（提高读写速度），容错能力（防止数据丢失），存储容量（多个盘组合）</li></ul><table><thead><tr><th>级别</th><th>关键特性</th><th>容错</th><th>读性能</th><th>写性能</th><th>成本/磁盘利用率</th><th>适用场景 / 说明</th></tr></thead><tbody><tr><td><strong>RAID 0</strong></td><td>数据条带化并行存储（无冗余）</td><td>❌ 无</td><td>✅ 高</td><td>✅ 高</td><td>✅ 高（100%）</td><td>对性能要求高、不关心数据安全</td></tr><tr><td><strong>RAID 1</strong></td><td>镜像备份（数据复制）</td><td>✅ 一块</td><td>✅ 高</td><td>❌ 一般</td><td>❌ 低（50%）</td><td>数据安全要求高，读多写少</td></tr><tr><td><strong>RAID 2</strong></td><td>位/字节级交叉 + 海明校验</td><td>✅ 多块</td><td>❌ 较低</td><td>❌ 较低</td><td>❌ 低（多个冗余盘）</td><td>学术研究用，几乎不实际使用</td></tr><tr><td><strong>RAID 3</strong></td><td>条带化 + 单校验盘（位交叉）</td><td>✅ 一块</td><td>✅ 高</td><td>❌ 低</td><td>❌ 中等</td><td>连续大数据传输，如视频</td></tr><tr><td><strong>RAID 4</strong></td><td>块级条带化 + 单校验盘</td><td>✅ 一块</td><td>✅ 高</td><td>❌ 写易冲突</td><td>❌ 中等</td><td>少量写，多读的应用</td></tr><tr><td><strong>RAID 5</strong></td><td>块级条带 + 校验块分布</td><td>✅ 一块</td><td>✅ 高</td><td>✅ 中等</td><td>✅ 较高（节省空间）</td><td>最常用，读写均衡场景</td></tr><tr><td><strong>RAID 6</strong></td><td>RAID5 + 双校验盘</td><td>✅ 两块</td><td>✅ 高</td><td>❌ 写慢</td><td>❌ 低（空间冗余高）</td><td>高容错要求，如金融</td></tr><tr><td><strong>RAID 7</strong></td><td>RAID3基础 + 缓存 + 实时控制</td><td>✅ 一块</td><td>✅ 非常高</td><td>✅ 非常高</td><td>❌ 极贵</td><td>高端实时系统，商用很少</td></tr></tbody></table><h3 id="设备分配数据结构" tabindex="-1"><a class="header-anchor" href="#设备分配数据结构"><span>设备分配数据结构</span></a></h3><ul><li>操作系统不能直接对硬件操作，它必须通过某种“中介结构”来统一调度各种设备</li><li>当多个设备共享一个控制器或通道时，就需要分层管理结构来明确谁控制谁</li></ul><table><thead><tr><th>数据结构</th><th>缩写</th><th>管理对象</th><th>每个对应的个数</th><th>说明与作用</th></tr></thead><tbody><tr><td><strong>设备控制表</strong></td><td>DCT</td><td>每个<strong>外设</strong></td><td>每个外设一个</td><td>描述单个物理设备的状态、分配情况、控制信息等。比如打印机、磁带驱动器等。</td></tr><tr><td><strong>控制器控制表</strong></td><td>COCT</td><td>每个<strong>控制器</strong></td><td>每个控制器一个</td><td>控制器负责管理多个外设，对外设统一调度和管理。比如一个磁盘控制器控制多个硬盘。</td></tr><tr><td><strong>通道控制表</strong></td><td>CHCT</td><td>每个<strong>I/O通道</strong></td><td>每个通道一个</td><td>I/O 通道可以并行处理多个设备的请求，用于高速传输，类似于 DMA 控制器。</td></tr><tr><td><strong>系统设备表</strong></td><td>SDT</td><td><strong>全系统设备总览</strong></td><td>系统中只有一个</td><td>描述系统中所有设备的总体信息（如设备类型、编号、状态等），相当于全局目录或总表。</td></tr></tbody></table><h2 id="文件管理" tabindex="-1"><a class="header-anchor" href="#文件管理"><span>文件管理</span></a></h2><ul><li>文件存储的单位：记录</li><li>FCB：文件控制块，存储文件的元数据，包括文件名、文件类型、文件大小、文件创建时间、文件修改时间、文件访问时间等。</li><li>能顺序读不一定能随机读，能随机读一定能顺序读。</li></ul><h3 id="文件类型分类" tabindex="-1"><a class="header-anchor" href="#文件类型分类"><span>文件类型分类</span></a></h3><table><thead><tr><th>分类角度</th><th>分类方式</th><th>举例或说明</th></tr></thead><tbody><tr><td><strong>按用途</strong></td><td>系统文件</td><td>操作系统内核、驱动程序</td></tr><tr><td></td><td>用户文件</td><td>用户写的文本、数据、程序</td></tr><tr><td></td><td>库文件</td><td>供程序调用的通用模块，如 <code>.dll</code>、<code>.so</code></td></tr><tr><td><strong>按数据形式</strong></td><td>源文件</td><td><code>.c</code>、<code>.java</code>，未编译</td></tr><tr><td></td><td>目标文件</td><td><code>.o</code>、<code>.obj</code>，编译后未链接</td></tr><tr><td></td><td>可执行文件</td><td><code>.exe</code>、无扩展名（Linux），可直接运行</td></tr><tr><td><strong>按访问权限</strong></td><td>只执行文件</td><td>只能运行，不能查看或修改</td></tr><tr><td></td><td>只读文件</td><td>只能查看，不能写或运行</td></tr><tr><td></td><td>读写文件</td><td>可读、可写、可能还能执行</td></tr><tr><td><strong>按组织与处理方式</strong></td><td>普通文件</td><td>数据文件、程序文件</td></tr><tr><td></td><td>目录文件</td><td>管理其他文件的目录项，如 Linux 的 <code>/home</code></td></tr><tr><td></td><td>特殊文件</td><td>外部设备文件或通信文件，如 <code>/dev/sda</code></td></tr></tbody></table><h3 id="文件的逻辑结构" tabindex="-1"><a class="header-anchor" href="#文件的逻辑结构"><span>文件的逻辑结构</span></a></h3><table><thead><tr><th>分类</th><th>类型</th><th>子类型 / 特点</th><th>说明与示例</th></tr></thead><tbody><tr><td><strong>有结构文件</strong></td><td><strong>定长记录</strong></td><td>每条记录长度一致，字段固定位置</td><td>处理方便、控制容易，传统数据处理中常用</td></tr><tr><td></td><td><strong>变长记录</strong></td><td>各记录长度不同，长度可知，通常带有长度标识</td><td>灵活性高，根据记录组织方式可分为以下几种</td></tr><tr><td></td><td>└ 顺序文件</td><td>按某种顺序排列，记录可定长也可变长</td><td>读取效率高，但插入、删除不便</td></tr><tr><td></td><td>└ 索引文件</td><td>为每个记录建立索引项，加速查找</td><td>类似于数据库中的索引表</td></tr><tr><td></td><td>└ 索引顺序文件</td><td>为每组记录的首记录建立索引项</td><td>兼顾索引与顺序访问，适合范围查找</td></tr><tr><td><strong>无结构文件</strong></td><td><strong>流式文件</strong></td><td>由字符流组成，无明确记录单位</td><td>适合纯文本、日志类文件；Unix 中所有文件都视为流式文件</td></tr></tbody></table><h3 id="文件的物理结构" tabindex="-1"><a class="header-anchor" href="#文件的物理结构"><span>文件的物理结构</span></a></h3><table><thead><tr><th>物理结构类型</th><th>说明</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>顺序结构</td><td>文件逻辑上顺序的记录分配到连续的物理块中</td><td>管理简单，存取速度快</td><td>空间利用率低，插入删除操作不便，仅能在末尾操作</td></tr><tr><td>链接结构</td><td>文件数据存放在非连续物理块，每块包含指针指向下一个物理块</td><td>空间利用率高，便于文件扩展</td><td>文件搜索效率低</td></tr><tr><td>索引结构</td><td>为文件建立索引表，表项指出文件记录所在物理块号</td><td>满足动态增长需求，存取方便</td><td>索引表占用额外空间，多级索引访问时间较长</td></tr></tbody></table><h3 id="索引分配方式" tabindex="-1"><a class="header-anchor" href="#索引分配方式"><span>索引分配方式</span></a></h3><table><thead><tr><th>分配方式</th><th>特点 &amp; 说明</th><th>示例 / 备注</th></tr></thead><tbody><tr><td>单级索引分配</td><td>用一个索引块存储所有数据块的地址；无法支持特别大的文件</td><td>简单但索引块容量有限，适合小文件</td></tr><tr><td>多级索引分配</td><td>当一个索引块满时，继续为其分配新的索引块形成“多级”，支持更大文件</td><td>类似树状结构，逐级跳转，读取时较慢</td></tr><tr><td>混合索引分配</td><td>同时使用直接索引 + 一级索引 + 二级索引 + 三级索引等多种方式组合</td><td>Unix 文件系统采用，平衡空间效率与访问速度</td></tr></tbody></table><ul><li>FAT（File Allocation Table）方式是一种链接分配方式，每个磁盘块用 FAT 表连接，但访问效率较低，尤其是随机访问。</li><li>多级与混合索引是为了解决 FAT/链式分配查找慢、空间浪费的问题。</li></ul><h3 id="文件存储空间管理" tabindex="-1"><a class="header-anchor" href="#文件存储空间管理"><span>文件存储空间管理</span></a></h3><table><thead><tr><th><strong>方式</strong></th><th><strong>基本原理</strong></th><th><strong>优点</strong></th><th><strong>缺点</strong></th><th><strong>典型系统</strong></th></tr></thead><tbody><tr><td>空闲表法</td><td>为每个空闲区建表项（记录起始盘块号和长度），以连续分配方式管理空闲空间</td><td>实现简单，便于管理</td><td>空闲表太大会影响效率；扩展性差；不适合频繁动态变化</td><td>小型系统</td></tr><tr><td>空闲链表法</td><td>将空闲盘块或盘区通过指针连接成链（盘块链 or 盘区链）</td><td>空间利用率高，便于扩展</td><td>查找空闲空间耗时；链结构不利于快速定位</td><td></td></tr><tr><td>位示图（bitmap）</td><td>每位代表一个盘块，0 表示空闲，1 表示已分配</td><td>检索效率高，结构紧凑</td><td>大容量磁盘位图占空间较多</td><td></td></tr><tr><td>成组链接法</td><td>每组记录若干空闲块地址，第一个块存后面一组地址，形成分组链</td><td>结合链表与表的优点，适合大系统</td><td>实现较复杂，需管理组之间的跳转</td><td><strong>UNIX 文件系统</strong></td></tr></tbody></table><h3 id="目录结构" tabindex="-1"><a class="header-anchor" href="#目录结构"><span>目录结构</span></a></h3><table><thead><tr><th><strong>目录结构类型</strong></th><th><strong>基本特点</strong></th><th><strong>优点</strong></th><th><strong>缺点</strong></th><th><strong>适用场景</strong></th></tr></thead><tbody><tr><td>单级目录</td><td>所有文件共享一个目录表，文件名必须唯一</td><td>实现简单，便于管理</td><td>文件名冲突严重，不支持用户划分，难以管理大量文件</td><td>小型、教学文件系统</td></tr><tr><td>两级目录</td><td>为每个用户分配一个用户目录，由主目录统一管理用户目录</td><td>文件名可重复；支持多用户；检索速度快</td><td>结构仍较简单，不支持用户目录下再细分子目录</td><td>多用户小型系统</td></tr><tr><td>多级目录</td><td>类似树结构，根目录下可递归建多个子目录</td><td>支持分级管理；灵活组织文件；支持共享与隔离</td><td>实现较复杂；路径管理成本提高</td><td>大型操作系统，如 Unix</td></tr></tbody></table><h2 id="操作系统安全和保护" tabindex="-1"><a class="header-anchor" href="#操作系统安全和保护"><span>操作系统安全和保护</span></a></h2><h3 id="安全的分类" tabindex="-1"><a class="header-anchor" href="#安全的分类"><span>安全的分类</span></a></h3><table><thead><tr><th><strong>等级</strong></th><th><strong>级别名称</strong></th><th><strong>核心特性</strong></th><th><strong>备注/关键词</strong></th></tr></thead><tbody><tr><td>D</td><td>安全保护欠缺级</td><td>没有安全保护，系统未进行安全评估</td><td>最低级，只有 D1</td></tr><tr><td>C1</td><td>自主访问控制级</td><td>提供审慎的保护，支持基本的身份认证和访问控制</td><td>C 类低级，审慎保护</td></tr><tr><td>C2</td><td>受控访问控制级</td><td>在 C1 基础上增加个体级访问控制，具备审计功能</td><td>可审计；用户级访问控制</td></tr><tr><td>B1</td><td>标签安全级</td><td>在 C2 基础上加入<strong>强制访问控制</strong>，所有用户需与安全等级关联</td><td>引入强制访问控制（MAC）</td></tr><tr><td>B2</td><td>结构化保护级</td><td>要求<strong>结构化设计</strong>，分析隐蔽信道，增强可信度</td><td>强化设计、分析隐蔽信道</td></tr><tr><td>B3</td><td>安全域级</td><td>在 B2 上增加 ACL、全面审计、安全恢复</td><td>ACL + 安全审计 + 灾难恢复</td></tr><tr><td>A1</td><td>验证设计级（最高安全）</td><td>包含 B3 所有功能 + <strong>形式化安全验证</strong></td><td>目前最高，只有 A1</td></tr></tbody></table><h3 id="计算机病毒特征" tabindex="-1"><a class="header-anchor" href="#计算机病毒特征"><span>计算机病毒特征</span></a></h3><table><thead><tr><th><strong>特征名称</strong></th><th><strong>定义说明</strong></th><th><strong>关键词/提示语</strong></th></tr></thead><tbody><tr><td>寄生性</td><td>病毒附着在正常程序上运行，掩盖自己，不易被发现</td><td><strong>“伪装成正常程序”</strong></td></tr><tr><td>传染性</td><td>病毒可自我复制，感染其他文件或系统</td><td><strong>“自我复制，快速扩散”</strong></td></tr><tr><td>隐蔽性</td><td>利用多种技术躲避检测与查杀工具，潜伏系统内部</td><td><strong>“伪装+躲避查杀”</strong></td></tr><tr><td>破坏性</td><td>占用资源、破坏文件、导致系统运行异常等</td><td><strong>“删除数据+资源占用+异常运行”</strong></td></tr></tbody></table><h3 id="设计安全操作系统的原则" tabindex="-1"><a class="header-anchor" href="#设计安全操作系统的原则"><span>设计安全操作系统的原则</span></a></h3><table><thead><tr><th><strong>原则名称</strong></th><th><strong>含义说明</strong></th><th><strong>关键词/提示语</strong></th></tr></thead><tbody><tr><td>微内核原则</td><td>操作系统核心应尽可能精简，仅保留基本功能，提高系统安全性</td><td><strong>“越小越安全”</strong></td></tr><tr><td>策略和机制分离原则</td><td>安全策略和实现机制分离，策略可灵活配置，机制只负责执行</td><td><strong>“策略是规则，机制是工具”</strong></td></tr><tr><td>安全入口原则</td><td>所有访问系统资源的请求都必须通过统一入口，便于统一控制与审计</td><td><strong>“一把门锁”</strong></td></tr><tr><td>分离原则</td><td>不同权限的用户/数据/功能应隔离，防止互相干扰或越权操作</td><td><strong>“权限隔离，互不干扰”</strong></td></tr><tr><td>部分硬件实现原则</td><td>安全功能中关键部分由硬件支持实现，提高可信度和抗篡改能力</td><td><strong>“硬件辅助保障”</strong></td></tr><tr><td>分层设计原则</td><td>将系统划分为多个安全等级层次，每层只与上下相邻层交互，增强模块独立性与控制性</td><td><strong>“高内聚，低耦合”</strong></td></tr></tbody></table>',129)]))}]]),l=JSON.parse('{"path":"/zh/posts/review/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.html","title":"操作系统","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-07-23T00:00:00.000Z","category":["Learning Records"],"tag":["Review"],"description":"操作系统 操作系统的概念 操作系统的特性 操作系统的目标 操作系统的发展 操作系统的功能 系统调用是用户程序请求操作系统内核提供服务的接口。 用户态程序无法直接访问硬件或操作系统核心资源（CPU、内存管理、文件、网络等）， 所以通过系统调用向 内核态 发起请求，由内核执行相应操作并返回结果。 操作系统的结构 微内核 进程管理 进程的特征 PCB 全称是...","head":[["meta",{"property":"og:url","content":"https://crc011220.github.io/zh/posts/review/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.html"}],["meta",{"property":"og:site_name","content":"Ruochen Chen"}],["meta",{"property":"og:title","content":"操作系统"}],["meta",{"property":"og:description","content":"操作系统 操作系统的概念 操作系统的特性 操作系统的目标 操作系统的发展 操作系统的功能 系统调用是用户程序请求操作系统内核提供服务的接口。 用户态程序无法直接访问硬件或操作系统核心资源（CPU、内存管理、文件、网络等）， 所以通过系统调用向 内核态 发起请求，由内核执行相应操作并返回结果。 操作系统的结构 微内核 进程管理 进程的特征 PCB 全称是..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-03T10:06:50.000Z"}],["meta",{"property":"article:tag","content":"Review"}],["meta",{"property":"article:published_time","content":"2025-07-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-03T10:06:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"操作系统\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-07-23T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-03T10:06:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ruochen Chen\\"}]}"]]},"headers":[{"level":2,"title":"操作系统的概念","slug":"操作系统的概念","link":"#操作系统的概念","children":[{"level":3,"title":"操作系统的特性","slug":"操作系统的特性","link":"#操作系统的特性","children":[]},{"level":3,"title":"操作系统的目标","slug":"操作系统的目标","link":"#操作系统的目标","children":[]},{"level":3,"title":"操作系统的发展","slug":"操作系统的发展","link":"#操作系统的发展","children":[]},{"level":3,"title":"操作系统的功能","slug":"操作系统的功能","link":"#操作系统的功能","children":[]},{"level":3,"title":"操作系统的结构","slug":"操作系统的结构","link":"#操作系统的结构","children":[]}]},{"level":2,"title":"进程管理","slug":"进程管理","link":"#进程管理","children":[{"level":3,"title":"进程的特征","slug":"进程的特征","link":"#进程的特征","children":[]},{"level":3,"title":"进程的三种基本状态","slug":"进程的三种基本状态","link":"#进程的三种基本状态","children":[]},{"level":3,"title":"进程同步","slug":"进程同步","link":"#进程同步","children":[]},{"level":3,"title":"同步机制规则","slug":"同步机制规则","link":"#同步机制规则","children":[]},{"level":3,"title":"信号量","slug":"信号量","link":"#信号量","children":[]},{"level":3,"title":"进程通信","slug":"进程通信","link":"#进程通信","children":[]},{"level":3,"title":"mmap","slug":"mmap","link":"#mmap","children":[]},{"level":3,"title":"进程调度算法","slug":"进程调度算法","link":"#进程调度算法","children":[]}]},{"level":2,"title":"处理和调度","slug":"处理和调度","link":"#处理和调度","children":[{"level":3,"title":"作业状态","slug":"作业状态","link":"#作业状态","children":[]},{"level":3,"title":"进程调度时机","slug":"进程调度时机","link":"#进程调度时机","children":[]},{"level":3,"title":"死锁产生的四个必要条件","slug":"死锁产生的四个必要条件","link":"#死锁产生的四个必要条件","children":[]},{"level":3,"title":"死锁的处理","slug":"死锁的处理","link":"#死锁的处理","children":[]}]},{"level":2,"title":"存储器管理","slug":"存储器管理","link":"#存储器管理","children":[{"level":3,"title":"存储器分类","slug":"存储器分类","link":"#存储器分类","children":[]},{"level":3,"title":"程序装入方式","slug":"程序装入方式","link":"#程序装入方式","children":[]},{"level":3,"title":"连续内存分配","slug":"连续内存分配","link":"#连续内存分配","children":[]},{"level":3,"title":"动态分区分配算法","slug":"动态分区分配算法","link":"#动态分区分配算法","children":[]},{"level":3,"title":"分页和分段","slug":"分页和分段","link":"#分页和分段","children":[]},{"level":3,"title":"虚拟存储器三大特性","slug":"虚拟存储器三大特性","link":"#虚拟存储器三大特性","children":[]},{"level":3,"title":"请求分页存储管理方式","slug":"请求分页存储管理方式","link":"#请求分页存储管理方式","children":[]},{"level":3,"title":"页面置换算法","slug":"页面置换算法","link":"#页面置换算法","children":[]}]},{"level":2,"title":"设备管理","slug":"设备管理","link":"#设备管理","children":[{"level":3,"title":"I/O设备分类","slug":"i-o设备分类","link":"#i-o设备分类","children":[]},{"level":3,"title":"I/O软件分类","slug":"i-o软件分类","link":"#i-o软件分类","children":[]},{"level":3,"title":"I/O控制方式","slug":"i-o控制方式","link":"#i-o控制方式","children":[]},{"level":3,"title":"I/O通道控制方式","slug":"i-o通道控制方式","link":"#i-o通道控制方式","children":[]},{"level":3,"title":"中断分类","slug":"中断分类","link":"#中断分类","children":[]},{"level":3,"title":"缓冲分类","slug":"缓冲分类","link":"#缓冲分类","children":[]},{"level":3,"title":"磁盘调度算法","slug":"磁盘调度算法","link":"#磁盘调度算法","children":[]},{"level":3,"title":"磁盘阵列","slug":"磁盘阵列","link":"#磁盘阵列","children":[]},{"level":3,"title":"设备分配数据结构","slug":"设备分配数据结构","link":"#设备分配数据结构","children":[]}]},{"level":2,"title":"文件管理","slug":"文件管理","link":"#文件管理","children":[{"level":3,"title":"文件类型分类","slug":"文件类型分类","link":"#文件类型分类","children":[]},{"level":3,"title":"文件的逻辑结构","slug":"文件的逻辑结构","link":"#文件的逻辑结构","children":[]},{"level":3,"title":"文件的物理结构","slug":"文件的物理结构","link":"#文件的物理结构","children":[]},{"level":3,"title":"索引分配方式","slug":"索引分配方式","link":"#索引分配方式","children":[]},{"level":3,"title":"文件存储空间管理","slug":"文件存储空间管理","link":"#文件存储空间管理","children":[]},{"level":3,"title":"目录结构","slug":"目录结构","link":"#目录结构","children":[]}]},{"level":2,"title":"操作系统安全和保护","slug":"操作系统安全和保护","link":"#操作系统安全和保护","children":[{"level":3,"title":"安全的分类","slug":"安全的分类","link":"#安全的分类","children":[]},{"level":3,"title":"计算机病毒特征","slug":"计算机病毒特征","link":"#计算机病毒特征","children":[]},{"level":3,"title":"设计安全操作系统的原则","slug":"设计安全操作系统的原则","link":"#设计安全操作系统的原则","children":[]}]}],"git":{"createdTime":1753242838000,"updatedTime":1756894010000,"contributors":[{"name":"Ruochen Chen","email":"ruocchen1220@gmail.com","commits":12}]},"readingTime":{"minutes":36.61,"words":10982},"filePathRelative":"zh/posts/review/操作系统.md","localizedDate":"2025年7月23日","excerpt":"\\n<h2>操作系统的概念</h2>\\n<h3>操作系统的特性</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>特征</th>\\n<th>含义</th>\\n<th>关键点</th>\\n<th>举例</th>\\n<th>实现方式</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>并发性</td>\\n<td>系统允许<strong>多个程序同时存在</strong>，并<strong>交替执行</strong></td>\\n<td>提高资源利用率、吞吐量</td>\\n<td>多个进程同时驻留内存</td>\\n<td>多道程序设计</td>\\n</tr>\\n<tr>\\n<td>共享性</td>\\n<td>多个进程可<strong>共同使用资源</strong>（资源复用）</td>\\n<td>并发进程共享系统资源</td>\\n<td>多个进程共享打印机</td>\\n<td>资源统一管理</td>\\n</tr>\\n<tr>\\n<td>虚拟性</td>\\n<td><strong>一个物理资源</strong>被“变成”<strong>多个逻辑资源</strong>，用户感觉“独占”</td>\\n<td>逻辑 &gt; 物理</td>\\n<td>虚拟内存、虚拟 CPU</td>\\n<td>时分复用、空分复用</td>\\n</tr>\\n<tr>\\n<td>异步性</td>\\n<td>程序执行过程<strong>不可预期</strong>，按调度策略<strong>交替推进</strong></td>\\n<td>非连续执行</td>\\n<td>一个进程执行到一半被切换</td>\\n<td>调度、切换机制</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}')}}]);