"use strict";(self.webpackChunkpersonalweb=self.webpackChunkpersonalweb||[]).push([[8462],{6262:(s,i)=>{i.A=(s,i)=>{const e=s.__vccOpts||s;for(const[s,a]of i)e[s]=a;return e}},7423:(s,i,e)=>{e.r(i),e.d(i,{comp:()=>t,data:()=>l});var a=e(641);const n={},t=(0,e(6262).A)(n,[["render",function(s,i){return(0,a.uX)(),(0,a.CE)("div",null,i[0]||(i[0]=[(0,a.Fv)('<h1 id="java-reflection-mechanism" tabindex="-1"><a class="header-anchor" href="#java-reflection-mechanism"><span>Java Reflection Mechanism</span></a></h1><p>Reflection in Java is a powerful mechanism that allows a program to inspect and manipulate objects, classes, methods, and fields at runtime, even if their details are not known at compile time. Reflection is particularly useful for dynamic behavior and is widely used in frameworks and libraries for tasks like dependency injection, ORM, and testing.</p><h2 id="key-concepts-of-reflection" tabindex="-1"><a class="header-anchor" href="#key-concepts-of-reflection"><span>Key Concepts of Reflection</span></a></h2><ol><li><p><strong>Class</strong>: The <code>Class</code> class in Java represents the meta-information about a class (like its name, methods, fields, etc.). Using <code>Class.forName(&quot;className&quot;)</code>, you can retrieve the <code>Class</code> object for a given class.</p></li><li><p><strong>Constructor</strong>: Reflection can access a class&#39;s constructors, allowing the creation of new instances dynamically using <code>Constructor.newInstance()</code>.</p></li><li><p><strong>Field</strong>: Reflection can access the fields of a class (both private and public), enabling read and write access to these fields at runtime.</p></li><li><p><strong>Method</strong>: Reflection allows for invoking methods of a class at runtime using <code>Method.invoke()</code>, even if the method name is not known at compile time.</p></li></ol><h2 id="how-to-use-reflection" tabindex="-1"><a class="header-anchor" href="#how-to-use-reflection"><span>How to Use Reflection</span></a></h2><p>Here&#39;s a quick example demonstrating the use of reflection to access class fields and methods:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.lang.reflect.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ReflectionExample</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // Load the class dynamically</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">            Class</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">clazz</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;MyClass&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // Accessing a constructor</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">            Constructor</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">constructor</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> clazz</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getConstructor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">            Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> instance</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> constructor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">newInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // Accessing a field</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">            Field</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> field</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> clazz</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getDeclaredField</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;myField&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            field</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setAccessible</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Access private field</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            field</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(instance, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;new value&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // Accessing a method</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">            Method</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> method</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> clazz</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getDeclaredMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;myMethod&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            method</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setAccessible</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Access private method</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            method</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">invoke</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(instance);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Exception</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">printStackTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example:</p><ul><li><strong><code>Class.forName(&quot;MyClass&quot;)</code></strong> loads the class dynamically.</li><li><strong><code>getConstructor()</code></strong> accesses a default constructor.</li><li><strong><code>getDeclaredField(&quot;myField&quot;)</code></strong> retrieves the field <code>myField</code>, even if private.</li><li><strong><code>getDeclaredMethod(&quot;myMethod&quot;)</code></strong> retrieves a method, allowing it to be invoked on an instance.</li></ul><h2 id="common-reflection-classes-and-methods" tabindex="-1"><a class="header-anchor" href="#common-reflection-classes-and-methods"><span>Common Reflection Classes and Methods</span></a></h2><h3 id="class-class" tabindex="-1"><a class="header-anchor" href="#class-class"><span><code>Class</code> Class</span></a></h3><ul><li><code>Class.forName(&quot;className&quot;)</code>: Loads a class by name.</li><li><code>getMethods()</code>: Retrieves public methods.</li><li><code>getDeclaredMethods()</code>: Retrieves all declared methods, including private ones.</li><li><code>getFields()</code>: Retrieves public fields.</li><li><code>getDeclaredFields()</code>: Retrieves all declared fields, including private ones.</li></ul><h3 id="constructor-class" tabindex="-1"><a class="header-anchor" href="#constructor-class"><span><code>Constructor</code> Class</span></a></h3><ul><li><code>getConstructor(Class&lt;?&gt;... parameterTypes)</code>: Retrieves a public constructor.</li><li><code>newInstance(Object... initargs)</code>: Creates a new instance of the class using the constructor.</li></ul><h3 id="method-class" tabindex="-1"><a class="header-anchor" href="#method-class"><span><code>Method</code> Class</span></a></h3><ul><li><code>getName()</code>: Retrieves the method name.</li><li><code>invoke(Object obj, Object... args)</code>: Invokes the method on the specified object with given arguments.</li></ul><h3 id="field-class" tabindex="-1"><a class="header-anchor" href="#field-class"><span><code>Field</code> Class</span></a></h3><ul><li><code>get(Object obj)</code>: Retrieves the value of the field from an object.</li><li><code>set(Object obj, Object value)</code>: Sets the field value for a specified object.</li></ul><h2 id="applications-of-reflection" tabindex="-1"><a class="header-anchor" href="#applications-of-reflection"><span>Applications of Reflection</span></a></h2><p>Reflection is widely used in:</p><ul><li><strong>Frameworks</strong> like Spring and Hibernate for dependency injection, ORM mapping, etc.</li><li><strong>Testing frameworks</strong> like JUnit for accessing private fields and methods.</li><li><strong>Serialization libraries</strong> to dynamically access and serialize fields.</li></ul><h2 id="limitations-of-reflection" tabindex="-1"><a class="header-anchor" href="#limitations-of-reflection"><span>Limitations of Reflection</span></a></h2><ul><li><strong>Performance Overhead</strong>: Reflection involves dynamic type resolution, which is slower than direct code access.</li><li><strong>Security Restrictions</strong>: Accessing private members via reflection may cause a <code>SecurityException</code> if not permitted.</li><li><strong>Complexity and Maintainability</strong>: Reflection code is often complex and harder to maintain due to runtime type resolution.</li></ul><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>Java reflection offers a robust way to handle dynamic class and object manipulations at runtime. However, it should be used judiciously, as it can introduce security, performance, and maintainability issues if not used carefully.</p>',25)]))}]]),l=JSON.parse('{"path":"/posts/clich%C3%A9/7.html","title":"Java Reflection Mechanism","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2024-11-10T00:00:00.000Z","category":["Learning Records"],"tag":["Programmer cliché"],"description":"Java Reflection Mechanism Reflection in Java is a powerful mechanism that allows a program to inspect and manipulate objects, classes, methods, and fields at runtime, even if th...","head":[["meta",{"property":"og:url","content":"https://crc011220.github.io/posts/clich%C3%A9/7.html"}],["meta",{"property":"og:site_name","content":"Richard Chen"}],["meta",{"property":"og:title","content":"Java Reflection Mechanism"}],["meta",{"property":"og:description","content":"Java Reflection Mechanism Reflection in Java is a powerful mechanism that allows a program to inspect and manipulate objects, classes, methods, and fields at runtime, even if th..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-11T11:59:00.000Z"}],["meta",{"property":"article:tag","content":"Programmer cliché"}],["meta",{"property":"article:published_time","content":"2024-11-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-11T11:59:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java Reflection Mechanism\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-10T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-11T11:59:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Richard Chen\\"}]}"]]},"headers":[{"level":2,"title":"Key Concepts of Reflection","slug":"key-concepts-of-reflection","link":"#key-concepts-of-reflection","children":[]},{"level":2,"title":"How to Use Reflection","slug":"how-to-use-reflection","link":"#how-to-use-reflection","children":[]},{"level":2,"title":"Common Reflection Classes and Methods","slug":"common-reflection-classes-and-methods","link":"#common-reflection-classes-and-methods","children":[{"level":3,"title":"Class Class","slug":"class-class","link":"#class-class","children":[]},{"level":3,"title":"Constructor Class","slug":"constructor-class","link":"#constructor-class","children":[]},{"level":3,"title":"Method Class","slug":"method-class","link":"#method-class","children":[]},{"level":3,"title":"Field Class","slug":"field-class","link":"#field-class","children":[]}]},{"level":2,"title":"Applications of Reflection","slug":"applications-of-reflection","link":"#applications-of-reflection","children":[]},{"level":2,"title":"Limitations of Reflection","slug":"limitations-of-reflection","link":"#limitations-of-reflection","children":[]},{"level":2,"title":"Conclusion","slug":"conclusion","link":"#conclusion","children":[]}],"git":{"createdTime":1731149634000,"updatedTime":1731326340000,"contributors":[{"name":"Ruochen Chen","email":"ruocchen1220@gmail.com","commits":2}]},"readingTime":{"minutes":1.78,"words":534},"filePathRelative":"posts/cliché/7.md","localizedDate":"November 10, 2024","excerpt":"\\n<p>Reflection in Java is a powerful mechanism that allows a program to inspect and manipulate objects, classes, methods, and fields at runtime, even if their details are not known at compile time. Reflection is particularly useful for dynamic behavior and is widely used in frameworks and libraries for tasks like dependency injection, ORM, and testing.</p>","autoDesc":true}')}}]);