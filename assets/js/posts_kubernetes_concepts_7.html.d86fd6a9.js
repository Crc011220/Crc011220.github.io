"use strict";(self.webpackChunkpersonalweb=self.webpackChunkpersonalweb||[]).push([[7368],{6262:(t,e)=>{e.A=(t,e)=>{const n=t.__vccOpts||t;for(const[t,r]of e)n[t]=r;return n}},6591:(t,e,n)=>{n.r(e),n.d(e,{comp:()=>o,data:()=>i});var r=n(641);const d={},o=(0,n(6262).A)(d,[["render",function(t,e){return(0,r.uX)(),(0,r.CE)("div",null,e[0]||(e[0]=[(0,r.Fv)('<h1 id="k8s-resource-yaml-configuration" tabindex="-1"><a class="header-anchor" href="#k8s-resource-yaml-configuration"><span>K8S Resource YAML Configuration</span></a></h1><table><thead><tr><th>Parameter Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>apiVersion</td><td>String</td><td>The version of the K8S API, which can be queried with the <code>kubectl api versions</code> command</td></tr><tr><td>kind</td><td>String</td><td>The resource type and role defined in the YAML file</td></tr><tr><td>metadata</td><td>Object</td><td>Metadata object, containing the following properties:</td></tr><tr><td>metadata.name</td><td>String</td><td>Name of the metadata object, for example, the pod name</td></tr><tr><td>metadata.namespace</td><td>String</td><td>The namespace of the metadata object</td></tr><tr><td>spec</td><td>Object</td><td>Detailed specification of the object</td></tr><tr><td>spec.containers[]</td><td>List</td><td>List of containers defined in the Spec object</td></tr><tr><td>spec.containers[].name</td><td>String</td><td>Name of a specific container in the list</td></tr><tr><td>spec.containers[].image</td><td>String</td><td>The image name required for a specific container in the list</td></tr><tr><td>spec.containers[].imagePullPolicy</td><td>String</td><td>Defines the image pull policy, can be <code>Always</code>, <code>Never</code>, or <code>IfNotPresent</code>:<br> - <code>Always</code> (default): Always attempt to pull the image.<br> - <code>Never</code>: Use only local images.<br> - <code>IfNotPresent</code>: Use the local image if available, otherwise pull from the repository.</td></tr><tr><td>spec.containers[].command[]</td><td>List</td><td>Specifies the container&#39;s startup command. It is an array, so multiple commands can be specified. If not specified, the command used in the image is used.</td></tr><tr><td>spec.containers[].args[]</td><td>List</td><td>Specifies the container&#39;s startup command arguments. Multiple arguments can be specified as an array.</td></tr><tr><td>spec.containers[].workingDir</td><td>String</td><td>Specifies the working directory for the container</td></tr><tr><td>spec.containers[].volumeMounts[]</td><td>List</td><td>List of volume mount configurations for the container</td></tr><tr><td>spec.containers[].volumeMounts[].name</td><td>String</td><td>Specifies the name of the volume that the container can mount</td></tr><tr><td>spec.containers[].volumeMounts[].mountPath</td><td>String</td><td>Specifies the path where the container mounts the volume</td></tr><tr><td>spec.containers[].volumeMounts[].readOnly</td><td>Boolean</td><td>Sets the read/write mode of the volume mount path, <code>true</code> or <code>false</code> (default is read-write)</td></tr><tr><td>spec.containers[].ports[]</td><td>List</td><td>List of ports required by the container</td></tr><tr><td>spec.containers[].ports[].name</td><td>String</td><td>The name of the port</td></tr><tr><td>spec.containers[].ports[].containerPort</td><td>String</td><td>The port number the container needs to listen on</td></tr><tr><td>spec.containers[].ports[].hostPort</td><td>String</td><td>The port number on the host that the container needs to listen on (defaults to the same as <code>containerPort</code>). Setting <code>hostPort</code> means that the same pod cannot be started again on the same host (due to port conflict).</td></tr><tr><td>spec.containers[].ports[].protocol</td><td>String</td><td>The port protocol, can be <code>TCP</code> or <code>UDP</code> (default is <code>TCP</code>)</td></tr><tr><td>spec.containers[].env[]</td><td>List</td><td>List of environment variables to be set for the container before it starts</td></tr><tr><td>spec.containers[].env[].name</td><td>String</td><td>The name of the environment variable</td></tr><tr><td>spec.containers[].env[].value</td><td>String</td><td>The value of the environment variable</td></tr><tr><td>spec.containers[].resources</td><td>Object</td><td>Defines resource limits and requests for the container</td></tr><tr><td>spec.containers[].resources.limits</td><td>Object</td><td>Specifies resource limits for the container during runtime</td></tr><tr><td>spec.containers[].resources.limits.cpu</td><td>String</td><td>CPU limit, specified in cores, used for the <code>docker run --cpu-shares</code> parameter</td></tr><tr><td>spec.containers[].resources.limits.memory</td><td>String</td><td>Memory limit, specified in MiB or GiB</td></tr><tr><td>spec.containers[].resources.requests</td><td>Object</td><td>Defines the resource requests for the container during startup and scheduling</td></tr><tr><td>spec.containers[].resources.requests.cpu</td><td>String</td><td>CPU request, specified in cores, defines the initial amount available when the container starts</td></tr><tr><td>spec.containers[].resources.requests.memory</td><td>String</td><td>Memory request, specified in MiB or GiB, defines the initial amount available when the container starts</td></tr><tr><td>spec.restartPolicy</td><td>String</td><td>Defines the restart policy for the pod, possible values: <code>Always</code>, <code>OnFailure</code>, <code>Never</code> (default is <code>Always</code>):<br> - <code>Always</code>: If the pod terminates, it will be restarted regardless of how it was terminated.<br> - <code>OnFailure</code>: The pod is restarted only if it terminates with a non-zero exit code.<br> - <code>Never</code>: The pod will not be restarted after termination.</td></tr><tr><td>spec.nodeSelector</td><td>Object</td><td>Defines label selectors for filtering nodes, specified in <code>key: value</code> format</td></tr><tr><td>spec.imagePullSecrets</td><td>Object</td><td>Defines the name of the secret used for image pulls, specified in <code>name: secretkey</code> format</td></tr><tr><td>spec.hostNetwork</td><td>Boolean</td><td>Defines whether to use the host network mode, default is <code>false</code>. Setting this to <code>true</code> means the container uses the host network instead of Docker&#39;s bridge network. This will prevent multiple replicas of the same container from running on the same host.</td></tr></tbody></table>',2)]))}]]),i=JSON.parse('{"path":"/posts/kubernetes/concepts/7.html","title":"K8S Resource YAML Configuration","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2024-11-08T00:00:00.000Z","category":["Learning Records"],"tag":["Kubernetes"],"description":"K8S Resource YAML Configuration","head":[["meta",{"property":"og:url","content":"https://crc011220.github.io/posts/kubernetes/concepts/7.html"}],["meta",{"property":"og:site_name","content":"Richard Chen"}],["meta",{"property":"og:title","content":"K8S Resource YAML Configuration"}],["meta",{"property":"og:description","content":"K8S Resource YAML Configuration"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-08T08:39:56.000Z"}],["meta",{"property":"article:tag","content":"Kubernetes"}],["meta",{"property":"article:published_time","content":"2024-11-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-08T08:39:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"K8S Resource YAML Configuration\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-08T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-08T08:39:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Richard Chen\\"}]}"]]},"headers":[],"git":{"createdTime":1731055196000,"updatedTime":1731055196000,"contributors":[{"name":"Ruochen Chen","email":"ruocchen1220@gmail.com","commits":1}]},"readingTime":{"minutes":2.15,"words":646},"filePathRelative":"posts/kubernetes/concepts/7.md","localizedDate":"November 8, 2024","excerpt":"\\n<table>\\n<thead>\\n<tr>\\n<th>Parameter Name</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>apiVersion</td>\\n<td>String</td>\\n<td>The version of the K8S API, which can be queried with the <code>kubectl api versions</code> command</td>\\n</tr>\\n<tr>\\n<td>kind</td>\\n<td>String</td>\\n<td>The resource type and role defined in the YAML file</td>\\n</tr>\\n<tr>\\n<td>metadata</td>\\n<td>Object</td>\\n<td>Metadata object, containing the following properties:</td>\\n</tr>\\n<tr>\\n<td>metadata.name</td>\\n<td>String</td>\\n<td>Name of the metadata object, for example, the pod name</td>\\n</tr>\\n<tr>\\n<td>metadata.namespace</td>\\n<td>String</td>\\n<td>The namespace of the metadata object</td>\\n</tr>\\n<tr>\\n<td>spec</td>\\n<td>Object</td>\\n<td>Detailed specification of the object</td>\\n</tr>\\n<tr>\\n<td>spec.containers[]</td>\\n<td>List</td>\\n<td>List of containers defined in the Spec object</td>\\n</tr>\\n<tr>\\n<td>spec.containers[].name</td>\\n<td>String</td>\\n<td>Name of a specific container in the list</td>\\n</tr>\\n<tr>\\n<td>spec.containers[].image</td>\\n<td>String</td>\\n<td>The image name required for a specific container in the list</td>\\n</tr>\\n<tr>\\n<td>spec.containers[].imagePullPolicy</td>\\n<td>String</td>\\n<td>Defines the image pull policy, can be <code>Always</code>, <code>Never</code>, or <code>IfNotPresent</code>:<br>  - <code>Always</code> (default): Always attempt to pull the image.<br>  - <code>Never</code>: Use only local images.<br>  - <code>IfNotPresent</code>: Use the local image if available, otherwise pull from the repository.</td>\\n</tr>\\n<tr>\\n<td>spec.containers[].command[]</td>\\n<td>List</td>\\n<td>Specifies the container\'s startup command. It is an array, so multiple commands can be specified. If not specified, the command used in the image is used.</td>\\n</tr>\\n<tr>\\n<td>spec.containers[].args[]</td>\\n<td>List</td>\\n<td>Specifies the container\'s startup command arguments. Multiple arguments can be specified as an array.</td>\\n</tr>\\n<tr>\\n<td>spec.containers[].workingDir</td>\\n<td>String</td>\\n<td>Specifies the working directory for the container</td>\\n</tr>\\n<tr>\\n<td>spec.containers[].volumeMounts[]</td>\\n<td>List</td>\\n<td>List of volume mount configurations for the container</td>\\n</tr>\\n<tr>\\n<td>spec.containers[].volumeMounts[].name</td>\\n<td>String</td>\\n<td>Specifies the name of the volume that the container can mount</td>\\n</tr>\\n<tr>\\n<td>spec.containers[].volumeMounts[].mountPath</td>\\n<td>String</td>\\n<td>Specifies the path where the container mounts the volume</td>\\n</tr>\\n<tr>\\n<td>spec.containers[].volumeMounts[].readOnly</td>\\n<td>Boolean</td>\\n<td>Sets the read/write mode of the volume mount path, <code>true</code> or <code>false</code> (default is read-write)</td>\\n</tr>\\n<tr>\\n<td>spec.containers[].ports[]</td>\\n<td>List</td>\\n<td>List of ports required by the container</td>\\n</tr>\\n<tr>\\n<td>spec.containers[].ports[].name</td>\\n<td>String</td>\\n<td>The name of the port</td>\\n</tr>\\n<tr>\\n<td>spec.containers[].ports[].containerPort</td>\\n<td>String</td>\\n<td>The port number the container needs to listen on</td>\\n</tr>\\n<tr>\\n<td>spec.containers[].ports[].hostPort</td>\\n<td>String</td>\\n<td>The port number on the host that the container needs to listen on (defaults to the same as <code>containerPort</code>). Setting <code>hostPort</code> means that the same pod cannot be started again on the same host (due to port conflict).</td>\\n</tr>\\n<tr>\\n<td>spec.containers[].ports[].protocol</td>\\n<td>String</td>\\n<td>The port protocol, can be <code>TCP</code> or <code>UDP</code> (default is <code>TCP</code>)</td>\\n</tr>\\n<tr>\\n<td>spec.containers[].env[]</td>\\n<td>List</td>\\n<td>List of environment variables to be set for the container before it starts</td>\\n</tr>\\n<tr>\\n<td>spec.containers[].env[].name</td>\\n<td>String</td>\\n<td>The name of the environment variable</td>\\n</tr>\\n<tr>\\n<td>spec.containers[].env[].value</td>\\n<td>String</td>\\n<td>The value of the environment variable</td>\\n</tr>\\n<tr>\\n<td>spec.containers[].resources</td>\\n<td>Object</td>\\n<td>Defines resource limits and requests for the container</td>\\n</tr>\\n<tr>\\n<td>spec.containers[].resources.limits</td>\\n<td>Object</td>\\n<td>Specifies resource limits for the container during runtime</td>\\n</tr>\\n<tr>\\n<td>spec.containers[].resources.limits.cpu</td>\\n<td>String</td>\\n<td>CPU limit, specified in cores, used for the <code>docker run --cpu-shares</code> parameter</td>\\n</tr>\\n<tr>\\n<td>spec.containers[].resources.limits.memory</td>\\n<td>String</td>\\n<td>Memory limit, specified in MiB or GiB</td>\\n</tr>\\n<tr>\\n<td>spec.containers[].resources.requests</td>\\n<td>Object</td>\\n<td>Defines the resource requests for the container during startup and scheduling</td>\\n</tr>\\n<tr>\\n<td>spec.containers[].resources.requests.cpu</td>\\n<td>String</td>\\n<td>CPU request, specified in cores, defines the initial amount available when the container starts</td>\\n</tr>\\n<tr>\\n<td>spec.containers[].resources.requests.memory</td>\\n<td>String</td>\\n<td>Memory request, specified in MiB or GiB, defines the initial amount available when the container starts</td>\\n</tr>\\n<tr>\\n<td>spec.restartPolicy</td>\\n<td>String</td>\\n<td>Defines the restart policy for the pod, possible values: <code>Always</code>, <code>OnFailure</code>, <code>Never</code> (default is <code>Always</code>):<br>  - <code>Always</code>: If the pod terminates, it will be restarted regardless of how it was terminated.<br>  - <code>OnFailure</code>: The pod is restarted only if it terminates with a non-zero exit code.<br>  - <code>Never</code>: The pod will not be restarted after termination.</td>\\n</tr>\\n<tr>\\n<td>spec.nodeSelector</td>\\n<td>Object</td>\\n<td>Defines label selectors for filtering nodes, specified in <code>key: value</code> format</td>\\n</tr>\\n<tr>\\n<td>spec.imagePullSecrets</td>\\n<td>Object</td>\\n<td>Defines the name of the secret used for image pulls, specified in <code>name: secretkey</code> format</td>\\n</tr>\\n<tr>\\n<td>spec.hostNetwork</td>\\n<td>Boolean</td>\\n<td>Defines whether to use the host network mode, default is <code>false</code>. Setting this to <code>true</code> means the container uses the host network instead of Docker\'s bridge network. This will prevent multiple replicas of the same container from running on the same host.</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}')}}]);