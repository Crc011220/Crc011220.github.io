"use strict";(self.webpackChunkpersonalweb=self.webpackChunkpersonalweb||[]).push([[7346],{3980:(e,t,n)=>{n.r(t),n.d(t,{comp:()=>r,data:()=>s});var a=n(641);const i=n.p+"assets/img/Co-star.e97e2e0a.png",o={},r=(0,n(6262).A)(o,[["render",function(e,t){return(0,a.uX)(),(0,a.CE)("div",null,t[0]||(t[0]=[(0,a.Fv)('<h1 id="week-7" tabindex="-1"><a class="header-anchor" href="#week-7"><span>Week 7</span></a></h1><h2 id="document-security-check-api" tabindex="-1"><a class="header-anchor" href="#document-security-check-api"><span>Document security check API</span></a></h2><h4 id="reconstruct-the-code-to-reduce-the-complexity-and-satisfy-the-coding-standard" tabindex="-1"><a class="header-anchor" href="#reconstruct-the-code-to-reduce-the-complexity-and-satisfy-the-coding-standard"><span>Reconstruct the code to reduce the complexity and satisfy the coding standard</span></a></h4><h4 id="adjust-the-return-format" tabindex="-1"><a class="header-anchor" href="#adjust-the-return-format"><span>Adjust the return format</span></a></h4><h4 id="test-the-api-in-the-development-environment" tabindex="-1"><a class="header-anchor" href="#test-the-api-in-the-development-environment"><span>Test the API in the development environment</span></a></h4><h2 id="auto-generation-of-project-designing-documents" tabindex="-1"><a class="header-anchor" href="#auto-generation-of-project-designing-documents"><span>Auto-generation of project designing documents</span></a></h2><h4 id="read-prompt-engineering-document-in-cmb" tabindex="-1"><a class="header-anchor" href="#read-prompt-engineering-document-in-cmb"><span>Read prompt engineering document in CMB</span></a></h4><h4 id="think-how-to-use-prompt-engineering-document-to-generate-a-comprehensive-project-designing-documents" tabindex="-1"><a class="header-anchor" href="#think-how-to-use-prompt-engineering-document-to-generate-a-comprehensive-project-designing-documents"><span>Think how to use prompt engineering document to generate a comprehensive project designing documents</span></a></h4><h2 id="common-notice-api" tabindex="-1"><a class="header-anchor" href="#common-notice-api"><span>Common notice API</span></a></h2><h4 id="solve-the-error-in-production-environment-try-to-get-the-configuration-dynamically-from-either-dev-or-prd-environment" tabindex="-1"><a class="header-anchor" href="#solve-the-error-in-production-environment-try-to-get-the-configuration-dynamically-from-either-dev-or-prd-environment"><span>Solve the error in production environment, try to get the configuration dynamically from either dev or prd environment</span></a></h4><h2 id="understand-the-cicd-process-in-cmb" tabindex="-1"><a class="header-anchor" href="#understand-the-cicd-process-in-cmb"><span>Understand the CICD process in CMB</span></a></h2><h4 id="read-the-cloud-native-managment-platform-book" tabindex="-1"><a class="header-anchor" href="#read-the-cloud-native-managment-platform-book"><span>Read the cloud native managment platform book</span></a></h4><h2 id="tecnical-points" tabindex="-1"><a class="header-anchor" href="#tecnical-points"><span>Tecnical points</span></a></h2><h4 id="_1-llm-prediction-parameters" tabindex="-1"><a class="header-anchor" href="#_1-llm-prediction-parameters"><span>1. LLM prediction parameters</span></a></h4><ol><li>Temperature parameter</li></ol><ul><li>The lower the temperature, the more certain about the generated result by LLM.</li><li>For <code>Creating</code> task, the temperature should be higher.</li><li>For <code>Solving</code> task, the temperature should be lower.</li></ul><ol start="2"><li>Top_p parameter</li></ol><ul><li>Use together with temperature parameter.</li><li>If need more accurate result, use a lower top_p value (&lt;0.75).</li><li>If need creative result, use a higher top_p value (&gt;=0.75).</li></ul><h4 id="_2-prompt" tabindex="-1"><a class="header-anchor" href="#_2-prompt"><span>2. Prompt</span></a></h4><ol><li>CO-STAR framework <img src="'+i+'" alt="CO-STAR framework" loading="lazy"></li></ol><ul><li>(C) Context: Provide background information for the task to help the LLM accurately understand the specific scenario, ensuring the output is relevant to the context.</li><li>(O) Object: Clearly define the task for the LLM, specifying the task objectives to help the LLM focus on completing the task.</li><li>(S) Style: Specify the writing style of the LLM, which can be set to mimic a particular character&#39;s style.</li><li>(T) Tone: Set the emotional tone of the LLM to ensure the response aligns with the desired emotional and mood tone.</li><li>(A) Audience: Identify the target audience and customize the LLM&#39;s response characteristics for specific audiences.</li><li>(R) Response: Specify the output format of the LLM to ensure the results can be received and easily parsed by downstream systems. Common formats include lists, JSON, Markdown, etc.</li></ul><ol start="2"><li>Zero-shot learning</li></ol><ul><li>Zero-shot learning is a natural language processing technique that allows a model to perform inference on text without any fine-tuning or training on a specific task.</li><li>It is often used in natural language understanding tasks such as sentiment analysis, named entity recognition, and question answering.</li><li>The key idea behind zero-shot learning is to use a pre-trained model that has been trained on a large corpus of text to perform inference on text that has not been seen during training.</li></ul><ol start="3"><li>Few-shot learning</li></ol><ul><li>Few-shot learning is a natural language processing technique that allows a model to perform inference on text with only a few labeled examples.</li><li>It is often used in natural language understanding tasks such as sentiment analysis, named entity recognition, and question answering.</li><li>The key idea behind few-shot learning is to use a pre-trained model that has been trained on a small corpus of text to perform inference on text that has not been seen during training.</li><li>Hard to deal with complex computing and inference tasks.</li></ul><ol start="4"><li><p>COT (chain-of-thought) COT is an advanced prompting strategy designed to enhance the performance of large language models on various complex reasoning tasks. Common reasoning tasks include arithmetic reasoning, common sense reasoning, and symbolic reasoning. Unlike ordinary Few-Shot which only uses ⟨input, output⟩ pairs to construct prompts, chain-of-thought prompting further integrates intermediate reasoning steps to guide the reasoning process from input to output. As an extension of contextual learning, chain-of-thought prompting transforms the original ⟨input, output⟩ mapping relationship into a ⟨input, chain-of-thought, output⟩ triplet form.</p></li><li><p>Other Prompting Techniques</p></li></ol><ul><li>Clarify the task or requirement: Clearly specify the goal or task you want the generated text to achieve in the prompt, such as description, explanation, comparison, summary, etc. Example: Please describe the history and development process of China Merchant Bank.</li><li>Prohibitions: Specify particular topics, fields, or backgrounds in the prompt to ensure the model generates content related to them. Example: Introduce the existing public funds in the market, but do not recommend financial products to clients.</li><li>Specify format or structure: If you have specific text format or structure requirements, you can clearly specify them in the prompt, such as lists, paragraphs, headings, etc. Example: Write an investment research report on Country Garden, including introduction, body, and conclusion.</li><li>Determine tone or style: If you want the generated text to have a specific tone, style, or manner, you can express it clearly in the prompt. Example: Introduce the current market situation to clients in a formal style.</li><li>Specify key information or elements: Provide key information or elements in the prompt to ensure the generated text includes the required content. Example: Provide detailed fund information, including fund manager, investment style, and investment targets.</li></ul><ol start="6"><li>RAG (Retrieval-Augmented Generation)</li></ol><ul><li>RAG is a natural language generation technique that combines retrieval and generation to generate text that is relevant to the input query.</li><li>The key idea behind RAG is to use a pre-trained model to retrieve relevant documents from a large corpus of text, and then use the retrieved documents to generate new text that is relevant to the input query.</li><li>RAG can be used in various natural language generation tasks, such as text summarization, question answering, and dialogue generation.</li></ul><ol start="7"><li>Spring Annotation</li></ol><ul><li>Do not use <code>new</code> to create Spring-managed Beans, otherwise Spring will not manage the Bean and the related Spring annotations will not take effect.</li></ul>',31)]))}]]),s=JSON.parse('{"path":"/posts/cmb/7.html","title":"Week 7","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2025-01-13T00:00:00.000Z","category":["Internship journal"],"tag":["China Merchant Bank"],"description":"Week 7 Document security check API Reconstruct the code to reduce the complexity and satisfy the coding standard Adjust the return format Test the API in the development environ...","head":[["meta",{"property":"og:url","content":"https://crc011220.github.io/personalweb/personalweb/posts/cmb/7.html"}],["meta",{"property":"og:site_name","content":"Richard Chen"}],["meta",{"property":"og:title","content":"Week 7"}],["meta",{"property":"og:description","content":"Week 7 Document security check API Reconstruct the code to reduce the complexity and satisfy the coding standard Adjust the return format Test the API in the development environ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-01-20T14:14:48.000Z"}],["meta",{"property":"article:tag","content":"China Merchant Bank"}],["meta",{"property":"article:published_time","content":"2025-01-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-20T14:14:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Week 7\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-01-13T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-20T14:14:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Richard Chen\\"}]}"]]},"headers":[{"level":2,"title":"Document security check API","slug":"document-security-check-api","link":"#document-security-check-api","children":[]},{"level":2,"title":"Auto-generation of project designing documents","slug":"auto-generation-of-project-designing-documents","link":"#auto-generation-of-project-designing-documents","children":[]},{"level":2,"title":"Common notice API","slug":"common-notice-api","link":"#common-notice-api","children":[]},{"level":2,"title":"Understand the CICD process in CMB","slug":"understand-the-cicd-process-in-cmb","link":"#understand-the-cicd-process-in-cmb","children":[]},{"level":2,"title":"Tecnical points","slug":"tecnical-points","link":"#tecnical-points","children":[]}],"git":{"createdTime":1736764169000,"updatedTime":1737382488000,"contributors":[{"name":"Ruochen Chen","email":"ruocchen1220@gmail.com","commits":1}]},"readingTime":{"minutes":2.99,"words":897},"filePathRelative":"posts/cmb/7.md","localizedDate":"January 13, 2025","excerpt":"\\n<h2>Document security check API</h2>\\n<h4>Reconstruct the code to reduce the complexity and satisfy the coding standard</h4>\\n<h4>Adjust the return format</h4>\\n<h4>Test the API in the development environment</h4>\\n<h2>Auto-generation of project designing documents</h2>\\n<h4>Read prompt engineering document in CMB</h4>","autoDesc":true}')},6262:(e,t)=>{t.A=(e,t)=>{const n=e.__vccOpts||e;for(const[e,a]of t)n[e]=a;return n}}}]);