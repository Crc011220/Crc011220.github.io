"use strict";(self.webpackChunkpersonalweb=self.webpackChunkpersonalweb||[]).push([[7596],{6262:(e,t)=>{t.A=(e,t)=>{const n=e.__vccOpts||e;for(const[e,i]of t)n[e]=i;return n}},4609:(e,t,n)=>{n.r(t),n.d(t,{comp:()=>a,data:()=>r});var i=n(641);const o={},a=(0,n(6262).A)(o,[["render",function(e,t){return(0,i.uX)(),(0,i.CE)("div",null,t[0]||(t[0]=[(0,i.Fv)('<h1 id="aws-solution-architect-associate-part-2" tabindex="-1"><a class="header-anchor" href="#aws-solution-architect-associate-part-2"><span>AWS Solution Architect Associate Part 2:</span></a></h1><h2 id="question-21" tabindex="-1"><a class="header-anchor" href="#question-21"><span>Question 21</span></a></h2><p>To develop a two-tier web application on AWS where the company&#39;s developers have deployed the application on an Amazon EC2 instance that connects directly to a backend Amazon RDS database, the following solution meets the requirements with the least operational overhead:</p><p><strong>Option C: Store the database credentials as a secret in AWS Secrets Manager. Turn on automatic rotation for the secret. Attach the required permission to the EC2 role to grant access to the secret.</strong></p><p><strong>Explanation</strong></p><ul><li><strong>Using AWS Secrets Manager to store credentials</strong>: This provides a secure way to manage and store sensitive information such as database credentials. It supports direct integration with Amazon RDS, simplifying setup.</li><li><strong>Enabling automatic rotation</strong>: AWS Secrets Manager supports automatic rotation, allowing you to set a schedule to regularly update credentials without manual intervention.</li><li><strong>Granting access via IAM role</strong>: Attach necessary permissions to the EC2 instance role, enabling the application to access secrets stored in AWS Secrets Manager without hardcoding credentials in the code or configuration files.</li></ul><p><strong>Why Choose Option C</strong></p><ul><li><strong>Minimal Operational Overhead</strong>: Compared to other options, C offers built-in support and minimal manual configuration, reducing operational complexity.</li><li><strong>Security</strong>: Avoids the risk of hardcoding credentials and uses IAM role security mechanisms to control access to sensitive information.</li><li><strong>Ease of Implementation</strong>: Leverages existing AWS services and features, reducing the need for custom scripts or additional components, making deployment and maintenance simpler.</li></ul><p><strong>Analysis of Other Options</strong></p><ul><li><strong>Option A</strong>: While functional, it introduces more operational complexity, including managing instance metadata and writing Lambda function logic.</li><li><strong>Option B</strong>: Adds management of S3 buckets and version control, requiring handling Lambda function scheduling and execution, which increases unnecessary complexity and potential failure points.</li><li><strong>Option D</strong>: Although AWS Systems Manager Parameter Store is viable, it is not specifically designed for managing secrets like AWS Secrets Manager and does not directly support automatic RDS credential rotation.</li></ul><h2 id="question22" tabindex="-1"><a class="header-anchor" href="#question22"><span>Question22</span></a></h2><p>To modify the Lambda code to identify protected health information (PHI) in PDF and JPEG format reports, the hospital needs a solution that meets these requirements with the least operational overhead.</p><p><strong>Option C: Use Amazon Textract to extract the text from the reports. Use Amazon Comprehend Medical to identify the PHI from the extracted text.</strong></p><p><strong>Explanation</strong></p><ul><li><p><strong>Using Amazon Textract to Extract Text</strong></p><ul><li><strong>Amazon Textract</strong> is an AWS service designed to automatically extract text and data from scanned documents. It can accurately handle both simple text extraction and complex document structures like tables and forms, making it suitable for processing PDFs and image files (such as JPEGs).</li><li>Compared to using Python libraries for manual text extraction, Amazon Textract reduces development time and maintenance costs while providing more accurate results.</li></ul></li><li><p><strong>Using Amazon Comprehend Medical to Identify PHI</strong></p><ul><li><strong>Amazon Comprehend Medical</strong> is a specialized natural language processing (NLP) service tailored for handling medical text. It can identify and classify medical information, including PHI, directly from the text extracted by Amazon Textract.</li><li>This method avoids the complexity and overhead associated with training or managing custom models, offering highly accurate PHI identification without additional effort.</li></ul></li></ul><p><strong>Why Choose Option C</strong></p><ul><li><strong>Minimal Operational Overhead</strong>: Both Amazon Textract and Amazon Comprehend Medical are managed services that can be quickly integrated into the existing architecture, reducing development and operational workloads.</li><li><strong>High Accuracy</strong>: These services are optimized for high-quality text extraction and PHI identification, ensuring compliance with the stringent requirements of the healthcare industry.</li><li><strong>Ease of Implementation</strong>: Leveraging existing AWS services simplifies the deployment process, with good integration support between the services.</li></ul><p><strong>Analysis of Other Options</strong></p><ul><li><strong>Option A</strong>: Using Python libraries for text extraction and PHI identification requires more development effort and may not match the accuracy or efficiency of AWS&#39;s dedicated services.</li><li><strong>Option B</strong>: Utilizing Amazon SageMaker for PHI identification introduces additional complexity due to the need to build, train, and manage custom models, increasing operational burden.</li><li><strong>Option D</strong>: While Amazon Rekognition excels at image recognition, it is not optimized for text extraction from complex document layouts. Combining it with Amazon Comprehend Medical would add unnecessary complexity.</li></ul><h2 id="question23" tabindex="-1"><a class="header-anchor" href="#question23"><span>Question23</span></a></h2><p>To ensure high availability with minimum downtime and minimal data loss for a business-critical web application running on Amazon EC2 instances behind an Application Load Balancer, the following solution meets these requirements with the least operational effort:</p><p><strong>Option B: Configure the Auto Scaling group to use multiple Availability Zones. Configure the database as Multi-AZ. Configure an Amazon RDS Proxy instance for the database.</strong></p><p><strong>Explanation</strong></p><ul><li><p><strong>Using Multiple Availability Zones for Auto Scaling Group</strong></p><ul><li><strong>High Availability and Resilience</strong>: Distributing EC2 instances across multiple AZs enhances application availability and fault tolerance. If one AZ fails, the Auto Scaling group can launch new instances in other AZs to maintain service.</li><li><strong>Automatic Scaling</strong>: Auto Scaling adjusts the number of instances automatically based on traffic, ensuring efficient resource utilization and cost-effectiveness.</li></ul></li><li><p><strong>Configuring the Database as Multi-AZ Deployment</strong></p><ul><li><strong>High Availability and Disaster Recovery</strong>: Aurora PostgreSQL Multi-AZ deployments create one or more read replicas in different AZs. This improves database availability and provides automatic failover, reducing downtime.</li><li><strong>Data Durability</strong>: Multi-AZ deployments offer better data protection due to synchronous replication between the primary instance and replicas, minimizing the risk of data loss.</li></ul></li><li><p><strong>Configuring an Amazon RDS Proxy Instance</strong></p><ul><li><strong>Connection Management</strong>: RDS Proxy helps manage and optimize connections between the application and the database, especially under high concurrency, significantly improving performance and reducing latency.</li><li><strong>Simplified Database Connection Logic</strong>: RDS Proxy handles connection pooling and failover, reducing complexity in application code.</li></ul></li></ul><p><strong>Why Choose Option B</strong></p><ul><li><strong>Minimal Operational Effort</strong>: This solution leverages AWS managed services and features, reducing manual configuration and management work.</li><li><strong>High Availability and Fault Tolerance</strong>: Multi-AZ deployment for both the application and database layers ensures high availability.</li><li><strong>Data Security and Continuity</strong>: Multi-AZ database deployments provide better data protection and rapid recovery capabilities.</li></ul><p><strong>Analysis of Other Options</strong></p><ul><li><strong>Option A</strong>: While cross-region replication and Route 53 health checks offer higher availability, they add complexity and cost, introducing more potential failure points.</li><li><strong>Option C</strong>: Configuring the Auto Scaling group in a single AZ and relying on periodic snapshots does not provide sufficient fault tolerance, and snapshot-based recovery can take longer, leading to unacceptable service interruptions.</li><li><strong>Option D</strong>: Configuring the Auto Scaling group across multiple regions and using S3 with Lambda to write to the database adds unnecessary complexity and may cause data consistency and latency issues.</li></ul>',28)]))}]]),r=JSON.parse('{"path":"/posts/aws-saa/2.html","title":"AWS Solution Architect Associate Part 2:","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2024-12-06T00:00:00.000Z","category":["Learning Records"],"tag":["AWS SAA"],"description":"AWS Solution Architect Associate Part 2: Question 21 To develop a two-tier web application on AWS where the company\'s developers have deployed the application on an Amazon EC2 i...","head":[["meta",{"property":"og:url","content":"https://crc011220.github.io/personalweb/personalweb/posts/aws-saa/2.html"}],["meta",{"property":"og:site_name","content":"Richard Chen"}],["meta",{"property":"og:title","content":"AWS Solution Architect Associate Part 2:"}],["meta",{"property":"og:description","content":"AWS Solution Architect Associate Part 2: Question 21 To develop a two-tier web application on AWS where the company\'s developers have deployed the application on an Amazon EC2 i..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-12-07T10:53:14.000Z"}],["meta",{"property":"article:tag","content":"AWS SAA"}],["meta",{"property":"article:published_time","content":"2024-12-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-07T10:53:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"AWS Solution Architect Associate Part 2:\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-06T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-07T10:53:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Richard Chen\\"}]}"]]},"headers":[{"level":2,"title":"Question 21","slug":"question-21","link":"#question-21","children":[]},{"level":2,"title":"Question22","slug":"question22","link":"#question22","children":[]},{"level":2,"title":"Question23","slug":"question23","link":"#question23","children":[]}],"git":{"createdTime":1733568794000,"updatedTime":1733568794000,"contributors":[{"name":"Ruochen Chen","email":"ruocchen1220@gmail.com","commits":1}]},"readingTime":{"minutes":3.55,"words":1066},"filePathRelative":"posts/aws-saa/2.md","localizedDate":"December 6, 2024","excerpt":"\\n<h2>Question 21</h2>\\n<p>To develop a two-tier web application on AWS where the company\'s developers have deployed the application on an Amazon EC2 instance that connects directly to a backend Amazon RDS database, the following solution meets the requirements with the least operational overhead:</p>","autoDesc":true}')}}]);