"use strict";(self.webpackChunkpersonalweb=self.webpackChunkpersonalweb||[]).push([[6057],{6262:(s,e)=>{e.A=(s,e)=>{const i=s.__vccOpts||s;for(const[s,t]of e)i[s]=t;return i}},7836:(s,e,i)=>{i.r(e),i.d(e,{comp:()=>n,data:()=>o});var t=i(641);const a={},n=(0,i(6262).A)(a,[["render",function(s,e){return(0,t.uX)(),(0,t.CE)("div",null,e[0]||(e[0]=[(0,t.Fv)('<h1 id="internship-note" tabindex="-1"><a class="header-anchor" href="#internship-note"><span>Internship note</span></a></h1><h2 id="ci-tools" tabindex="-1"><a class="header-anchor" href="#ci-tools"><span>CI Tools</span></a></h2><h3 id="_1-jacoco-java-code-coverage" tabindex="-1"><a class="header-anchor" href="#_1-jacoco-java-code-coverage"><span>1. <strong>JaCoCo</strong> (Java Code Coverage)</span></a></h3><p><strong>Purpose:</strong> <em>Code coverage analysis tool</em></p><ul><li><p>Measures how much of your source code is exercised by your unit tests</p></li><li><p>Tracks:</p><ul><li>Line coverage</li><li>Branch coverage</li><li>Method/class coverage</li></ul></li><li><p>Generates visual HTML reports showing what parts of code are untested</p></li></ul><p><strong>Typical Use Cases:</strong></p><ul><li>Works with JUnit and Mockito</li><li>Integrated into CI pipelines (Jenkins, GitHub Actions, etc.)</li></ul><p><strong>Example (Maven):</strong></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mvn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clean</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> jacoco:report</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>Report Path (Maven):</strong> <code>target/site/jacoco/index.html</code></p><h3 id="_2-pmd-programming-mistake-detector" tabindex="-1"><a class="header-anchor" href="#_2-pmd-programming-mistake-detector"><span>2. <strong>PMD</strong> (Programming Mistake Detector)</span></a></h3><p><strong>Purpose:</strong> <em>Static code analysis</em></p><ul><li><p>Scans your Java code for potential issues like:</p><ul><li>Poor naming conventions</li><li>Dead code</li><li>Empty catch blocks</li><li>Duplicate or overly complex code</li></ul></li><li><p>Helps enforce coding standards and best practices</p></li><li><p>Can be customized with your own rule sets</p></li></ul><p><strong>Similar tools:</strong> Checkstyle, SpotBugs</p><p><strong>Example (Maven):</strong></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mvn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pmd:pmd</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>Report Path:</strong> <code>target/site/pmd.html</code></p><h3 id="_3-mockito" tabindex="-1"><a class="header-anchor" href="#_3-mockito"><span>3. <strong>Mockito</strong></span></a></h3><p><strong>Purpose:</strong> <em>Mocking framework for unit testing</em></p><ul><li>Used to simulate dependencies during tests</li><li>Lets you mock methods, define return values, and verify interactions</li><li>Prevents your tests from calling real external systems (DBs, APIs, etc.)</li></ul><p><strong>Example:</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">MyService</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> mockService </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Mockito</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MyService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">when</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">mockService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fetchData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">thenReturn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Mock Result&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">assertEquals</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Mock Result&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> mockService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fetchData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">verify</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(mockService)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fetchData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Often used with <strong>JUnit</strong></p><h3 id="ðŸ”„-summary-comparison" tabindex="-1"><a class="header-anchor" href="#ðŸ”„-summary-comparison"><span>ðŸ”„ Summary Comparison</span></a></h3><table><thead><tr><th>Tool</th><th>What it does</th><th>Typical Use</th></tr></thead><tbody><tr><td><strong>JaCoCo</strong></td><td>Measures test coverage</td><td>After unit testing</td></tr><tr><td><strong>PMD</strong></td><td>Static analysis for code quality</td><td>During development/code review</td></tr><tr><td><strong>Mockito</strong></td><td>Mocks dependencies in tests</td><td>Inside unit tests</td></tr></tbody></table>',25)]))}]]),o=JSON.parse('{"path":"/posts/jd/note.html","title":"Internship note","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2025-06-25T00:00:00.000Z","category":["Learning Records"],"tag":["JD"],"description":"Internship note CI Tools 1. JaCoCo (Java Code Coverage) Purpose: Code coverage analysis tool Measures how much of your source code is exercised by your unit tests Tracks: Line c...","head":[["meta",{"property":"og:url","content":"https://crc011220.github.io/posts/jd/note.html"}],["meta",{"property":"og:site_name","content":"Ruochen Chen"}],["meta",{"property":"og:title","content":"Internship note"}],["meta",{"property":"og:description","content":"Internship note CI Tools 1. JaCoCo (Java Code Coverage) Purpose: Code coverage analysis tool Measures how much of your source code is exercised by your unit tests Tracks: Line c..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-25T12:40:55.000Z"}],["meta",{"property":"article:tag","content":"JD"}],["meta",{"property":"article:published_time","content":"2025-06-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-25T12:40:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Internship note\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-25T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-25T12:40:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ruochen Chen\\"}]}"]]},"headers":[{"level":2,"title":"CI Tools","slug":"ci-tools","link":"#ci-tools","children":[{"level":3,"title":"1. JaCoCo (Java Code Coverage)","slug":"_1-jacoco-java-code-coverage","link":"#_1-jacoco-java-code-coverage","children":[]},{"level":3,"title":"2. PMD (Programming Mistake Detector)","slug":"_2-pmd-programming-mistake-detector","link":"#_2-pmd-programming-mistake-detector","children":[]},{"level":3,"title":"3. Mockito","slug":"_3-mockito","link":"#_3-mockito","children":[]},{"level":3,"title":"ðŸ”„ Summary Comparison","slug":"ðŸ”„-summary-comparison","link":"#ðŸ”„-summary-comparison","children":[]}]}],"git":{"createdTime":1750855255000,"updatedTime":1750855255000,"contributors":[{"name":"Ruochen Chen","email":"ruocchen1220@gmail.com","commits":1}]},"readingTime":{"minutes":0.78,"words":233},"filePathRelative":"posts/jd/note.md","localizedDate":"June 25, 2025","excerpt":"\\n<h2>CI Tools</h2>\\n<h3>1. <strong>JaCoCo</strong> (Java Code Coverage)</h3>\\n<p><strong>Purpose:</strong> <em>Code coverage analysis tool</em></p>\\n<ul>\\n<li>\\n<p>Measures how much of your source code is exercised by your unit tests</p>\\n</li>\\n<li>\\n<p>Tracks:</p>\\n<ul>\\n<li>Line coverage</li>\\n<li>Branch coverage</li>\\n<li>Method/class coverage</li>\\n</ul>\\n</li>\\n<li>\\n<p>Generates visual HTML reports showing what parts of code are untested</p>\\n</li>\\n</ul>","autoDesc":true}')}}]);