"use strict";(self.webpackChunkpersonalweb=self.webpackChunkpersonalweb||[]).push([[3557],{5877:(t,e,n)=>{n.r(e),n.d(e,{comp:()=>d,data:()=>r});var a=n(641);const l={},d=(0,n(6262).A)(l,[["render",function(t,e){return(0,a.uX)(),(0,a.CE)("div",null,e[0]||(e[0]=[(0,a.Fv)('<h1 id="计算机组成原理" tabindex="-1"><a class="header-anchor" href="#计算机组成原理"><span>计算机组成原理</span></a></h1><h3 id="✅-机器数的形式-——-计算机中数的真实表示方式" tabindex="-1"><a class="header-anchor" href="#✅-机器数的形式-——-计算机中数的真实表示方式"><span>✅ 机器数的形式 —— 计算机中数的真实表示方式</span></a></h3><p>在计算机中，<strong>“机器数”<strong>是指将</strong>真数（数学中的原始数）转换成计算机内部可以识别的二进制形式</strong>，并带有符号位或其他编码格式的<strong>存储表示</strong>。</p><hr><h2 id="🧠-一、什么是-机器数" tabindex="-1"><a class="header-anchor" href="#🧠-一、什么是-机器数"><span>🧠 一、什么是“机器数”？</span></a></h2><blockquote><p><strong>机器数 = 用一定规则将数转换为计算机内部二进制的形式。</strong></p></blockquote><p>它包含：</p><ul><li><strong>符号</strong>（正负号）</li><li><strong>数值部分</strong>（整数或浮点数）</li><li><strong>长度限制</strong>（比如 8 位、32 位等）</li></ul><hr><h2 id="✅-二、常见机器数的形式-速记" tabindex="-1"><a class="header-anchor" href="#✅-二、常见机器数的形式-速记"><span>✅ 二、常见机器数的形式（速记）</span></a></h2><table><thead><tr><th>类型</th><th>含义</th><th>说明</th></tr></thead><tbody><tr><td><strong>原码</strong></td><td>最高位是符号位，后面是绝对值的二进制</td><td>优点直观，缺点：正负零两个</td></tr><tr><td><strong>反码</strong></td><td>正数反码 = 原码，负数反码 = 符号位不变，其余按位取反</td><td>易于做减法，仍有±0问题</td></tr><tr><td><strong>补码</strong></td><td>正数补码 = 原码，负数补码 = 反码 + 1</td><td>✅ 现代计算机实际使用的表示法</td></tr><tr><td><strong>移码</strong></td><td>用于浮点数的阶码表示（偏移表示）</td><td>全为非负数，方便比较大小</td></tr><tr><td><strong>浮点数</strong></td><td>用 <strong>IEEE 754</strong> 标准表示实数</td><td>有符号位 + 阶码 + 尾数</td></tr></tbody></table><hr><h2 id="🎯-三、整数机器数的表示方式详解-以8位为例" tabindex="-1"><a class="header-anchor" href="#🎯-三、整数机器数的表示方式详解-以8位为例"><span>🎯 三、整数机器数的表示方式详解（以8位为例）</span></a></h2><h3 id="✅-1-原码-sign-magnitude" tabindex="-1"><a class="header-anchor" href="#✅-1-原码-sign-magnitude"><span>✅ 1. 原码（Sign-Magnitude）</span></a></h3><table><thead><tr><th>真数</th><th>原码表示（二进制）</th></tr></thead><tbody><tr><td>+5</td><td><code>00000101</code></td></tr><tr><td>-5</td><td><code>10000101</code></td></tr></tbody></table><blockquote><p>第一位是符号位（0 正，1 负），其余是绝对值的二进制。</p></blockquote><hr><h3 id="✅-2-反码-one-s-complement" tabindex="-1"><a class="header-anchor" href="#✅-2-反码-one-s-complement"><span>✅ 2. 反码（One&#39;s Complement）</span></a></h3><table><thead><tr><th>真数</th><th>反码表示（二进制）</th></tr></thead><tbody><tr><td>+5</td><td><code>00000101</code></td></tr><tr><td>-5</td><td><code>11111010</code></td></tr></tbody></table><blockquote><p>正数反码 = 原码 负数反码 = 原码除了符号位外全部取反</p></blockquote><hr><h3 id="✅-3-补码-two-s-complement-⭐最重要" tabindex="-1"><a class="header-anchor" href="#✅-3-补码-two-s-complement-⭐最重要"><span>✅ 3. 补码（Two&#39;s Complement）⭐最重要！</span></a></h3><table><thead><tr><th>真数</th><th>补码表示（二进制）</th></tr></thead><tbody><tr><td>+5</td><td><code>00000101</code></td></tr><tr><td>-5</td><td><code>11111011</code></td></tr></tbody></table><blockquote><p>负数补码 = 反码 + 1 ✅ 补码唯一，无“负零”，方便加减法统一处理</p></blockquote><hr><h2 id="✅-四、浮点数机器数-ieee-754-标准" tabindex="-1"><a class="header-anchor" href="#✅-四、浮点数机器数-ieee-754-标准"><span>✅ 四、浮点数机器数（IEEE 754 标准）</span></a></h2><h3 id="格式-以-32-位单精度为例" tabindex="-1"><a class="header-anchor" href="#格式-以-32-位单精度为例"><span>格式（以 32 位单精度为例）：</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>| 1 位符号位 | 8 位阶码（移码） | 23 位尾数（有效数位） |</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>符号位</strong>：0 正，1 负</li><li><strong>阶码</strong>：真实指数 + 127（移码）</li><li><strong>尾数</strong>：省略了隐藏的第一位 1，称“规格化”</li></ul><hr><h3 id="✳️-举个例子" tabindex="-1"><a class="header-anchor" href="#✳️-举个例子"><span>✳️ 举个例子：</span></a></h3><blockquote><p>真数：<code>-6.25</code> IEEE 754 表示（32 位）：</p></blockquote><table><thead><tr><th>部分</th><th>值</th></tr></thead><tbody><tr><td>符号位</td><td>1</td></tr><tr><td>阶码</td><td><code>10000001</code> （即 129 = 2 + 127）</td></tr><tr><td>尾数</td><td><code>.1001</code> → 转换为 23 位存储形式：<code>10010000000000000000000</code></td></tr></tbody></table><p>最终二进制机器数（32 位）是：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1 10000001 10010000000000000000000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="🧠-为什么需要这么多形式" tabindex="-1"><a class="header-anchor" href="#🧠-为什么需要这么多形式"><span>🧠 为什么需要这么多形式？</span></a></h2><table><thead><tr><th>编码方式</th><th>用途</th><th>原因</th></tr></thead><tbody><tr><td>原码</td><td>理论学习用</td><td>直观，符合数学习惯</td></tr><tr><td>反码</td><td>减法便捷</td><td>让加法器也能做减法</td></tr><tr><td>补码</td><td>实际硬件使用</td><td>统一加减逻辑，无负零</td></tr><tr><td>移码</td><td>浮点阶码用</td><td>避免负数，便于比较大小</td></tr><tr><td>浮点表示</td><td>表示实数</td><td>能表示非常大或非常小的小数</td></tr></tbody></table><hr><p>你这两条补码运算速记点很关键，下面我帮你拆解并详细解释，方便你理解和记忆，顺便纠正一点小细节：</p><hr><h2 id="速记点-5-补码加法" tabindex="-1"><a class="header-anchor" href="#速记点-5-补码加法"><span>速记点 5：补码加法</span></a></h2><blockquote><p><strong>两个补码表示的数相加，符号位参与运算，两个数的和的补码等于两个数补码的和</strong></p></blockquote><h3 id="解释" tabindex="-1"><a class="header-anchor" href="#解释"><span>解释：</span></a></h3><ul><li>补码表示的整数加法，可以直接把两个补码的二进制数按位相加（包括符号位）</li><li>不用区分正负，计算过程统一</li><li>如果有溢出（进位超出位宽），舍弃最高位进位</li></ul><h3 id="举例" tabindex="-1"><a class="header-anchor" href="#举例"><span>举例：</span></a></h3><p>假设用 4 位补码表示</p><table><thead><tr><th>数字</th><th>补码</th></tr></thead><tbody><tr><td>+3</td><td>0011</td></tr><tr><td>-2</td><td>1110</td></tr></tbody></table><p>计算：3 + (-2)</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  0011  (+3)</span></span>\n<span class="line"><span>+ 1110  (-2)</span></span>\n<span class="line"><span>=10001  （5 位，丢弃最高位的进位1）</span></span>\n<span class="line"><span>=0001   (+1)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果是 +1，正确！</p><hr><h2 id="速记点-6-补码减法" tabindex="-1"><a class="header-anchor" href="#速记点-6-补码减法"><span>速记点 6：补码减法</span></a></h2><blockquote><p>$X - Y$_补 = $X + (-Y)$_补 = $X$_补 + $-Y$_补</p></blockquote><blockquote><p>已知 $Y$_补，求 $-Y$_补的方法是：将 $Y$_补连同符号位一起按位取反，末尾加 1，符号不单独参与运算。</p></blockquote><hr><h3 id="解释-1" tabindex="-1"><a class="header-anchor" href="#解释-1"><span>解释：</span></a></h3><ul><li><p>减法转化为加法：减去 Y 等同于加上 -Y</p></li><li><p>求 -Y 的补码：</p><ol><li>对 Y 的补码全位取反（包括符号位）</li><li>结果加 1</li></ol></li></ul><h3 id="举例-1" tabindex="-1"><a class="header-anchor" href="#举例-1"><span>举例：</span></a></h3><p>用 4 位补码表示</p><p>Y = +2，补码 = 0010</p><p>求 -Y：</p><ul><li>按位取反：<code>0010</code> → <code>1101</code></li><li>加 1：<code>1101 + 1 = 1110</code>，即 -2 的补码</li></ul><hr><h3 id="注意" tabindex="-1"><a class="header-anchor" href="#注意"><span>注意：</span></a></h3><ul><li><strong>符号位是参与取反运算的！</strong> 不是“符号不参与运算”，而是符号位也参与取反。</li></ul><hr><h2 id="总结小口诀" tabindex="-1"><a class="header-anchor" href="#总结小口诀"><span>总结小口诀：</span></a></h2><ul><li><strong>加法直接加，符号位一起算，丢掉溢出位，结果就是和</strong></li><li><strong>减法变加法，求负先反码，全部按位反，再加一就是负</strong></li></ul><hr><p>需要我帮你写个示范的代码或画个图说明补码加减法过程吗？</p>',71)]))}]]),r=JSON.parse('{"path":"/zh/posts/review/%E8%AE%A1%E7%BB%84.html","title":"计算机组成原理","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-07-06T00:00:00.000Z","category":["Learning Records"],"tag":["Algorithm"],"description":"计算机组成原理 ✅ 机器数的形式 —— 计算机中数的真实表示方式 在计算机中，“机器数”是指将真数（数学中的原始数）转换成计算机内部可以识别的二进制形式，并带有符号位或其他编码格式的存储表示。 🧠 一、什么是“机器数”？ 机器数 = 用一定规则将数转换为计算机内部二进制的形式。 它包含： 符号（正负号） 数值部分（整数或浮点数） 长度限制（比如 8 ...","head":[["meta",{"property":"og:url","content":"https://crc011220.github.io/zh/posts/review/%E8%AE%A1%E7%BB%84.html"}],["meta",{"property":"og:site_name","content":"Ruochen Chen"}],["meta",{"property":"og:title","content":"计算机组成原理"}],["meta",{"property":"og:description","content":"计算机组成原理 ✅ 机器数的形式 —— 计算机中数的真实表示方式 在计算机中，“机器数”是指将真数（数学中的原始数）转换成计算机内部可以识别的二进制形式，并带有符号位或其他编码格式的存储表示。 🧠 一、什么是“机器数”？ 机器数 = 用一定规则将数转换为计算机内部二进制的形式。 它包含： 符号（正负号） 数值部分（整数或浮点数） 长度限制（比如 8 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-08T09:24:05.000Z"}],["meta",{"property":"article:tag","content":"Algorithm"}],["meta",{"property":"article:published_time","content":"2025-07-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-08T09:24:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"计算机组成原理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-07-06T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-08T09:24:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ruochen Chen\\"}]}"]]},"headers":[{"level":3,"title":"✅ 机器数的形式 —— 计算机中数的真实表示方式","slug":"✅-机器数的形式-——-计算机中数的真实表示方式","link":"#✅-机器数的形式-——-计算机中数的真实表示方式","children":[]},{"level":2,"title":"🧠 一、什么是“机器数”？","slug":"🧠-一、什么是-机器数","link":"#🧠-一、什么是-机器数","children":[]},{"level":2,"title":"✅ 二、常见机器数的形式（速记）","slug":"✅-二、常见机器数的形式-速记","link":"#✅-二、常见机器数的形式-速记","children":[]},{"level":2,"title":"🎯 三、整数机器数的表示方式详解（以8位为例）","slug":"🎯-三、整数机器数的表示方式详解-以8位为例","link":"#🎯-三、整数机器数的表示方式详解-以8位为例","children":[{"level":3,"title":"✅ 1. 原码（Sign-Magnitude）","slug":"✅-1-原码-sign-magnitude","link":"#✅-1-原码-sign-magnitude","children":[]},{"level":3,"title":"✅ 2. 反码（One\'s Complement）","slug":"✅-2-反码-one-s-complement","link":"#✅-2-反码-one-s-complement","children":[]},{"level":3,"title":"✅ 3. 补码（Two\'s Complement）⭐最重要！","slug":"✅-3-补码-two-s-complement-⭐最重要","link":"#✅-3-补码-two-s-complement-⭐最重要","children":[]}]},{"level":2,"title":"✅ 四、浮点数机器数（IEEE 754 标准）","slug":"✅-四、浮点数机器数-ieee-754-标准","link":"#✅-四、浮点数机器数-ieee-754-标准","children":[{"level":3,"title":"格式（以 32 位单精度为例）：","slug":"格式-以-32-位单精度为例","link":"#格式-以-32-位单精度为例","children":[]},{"level":3,"title":"✳️ 举个例子：","slug":"✳️-举个例子","link":"#✳️-举个例子","children":[]}]},{"level":2,"title":"🧠 为什么需要这么多形式？","slug":"🧠-为什么需要这么多形式","link":"#🧠-为什么需要这么多形式","children":[]},{"level":2,"title":"速记点 5：补码加法","slug":"速记点-5-补码加法","link":"#速记点-5-补码加法","children":[{"level":3,"title":"解释：","slug":"解释","link":"#解释","children":[]},{"level":3,"title":"举例：","slug":"举例","link":"#举例","children":[]}]},{"level":2,"title":"速记点 6：补码减法","slug":"速记点-6-补码减法","link":"#速记点-6-补码减法","children":[{"level":3,"title":"解释：","slug":"解释-1","link":"#解释-1","children":[]},{"level":3,"title":"举例：","slug":"举例-1","link":"#举例-1","children":[]},{"level":3,"title":"注意：","slug":"注意","link":"#注意","children":[]}]},{"level":2,"title":"总结小口诀：","slug":"总结小口诀","link":"#总结小口诀","children":[]}],"git":{"createdTime":1751966645000,"updatedTime":1751966645000,"contributors":[{"name":"Ruochen Chen","email":"ruocchen1220@gmail.com","commits":1}]},"readingTime":{"minutes":3.73,"words":1120},"filePathRelative":"zh/posts/review/计组.md","localizedDate":"2025年7月6日","excerpt":"\\n<h3>✅ 机器数的形式 —— 计算机中数的真实表示方式</h3>\\n<p>在计算机中，<strong>“机器数”<strong>是指将</strong>真数（数学中的原始数）转换成计算机内部可以识别的二进制形式</strong>，并带有符号位或其他编码格式的<strong>存储表示</strong>。</p>\\n<hr>\\n<h2>🧠 一、什么是“机器数”？</h2>\\n<blockquote>\\n<p><strong>机器数 = 用一定规则将数转换为计算机内部二进制的形式。</strong></p>\\n</blockquote>\\n<p>它包含：</p>\\n<ul>\\n<li><strong>符号</strong>（正负号）</li>\\n<li><strong>数值部分</strong>（整数或浮点数）</li>\\n<li><strong>长度限制</strong>（比如 8 位、32 位等）</li>\\n</ul>","autoDesc":true}')},6262:(t,e)=>{e.A=(t,e)=>{const n=t.__vccOpts||t;for(const[t,a]of e)n[t]=a;return n}}}]);