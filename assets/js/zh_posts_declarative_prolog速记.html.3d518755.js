"use strict";(self.webpackChunkpersonalweb=self.webpackChunkpersonalweb||[]).push([[5008],{5032:(i,s,t)=>{t.r(s),t.d(s,{comp:()=>l,data:()=>h});var a=t(641);const e={},l=(0,t(6262).A)(e,[["render",function(i,s){return(0,a.uX)(),(0,a.CE)("div",null,s[0]||(s[0]=[(0,a.Fv)('<h1 id="prolog-内置谓词速查表" tabindex="-1"><a class="header-anchor" href="#prolog-内置谓词速查表"><span>Prolog 内置谓词速查表</span></a></h1><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>help(Name)</code></td><td>查看某个谓词的用法简要说明</td></tr><tr><td><code>apropos(Keyword)</code></td><td>搜索包含某关键词的所有文档条目</td></tr><tr><td><code>listing(Name/Arity)</code></td><td>查看用户自定义谓词定义</td></tr><tr><td><code>predicate_property(P,Prop)</code></td><td>查询谓词的属性</td></tr><tr><td><code>current_predicate(Name/Arity)</code></td><td>查看所有当前存在的谓词</td></tr><tr><td><code>trace.</code> / <code>notrace.</code></td><td>启用/禁用调试</td></tr></tbody></table><hr><h2 id="🧰-基本谓词-结构、判断" tabindex="-1"><a class="header-anchor" href="#🧰-基本谓词-结构、判断"><span>🧰 基本谓词（结构、判断）</span></a></h2><table><thead><tr><th>谓词</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>X = Y</code></td><td>结构统一</td><td><code>X = foo(Y)</code> → <code>X = foo(Y)</code></td></tr><tr><td><code>X \\= Y</code></td><td>结构无法统一</td><td><code>foo(a) \\= foo(b)</code> → <code>true</code></td></tr><tr><td><code>X == Y</code></td><td>完全相同（不试图统一）</td><td><code>X = a, Y = a, X == Y</code> → <code>true</code></td></tr><tr><td><code>X \\== Y</code></td><td>不完全相同</td><td><code>X = a, Y = b, X \\== Y</code> → <code>true</code></td></tr><tr><td><code>X is Expr</code></td><td>数值求值（右侧是算术表达式）</td><td><code>X is 2 + 3</code> → <code>X = 5</code></td></tr><tr><td><code>X =:= Y</code></td><td>数值等于</td><td><code>2 + 3 =:= 5</code> → <code>true</code></td></tr><tr><td><code>X =\\= Y</code></td><td>数值不等</td><td><code>5 =\\= 6</code> → <code>true</code></td></tr><tr><td><code>X @&lt; Y</code></td><td>字典序小于</td><td><code>&#39;apple&#39; @&lt; &#39;banana&#39;</code> → <code>true</code></td></tr><tr><td><code>X @&gt; Y</code></td><td>字典序大于</td><td><code>&#39;zoo&#39; @&gt; &#39;apple&#39;</code> → <code>true</code></td></tr><tr><td><code>\\+</code></td><td>逻辑非</td><td><code>\\+ true</code> → <code>false</code></td></tr></tbody></table><ul><li><code>var(Term)</code> means <code>Term</code> is an unbound variable</li><li><code>nonvar(Term)</code> means <code>Term</code> is not an unbound variable</li><li><code>ground(Term)</code> means <code>Term</code> contains no unbound variables</li></ul><hr><h2 id="🔢-数字运算" tabindex="-1"><a class="header-anchor" href="#🔢-数字运算"><span>🔢 数字运算</span></a></h2><table><thead><tr><th>谓词</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>+</code></td><td>加法</td><td><code>2 + 3</code> → <code>5</code></td></tr><tr><td><code>-</code></td><td>减法</td><td><code>5 - 2</code> → <code>3</code></td></tr><tr><td><code>*</code></td><td>乘法</td><td><code>2 * 3</code> → <code>6</code></td></tr><tr><td><code>/</code></td><td>除法（浮点数）</td><td><code>5 / 2</code> → <code>2.5</code></td></tr><tr><td><code>div 或者 //</code></td><td>整数除法（商）</td><td><code>5 div 2</code> → <code>2</code></td></tr><tr><td><code>rem</code></td><td>取余（整数除法余数）</td><td><code>5 rem 2</code> → <code>1</code></td></tr><tr><td><code>abs</code></td><td>绝对值</td><td><code>abs(-5)</code> → <code>5</code></td></tr></tbody></table><h2 id="🔁-控制结构" tabindex="-1"><a class="header-anchor" href="#🔁-控制结构"><span>🔁 控制结构</span></a></h2><table><thead><tr><th>谓词</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>(A, B)</code></td><td>同时满足（AND）</td><td><code>(X = 1, Y = 2)</code> → <code>X = 1, Y = 2</code></td></tr><tr><td><code>(A ; B)</code></td><td>任一满足（OR）</td><td><code>(X = 1 ; X = 2)</code> → <code>X = 1 ; X = 2</code></td></tr><tr><td><code>Cond -&gt; Then ; Else</code></td><td>条件分支</td><td><code>(X &gt; 0 -&gt; Pos = yes ; Pos = no)</code></td></tr><tr><td><code>fail</code></td><td>强制失败</td><td><code>(write(&#39;hello&#39;), fail)</code> → 输出 hello，失败</td></tr><tr><td><code>true</code></td><td>总是成功</td><td><code>true.</code> → <code>true</code></td></tr></tbody></table><hr><h2 id="📋-列表处理" tabindex="-1"><a class="header-anchor" href="#📋-列表处理"><span>📋 列表处理</span></a></h2><table><thead><tr><th>谓词</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>member(X, L)</code></td><td><code>X</code> 是 <code>L</code> 中的成员</td><td><code>member(2, [1,2,3])</code> → <code>true</code></td></tr><tr><td><code>append(A,B,AB)</code></td><td>拼接：<code>A ++ B = AB</code></td><td><code>append([1,2],[3],R)</code> → <code>R = [1,2,3]</code></td></tr><tr><td><code>length(L, N)</code></td><td>求长度</td><td><code>length([a,b,c], N)</code> → <code>N = 3</code></td></tr><tr><td><code>reverse(L, R)</code></td><td>列表反转</td><td><code>reverse([1,2,3], R)</code> → <code>R = [3,2,1]</code></td></tr><tr><td><code>select(X, L, R)</code></td><td>移除元素 X，返回新列表 R</td><td><code>select(2, [1,2,3], R)</code> → <code>R = [1,3]</code></td></tr><tr><td><code>nth0(I, L, X)</code></td><td>第 <code>I</code> 个元素（从 0 开始）</td><td><code>nth0(1, [a,b,c], X)</code> → <code>X = b</code></td></tr><tr><td><code>maplist(P, L)</code></td><td>对 L 中每个元素应用 P</td><td><code>maplist(writeln, [a,b,c])</code> 输出 abc</td></tr><tr><td><code>include(P, L, R)</code></td><td>保留满足 P 的元素</td><td><code>include(even, [1,2,4], R)</code> → <code>R = [2,4]</code></td></tr><tr><td><code>exclude(P, L, R)</code></td><td>删除满足 P 的元素</td><td><code>exclude(even, [1,2,4], R)</code> → <code>R = [1]</code></td></tr></tbody></table><hr><h2 id="🧠-元编程-谓词操作" tabindex="-1"><a class="header-anchor" href="#🧠-元编程-谓词操作"><span>🧠 元编程（谓词操作）</span></a></h2><table><thead><tr><th>谓词</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>findall(X, G, L)</code></td><td>所有满足 G 的 X 放进 L（重复保留）</td><td><code>findall(X, member(X,[a,b]), L)</code> → <code>L = [a,b]</code></td></tr><tr><td><code>bagof(X, G, L)</code></td><td>分组结果（按自由变量分组）</td><td><code>bagof(X, Y^member(X-Y, [a-1,a-2]), L)</code> → <code>L = [a,a]</code></td></tr><tr><td><code>setof(模板, 条件, L)</code></td><td>找出所有满足“条件”的解，用“模板”表示出来，并去重后放入“结果列表</td><td><code>setof(X, member(X,[b,a,b]), L)</code> → <code>L = [a,b]</code></td></tr><tr><td><code>call(P)</code></td><td>动态调用谓词</td><td><code>P = member(X,[1,2]), call(P)</code> → <code>X = 1 ; X = 2</code></td></tr><tr><td><code>once(G)</code></td><td>只取第一个解</td><td><code>once(member(X,[a,b]))</code> → <code>X = a</code></td></tr><tr><td><code>\\+ Goal</code></td><td><code>Goal</code> 不可满足时成立（逻辑非）</td><td><code>\\+ member(3, [1,2])</code> → <code>true</code></td></tr><tr><td><code>^</code></td><td>绑定变量（将变量绑定到值）</td><td><code>X^member(X,[1,2])</code> → <code>X = 1 ; X = 2</code></td></tr></tbody></table><hr><h2 id="📊-排序-比较" tabindex="-1"><a class="header-anchor" href="#📊-排序-比较"><span>📊 排序 &amp; 比较</span></a></h2><table><thead><tr><th>谓词</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>sort(L, R)</code></td><td>排序并去重</td><td><code>sort([3,1,2,1], R)</code> → <code>R = [1,2,3]</code></td></tr><tr><td><code>msort(L, R)</code></td><td>排序但保留重复项</td><td><code>msort([3,1,2,1], R)</code> → <code>R = [1,1,2,3]</code></td></tr><tr><td><code>keysort(Pairs, R)</code></td><td>根据键排序，如 <code>K-V</code> 结构</td><td><code>keysort([2-b,1-a], R)</code> → <code>R = [1-a,2-b]</code></td></tr><tr><td><code>compare(O, A, B)</code></td><td>比较字典顺序，得 <code>&lt;</code>、<code>=</code>、<code>&gt;</code></td><td><code>compare(R, apple, banana)</code> → <code>R = &lt;</code></td></tr></tbody></table><hr><h2 id="🧪-调试辅助" tabindex="-1"><a class="header-anchor" href="#🧪-调试辅助"><span>🧪 调试辅助</span></a></h2><table><thead><tr><th>谓词</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>trace</code></td><td>开启逐步调试</td><td><code>trace.</code> → 开始追踪执行</td></tr><tr><td><code>notrace</code></td><td>关闭调试</td><td><code>notrace.</code></td></tr><tr><td><code>listing</code></td><td>显示当前定义的谓词规则</td><td><code>listing(largest_city/2).</code></td></tr></tbody></table><hr><h3 id="clp-fd" tabindex="-1"><a class="header-anchor" href="#clp-fd"><span>CLP(FD)</span></a></h3><p>:- use_module(library(clpfd)).</p><table><thead><tr><th>谓词</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>X #= Y</code></td><td>数值相等</td><td><code>X #= 5</code> → <code>X = 5</code></td></tr><tr><td><code>X #\\= Y</code></td><td>数值不等</td><td><code>X #\\= 5</code> → <code>X = 5</code></td></tr><tr><td><code>X #&lt; Y</code></td><td>数值小于</td><td><code>X #&lt; 5</code> → <code>X = 5</code></td></tr><tr><td><code>X #&gt; Y</code></td><td>数值大于</td><td><code>X #&gt; 5</code> → <code>X = 5</code></td></tr><tr><td><code>X #=&lt; Y</code></td><td>数值小于等于</td><td><code>X #=&lt; 5</code> → <code>X = 5</code></td></tr><tr><td><code>X #&gt;= Y</code></td><td>数值大于等于</td><td><code>X #&gt;= 5</code> → <code>X = 5</code></td></tr><tr><td><code>label(Vars)</code></td><td>约束变量(告诉系统 “现在请开始遍历所有可能值，找出满足的组合”)</td><td><code>label([X,Y])</code> → <code>X = 5, Y = 5</code></td></tr></tbody></table><h2 id="尾递归" tabindex="-1"><a class="header-anchor" href="#尾递归"><span>尾递归</span></a></h2><div class="language-prolog line-numbers-mode" data-highlighter="shiki" data-ext="prolog" data-title="prolog" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">%用一个acc来记录累加值</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sum_list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Sum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:-</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    sum_list_acc(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Sum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sum_list_acc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Acc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Acc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sum_list_acc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">X</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Xs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Acc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Sum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:-</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">    Acc1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> is </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Acc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">X</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    sum_list_acc(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Xs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Acc1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Sum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="练习" tabindex="-1"><a class="header-anchor" href="#练习"><span>练习</span></a></h2><hr><h3 id="_1-take-while-not-space-3-—-从头取连续非空格字符作为一个单词" tabindex="-1"><a class="header-anchor" href="#_1-take-while-not-space-3-—-从头取连续非空格字符作为一个单词"><span>1. <code>take_while_not_space/3</code> — 从头取连续非空格字符作为一个单词</span></a></h3><div class="language-prolog line-numbers-mode" data-highlighter="shiki" data-ext="prolog" data-title="prolog" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">% take_while_not_space(Line, Word, Rest)</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">% 从 Line 中取出开头连续的非空格字符放到 Word，剩余放到 Rest。</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">take_while_not_space</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  % 空列表，Word 和 Rest 都为空</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">take_while_not_space</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">C</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Cs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, [</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">C</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Cs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:-</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">    C</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&#39; , </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">!.</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  % 如果第一个字符是空格，Word 结束为空，Rest 就是原列表</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">take_while_not_space</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">C</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Cs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], [</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">C</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Word</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Rest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:-</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">    C</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> \\= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&#39; ,                          </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">% 不是空格</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    take_while_not_space(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Cs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Word</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Rest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> % 继续递归</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_2-split-on-predicate-4-—-按满足谓词条件的字符分割列表" tabindex="-1"><a class="header-anchor" href="#_2-split-on-predicate-4-—-按满足谓词条件的字符分割列表"><span>2. <code>split_on_predicate/4</code> — 按满足谓词条件的字符分割列表</span></a></h3><div class="language-prolog line-numbers-mode" data-highlighter="shiki" data-ext="prolog" data-title="prolog" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">% split_on_predicate(List, Predicate, Prefix, Rest)</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">% 把 List 按第一个满足 Predicate 的元素分割为 Prefix 和 Rest。</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">split_on_predicate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  % 空列表分割结果都空</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">split_on_predicate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">H</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Pred</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, [</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">H</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:-</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    call(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Pred</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">H</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">!.</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> % 如果当前头元素满足谓词，Prefix 为空，Rest 是整个列表</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">split_on_predicate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">H</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Pred</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, [</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">H</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Prefix</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Rest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:-</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    \\+ call(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Pred</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">H</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">% 如果不满足谓词，H 加入 Prefix</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    split_on_predicate(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Pred</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Prefix</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Rest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> % 递归处理尾部</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_3-compress-spaces-2-—-合并多个连续空格成一个空格" tabindex="-1"><a class="header-anchor" href="#_3-compress-spaces-2-—-合并多个连续空格成一个空格"><span>3. <code>compress_spaces/2</code> — 合并多个连续空格成一个空格</span></a></h3><div class="language-prolog line-numbers-mode" data-highlighter="shiki" data-ext="prolog" data-title="prolog" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">% compress_spaces(Input, Output)</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">% 把 Input 字符列表中的连续空格合并成一个空格输出为 Output。</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">compress_spaces</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  % 空列表对应空输出</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">compress_spaces</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0&#39; |T], [0&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:-</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> % 当前字符是空格</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    skip_spaces(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">T2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),             </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">% 跳过 Input 中所有连续空格</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    compress_spaces(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">T2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         % 继续压缩剩余部分</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">compress_spaces</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">H</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], [</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">H</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:-</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    % 非空格字符正常保留</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">    H</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> \\= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&#39; ,</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    compress_spaces(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">% skip_spaces(List, Rest)</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">% 跳过 List 开头的所有空格，返回剩余 Rest。</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">skip_spaces</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&#39;|</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:-</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    skip_spaces(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">skip_spaces</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_4-prefix-2-—-判断一个列表是不是另一个列表的前缀" tabindex="-1"><a class="header-anchor" href="#_4-prefix-2-—-判断一个列表是不是另一个列表的前缀"><span>4. <code>prefix/2</code> — 判断一个列表是不是另一个列表的前缀</span></a></h3><div class="language-prolog line-numbers-mode" data-highlighter="shiki" data-ext="prolog" data-title="prolog" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">% prefix(Prefix, List)</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">% 判断 Prefix 是否是 List 的前缀。</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">prefix</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">              % 空列表是任何列表的前缀</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">prefix</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">H</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">T1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], [</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">H</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">T2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:-</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   % 两列表头相同则递归比较尾部</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    prefix(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">T1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">T2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_5-remove-duplicates-2-—-删除列表中重复元素-保留顺序" tabindex="-1"><a class="header-anchor" href="#_5-remove-duplicates-2-—-删除列表中重复元素-保留顺序"><span>5. <code>remove_duplicates/2</code> — 删除列表中重复元素，保留顺序</span></a></h3><div class="language-prolog line-numbers-mode" data-highlighter="shiki" data-ext="prolog" data-title="prolog" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">% remove_duplicates(List, Result)</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">% 从 List 中删除重复元素，保留出现顺序。</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">remove_duplicates</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  % 空列表对应空结果</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">remove_duplicates</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">H</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:-</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    member(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">H</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,         </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">% 如果 H 在尾部 T 中出现过，跳过 H</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    remove_duplicates(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">remove_duplicates</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">H</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], [</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">H</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:-</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> % 否则保留 H</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    remove_duplicates(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_6-split-list-3-—-按长度分割列表成两部分" tabindex="-1"><a class="header-anchor" href="#_6-split-list-3-—-按长度分割列表成两部分"><span>6. <code>split_list/3</code> — 按长度分割列表成两部分</span></a></h3><div class="language-prolog line-numbers-mode" data-highlighter="shiki" data-ext="prolog" data-title="prolog" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">% split_list(N, List, (Front, Back))</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">% 从 List 中分出前 N 个元素为 Front，剩余为 Back。</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">split_list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  % 分割长度为0，Front 空，Back 是整个列表</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">split_list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">N</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, [</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">H</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], ([</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">H</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Front</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Back</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:-</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">    N</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">    N1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> is </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">N</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> - </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    split_list(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">N1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Front</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Back</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> % 递归分割尾部</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>',49)]))}]]),h=JSON.parse('{"path":"/zh/posts/declarative/prolog%E9%80%9F%E8%AE%B0.html","title":"Prolog 内置谓词速查表","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-06-14T00:00:00.000Z","category":["Learning Records"],"tag":["Declarative Programming"],"description":"Prolog 内置谓词速查表 🧰 基本谓词（结构、判断） var(Term) means Term is an unbound variable nonvar(Term) means Term is not an unbound variable ground(Term) means Term contains no unbound variable...","head":[["meta",{"property":"og:url","content":"https://crc011220.github.io/zh/posts/declarative/prolog%E9%80%9F%E8%AE%B0.html"}],["meta",{"property":"og:site_name","content":"Richard Chen"}],["meta",{"property":"og:title","content":"Prolog 内置谓词速查表"}],["meta",{"property":"og:description","content":"Prolog 内置谓词速查表 🧰 基本谓词（结构、判断） var(Term) means Term is an unbound variable nonvar(Term) means Term is not an unbound variable ground(Term) means Term contains no unbound variable..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-19T00:35:51.000Z"}],["meta",{"property":"article:tag","content":"Declarative Programming"}],["meta",{"property":"article:published_time","content":"2025-06-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-19T00:35:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Prolog 内置谓词速查表\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-14T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-19T00:35:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Richard Chen\\"}]}"]]},"headers":[{"level":2,"title":"🧰 基本谓词（结构、判断）","slug":"🧰-基本谓词-结构、判断","link":"#🧰-基本谓词-结构、判断","children":[]},{"level":2,"title":"🔢 数字运算","slug":"🔢-数字运算","link":"#🔢-数字运算","children":[]},{"level":2,"title":"🔁 控制结构","slug":"🔁-控制结构","link":"#🔁-控制结构","children":[]},{"level":2,"title":"📋 列表处理","slug":"📋-列表处理","link":"#📋-列表处理","children":[]},{"level":2,"title":"🧠 元编程（谓词操作）","slug":"🧠-元编程-谓词操作","link":"#🧠-元编程-谓词操作","children":[]},{"level":2,"title":"📊 排序 & 比较","slug":"📊-排序-比较","link":"#📊-排序-比较","children":[]},{"level":2,"title":"🧪 调试辅助","slug":"🧪-调试辅助","link":"#🧪-调试辅助","children":[{"level":3,"title":"CLP(FD)","slug":"clp-fd","link":"#clp-fd","children":[]}]},{"level":2,"title":"尾递归","slug":"尾递归","link":"#尾递归","children":[]},{"level":2,"title":"练习","slug":"练习","link":"#练习","children":[{"level":3,"title":"1. take_while_not_space/3 — 从头取连续非空格字符作为一个单词","slug":"_1-take-while-not-space-3-—-从头取连续非空格字符作为一个单词","link":"#_1-take-while-not-space-3-—-从头取连续非空格字符作为一个单词","children":[]},{"level":3,"title":"2. split_on_predicate/4 — 按满足谓词条件的字符分割列表","slug":"_2-split-on-predicate-4-—-按满足谓词条件的字符分割列表","link":"#_2-split-on-predicate-4-—-按满足谓词条件的字符分割列表","children":[]},{"level":3,"title":"3. compress_spaces/2 — 合并多个连续空格成一个空格","slug":"_3-compress-spaces-2-—-合并多个连续空格成一个空格","link":"#_3-compress-spaces-2-—-合并多个连续空格成一个空格","children":[]},{"level":3,"title":"4. prefix/2 — 判断一个列表是不是另一个列表的前缀","slug":"_4-prefix-2-—-判断一个列表是不是另一个列表的前缀","link":"#_4-prefix-2-—-判断一个列表是不是另一个列表的前缀","children":[]},{"level":3,"title":"5. remove_duplicates/2 — 删除列表中重复元素，保留顺序","slug":"_5-remove-duplicates-2-—-删除列表中重复元素-保留顺序","link":"#_5-remove-duplicates-2-—-删除列表中重复元素-保留顺序","children":[]},{"level":3,"title":"6. split_list/3 — 按长度分割列表成两部分","slug":"_6-split-list-3-—-按长度分割列表成两部分","link":"#_6-split-list-3-—-按长度分割列表成两部分","children":[]}]}],"git":{"createdTime":1750161054000,"updatedTime":1750293351000,"contributors":[{"name":"Ruochen Chen","email":"ruocchen1220@gmail.com","commits":2}]},"readingTime":{"minutes":5.52,"words":1656},"filePathRelative":"zh/posts/declarative/prolog速记.md","localizedDate":"2025年6月14日","excerpt":"\\n<table>\\n<thead>\\n<tr>\\n<th>命令</th>\\n<th>作用</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>help(Name)</code></td>\\n<td>查看某个谓词的用法简要说明</td>\\n</tr>\\n<tr>\\n<td><code>apropos(Keyword)</code></td>\\n<td>搜索包含某关键词的所有文档条目</td>\\n</tr>\\n<tr>\\n<td><code>listing(Name/Arity)</code></td>\\n<td>查看用户自定义谓词定义</td>\\n</tr>\\n<tr>\\n<td><code>predicate_property(P,Prop)</code></td>\\n<td>查询谓词的属性</td>\\n</tr>\\n<tr>\\n<td><code>current_predicate(Name/Arity)</code></td>\\n<td>查看所有当前存在的谓词</td>\\n</tr>\\n<tr>\\n<td><code>trace.</code> / <code>notrace.</code></td>\\n<td>启用/禁用调试</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}')},6262:(i,s)=>{s.A=(i,s)=>{const t=i.__vccOpts||i;for(const[i,a]of s)t[i]=a;return t}}}]);