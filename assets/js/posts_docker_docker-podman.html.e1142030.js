"use strict";(self.webpackChunkpersonalweb=self.webpackChunkpersonalweb||[]).push([[185],{906:(e,o,t)=>{t.r(o),t.d(o,{comp:()=>r,data:()=>s});var a=t(641);const n={},r=(0,t(6262).A)(n,[["render",function(e,o){return(0,a.uX)(),(0,a.CE)("div",null,o[0]||(o[0]=[(0,a.Fv)('<h1 id="docker-vs-podman" tabindex="-1"><a class="header-anchor" href="#docker-vs-podman"><span>Docker vs Podman</span></a></h1><ul><li>Purpose: Podman is a Docker-compatible, daemonless container engine focused on security and compatibility with OCI.</li><li>Security model: Rootless by default via user namespaces; works with SELinux/AppArmor; reduces blast radius compared to a rootful daemon.</li><li>Architecture: No central daemon; containers are regular processes managed by the user; integrates well with <code>systemd</code> (generate unit files, manage lifecycle).</li><li>Docker compatibility: Largely CLI-compatible; can run Docker images; <code>podman build</code> (powered by Buildah) supports Dockerfiles; optional Docker REST API socket for tooling compatibility.</li><li>Kubernetes integration: First-class pod concept; <code>podman generate kube</code> exports manifests; <code>podman play kube</code> runs manifests locally; smoother dev→K8s workflows.</li><li>Networking: Uses CNI plugins; rootless networking relies on slirp4netns (some port/MTU limitations); differs from Docker’s default bridge but offers comparable outcomes in most cases.</li><li>Storage: OCI image layout; OverlayFS where available, <code>fuse-overlayfs</code> for rootless; supports volumes and image management similar to Docker.</li><li>Compose: Supports <code>podman-compose</code>; with the Docker-compatible socket, many <code>docker compose</code> workflows can work, though features may vary by version.</li><li>Cross-platform: Native on Linux; macOS/Windows use Podman Machine (a lightweight VM), similar conceptually to Docker Desktop.</li><li>Performance: Lower overhead on Linux without a long-running daemon; on macOS/Windows performance depends on the backing VM.</li><li>Use cases: Security-conscious environments, rootless CI, local K8s-oriented development, and servers where a daemon is undesirable.</li><li>Limitations: No persistent daemon to auto-manage state; some rootless networking constraints; ecosystem around Compose and third-party tools can be uneven versus Docker.</li></ul>',2)]))}]]),s=JSON.parse('{"path":"/posts/docker/docker-podman.html","title":"Docker vs Podman","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2025-10-03T00:00:00.000Z","category":["Learning Records"],"tag":["Docker"],"description":"Docker vs Podman Purpose: Podman is a Docker-compatible, daemonless container engine focused on security and compatibility with OCI. Security model: Rootless by default via user...","head":[["meta",{"property":"og:url","content":"https://crc011220.github.io/posts/docker/docker-podman.html"}],["meta",{"property":"og:site_name","content":"Ruochen Chen"}],["meta",{"property":"og:title","content":"Docker vs Podman"}],["meta",{"property":"og:description","content":"Docker vs Podman Purpose: Podman is a Docker-compatible, daemonless container engine focused on security and compatibility with OCI. Security model: Rootless by default via user..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-10-04T00:11:05.000Z"}],["meta",{"property":"article:tag","content":"Docker"}],["meta",{"property":"article:published_time","content":"2025-10-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-04T00:11:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker vs Podman\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-10-03T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-04T00:11:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ruochen Chen\\"}]}"]]},"headers":[],"git":{"createdTime":1759536665000,"updatedTime":1759536665000,"contributors":[{"name":"Ruochen Chen","email":"ruocchen1220@gmail.com","commits":1}]},"readingTime":{"minutes":0.87,"words":260},"filePathRelative":"posts/docker/docker-podman.md","localizedDate":"October 3, 2025","excerpt":"\\n<ul>\\n<li>Purpose: Podman is a Docker-compatible, daemonless container engine focused on security and compatibility with OCI.</li>\\n<li>Security model: Rootless by default via user namespaces; works with SELinux/AppArmor; reduces blast radius compared to a rootful daemon.</li>\\n<li>Architecture: No central daemon; containers are regular processes managed by the user; integrates well with <code>systemd</code> (generate unit files, manage lifecycle).</li>\\n<li>Docker compatibility: Largely CLI-compatible; can run Docker images; <code>podman build</code> (powered by Buildah) supports Dockerfiles; optional Docker REST API socket for tooling compatibility.</li>\\n<li>Kubernetes integration: First-class pod concept; <code>podman generate kube</code> exports manifests; <code>podman play kube</code> runs manifests locally; smoother dev→K8s workflows.</li>\\n<li>Networking: Uses CNI plugins; rootless networking relies on slirp4netns (some port/MTU limitations); differs from Docker’s default bridge but offers comparable outcomes in most cases.</li>\\n<li>Storage: OCI image layout; OverlayFS where available, <code>fuse-overlayfs</code> for rootless; supports volumes and image management similar to Docker.</li>\\n<li>Compose: Supports <code>podman-compose</code>; with the Docker-compatible socket, many <code>docker compose</code> workflows can work, though features may vary by version.</li>\\n<li>Cross-platform: Native on Linux; macOS/Windows use Podman Machine (a lightweight VM), similar conceptually to Docker Desktop.</li>\\n<li>Performance: Lower overhead on Linux without a long-running daemon; on macOS/Windows performance depends on the backing VM.</li>\\n<li>Use cases: Security-conscious environments, rootless CI, local K8s-oriented development, and servers where a daemon is undesirable.</li>\\n<li>Limitations: No persistent daemon to auto-manage state; some rootless networking constraints; ecosystem around Compose and third-party tools can be uneven versus Docker.</li>\\n</ul>","autoDesc":true}')},6262:(e,o)=>{o.A=(e,o)=>{const t=e.__vccOpts||e;for(const[e,a]of o)t[e]=a;return t}}}]);