"use strict";(self.webpackChunkpersonalweb=self.webpackChunkpersonalweb||[]).push([[3069],{6262:(t,d)=>{d.A=(t,d)=>{const s=t.__vccOpts||t;for(const[t,r]of d)s[t]=r;return s}},8212:(t,d,s)=>{s.r(d),s.d(d,{comp:()=>e,data:()=>i});var r=s(641);const a={},e=(0,s(6262).A)(a,[["render",function(t,d){return(0,r.uX)(),(0,r.CE)("div",null,d[0]||(d[0]=[(0,r.Fv)('<h1 id="数据库" tabindex="-1"><a class="header-anchor" href="#数据库"><span>数据库</span></a></h1><h2 id="数据库概念" tabindex="-1"><a class="header-anchor" href="#数据库概念"><span>数据库概念</span></a></h2><ul><li>数据库系统是由数据库、数据库管理系统（及其应用开发工具）、应用程序和数据库管理员（Data Base Administrator，DBA）组成的存储、管理、处理和维护数据的系统</li></ul><h3 id="数据库技术发展" tabindex="-1"><a class="header-anchor" href="#数据库技术发展"><span>数据库技术发展</span></a></h3><table><thead><tr><th>阶段</th><th>主要特点</th><th>使用场景举例</th></tr></thead><tbody><tr><td><strong>人工管理阶段</strong></td><td>- 数据<strong>不保存</strong><br>- 应用程序直接管理数据<br>- 数据面向应用<br>- 无独立性</td><td>最早期（如纸质记录、临时内存）</td></tr><tr><td><strong>文件系统管理阶段</strong></td><td>- 数据存放于<strong>文件</strong><br>- 程序与数据有<strong>一定独立性</strong><br>- 文件种类繁多<br>- 冗余高、共享差</td><td>早期计算机系统、C语言读写文件</td></tr><tr><td><strong>数据库管理阶段</strong></td><td>- <strong>结构化存储</strong><br>- 数据共享性好，冗余低<br>- 数据独立性强<br>- 由 <strong>DBMS统一管理</strong></td><td>现代企业信息系统、MIS 系统等</td></tr><tr><td><strong>高级数据库管理阶段</strong></td><td>- 支持<strong>分布式、大数据、对象、图形、云原生</strong>等特性<br>- 支持复杂查询、事务与安全机制</td><td>云数据库、分布式数据库、图数据库等</td></tr></tbody></table><h3 id="数据库系统特点" tabindex="-1"><a class="header-anchor" href="#数据库系统特点"><span>数据库系统特点</span></a></h3><ul><li>数据结构化</li><li>数据的共享度高</li><li>数据的独立性高</li><li>统一管理和控制</li></ul><h3 id="数据模型组成要素" tabindex="-1"><a class="header-anchor" href="#数据模型组成要素"><span>数据模型组成要素</span></a></h3><table><thead><tr><th>要素</th><th>说明</th><th>快速识记关键词</th></tr></thead><tbody><tr><td><strong>数据结构</strong></td><td>描述数据库的组成对象和对象之间的联系，包括类型、属性、关系等</td><td><strong>结构=对象 + 联系</strong></td></tr><tr><td><strong>数据操作</strong></td><td>对数据库中对象实例执行的各种操作（如查询、插入、删除、更新）以及操作规则</td><td><strong>操作=能做啥 + 规则</strong></td></tr><tr><td><strong>完整性约束</strong></td><td>用于<strong>约束和规范数据</strong>的合法性，保证数据库中数据的<strong>正确性与一致性</strong></td><td><strong>约束=规则 + 依赖性</strong></td></tr></tbody></table><h3 id="数据模型" tabindex="-1"><a class="header-anchor" href="#数据模型"><span>数据模型</span></a></h3><table><thead><tr><th>数据模型</th><th>结构特征</th><th>优点/特点</th><th>口诀速记</th></tr></thead><tbody><tr><td><strong>层次模型</strong></td><td>- 一棵树结构<br>- 只有一个根结点<br>- 每个结点仅有一个双亲</td><td>- 层次清晰，结构简单<br>- 查询速度快<br>- 插入/修改不方便</td><td><strong>一根一亲是层次</strong></td></tr><tr><td><strong>网状模型</strong></td><td>- 图结构<br>- 结点可有多个双亲<br>- 可有多个根</td><td>- 灵活性强，能描述复杂关系<br>- 查询复杂，开发难度高</td><td><strong>多根多亲是网状</strong></td></tr><tr><td><strong>关系模型</strong></td><td>- 表格结构（关系）<br>- 用元组、属性、关系表示一切</td><td>- 建立在<strong>数学基础</strong>上<br>- 概念<strong>单一清晰</strong><br>- 易学易用<br> - 数据<strong>独立性高</strong>、<strong>安全性好</strong></td><td><strong>全是表，关系妙</strong></td></tr></tbody></table><h3 id="关系模型的数据模型" tabindex="-1"><a class="header-anchor" href="#关系模型的数据模型"><span>关系模型的数据模型</span></a></h3><table><thead><tr><th>术语</th><th>对应解释</th><th>速记法</th></tr></thead><tbody><tr><td><strong>关系 relation</strong></td><td>一张表（如学生登记表）</td><td>📋“表就是关系”</td></tr><tr><td><strong>元组 tuple</strong></td><td>表中一行数据（如一个学生记录）</td><td>📌“一行一元组”</td></tr><tr><td><strong>属性 attribute</strong></td><td>表中的一列（如学号、姓名等）</td><td>📊“一列一属性”</td></tr><tr><td><strong>码 key</strong></td><td>能唯一标识一行的字段（如学号）</td><td>🔐“唯一识别靠主码”</td></tr><tr><td><strong>域 domain</strong></td><td>某属性的取值范围（如性别 ∈ {男, 女}）</td><td>📎“属性取值有范围，称为域”</td></tr><tr><td><strong>分量 component</strong></td><td>一个元组中的某个属性值（如“王小明”）</td><td>🔍“属性值称作分量”</td></tr></tbody></table><h4 id="举例讲解" tabindex="-1"><a class="header-anchor" href="#举例讲解"><span>举例讲解</span></a></h4><p>表名（关系）：学生登记表</p><table><thead><tr><th>学号</th><th>姓名</th><th>年龄</th><th>性别</th><th>系名</th><th>年级</th></tr></thead><tbody><tr><td>2013004</td><td>王小明</td><td>19</td><td>女</td><td>社会学</td><td>2013</td></tr><tr><td>2013006</td><td>黄大鹏</td><td>20</td><td>男</td><td>商品学</td><td>2013</td></tr><tr><td>2013008</td><td>张文斌</td><td>18</td><td>女</td><td>法律</td><td>2013</td></tr></tbody></table><ul><li><p><strong>关系（Relation）</strong>：这整张表就是一个关系，名字可以叫 <code>学生</code>。</p></li><li><p><strong>元组（Tuple）</strong>：每一行是一个元组，例如 <code>（2013004, 王小明, 19, 女, 社会学, 2013）</code></p></li><li><p><strong>属性（Attribute）</strong>：如“姓名”“年龄”等列。</p></li><li><p><strong>码（Key）</strong>：学号唯一标识学生，是主码。</p></li><li><p><strong>域（Domain）</strong>：</p><ul><li><code>性别属性 ∈ {男，女}</code></li><li><code>年龄属性 ∈ \\[15, 45]</code></li></ul></li><li><p><strong>分量</strong>：王小明、20、社会学等具体值就是分量。</p></li></ul><h3 id="关系模型性质" tabindex="-1"><a class="header-anchor" href="#关系模型性质"><span>关系模型性质</span></a></h3><table><thead><tr><th>编号</th><th>性质说明</th><th>关键词</th><th>速记法</th></tr></thead><tbody><tr><td>1</td><td>行的顺序无关，元组互换不影响关系</td><td>行可调</td><td>“行换不影响”</td></tr><tr><td>2</td><td>分量必须是原子量，不可再分</td><td>原子分量</td><td>“分量不可再拆”</td></tr><tr><td>3</td><td>不能有重复行，元组必须唯一</td><td>无重复元组</td><td>“两行不能完全相同”</td></tr><tr><td>4</td><td>属性名唯一，不能有相同列名</td><td>列名唯一</td><td>“列名不能重样”</td></tr><tr><td>5</td><td>列的顺序无关，属性互换不影响</td><td>列可调</td><td>“列调换无影响”</td></tr><tr><td>6</td><td>同列数据来自同一域，即数据类型一致</td><td>同域同质</td><td>“同一列必须同质”</td></tr></tbody></table><h3 id="er图" tabindex="-1"><a class="header-anchor" href="#er图"><span>ER图</span></a></h3><table><thead><tr><th>内容</th><th>图形表示</th><th>快速记法</th></tr></thead><tbody><tr><td><strong>E-R 图：实体-联系图</strong></td><td>-</td><td>“E 是 Entity，R 是 Relationship”</td></tr><tr><td><strong>图形表示法</strong></td><td></td><td></td></tr><tr><td>实体（Entity）</td><td>▭ 矩形</td><td>“实体是框——人、物、概念” 矩形框内写明实体名</td></tr><tr><td>属性（Attribute）</td><td>⬭ 椭圆</td><td>“属性像蛋——描述实体的特征” 用无向边将其对应的实体型连接起来</td></tr><tr><td>联系（Relationship）</td><td>◇ 菱形</td><td>“联系是菱形——谁和谁之间的关系” 菱形框内写明联系名，并用无向边分别与有关实体型连接起来</td></tr><tr><td><strong>联系类型（基数）</strong></td><td></td><td>“一多多多要分清”</td></tr><tr><td>一对一（1:1）</td><td></td><td>每个实体只联系一个实体</td></tr><tr><td>一对多（1:N）</td><td></td><td>一个对应多个</td></tr><tr><td>多对一（N:1）</td><td></td><td>多个对应一个</td></tr><tr><td>多对多（M:N）</td><td></td><td>多个对多个</td></tr></tbody></table><ul><li>实体:客观存在并且可以区分的具体事物或者抽象概念。</li><li>实体型:实体集的名称及其所有属性名的集合称为实体型。</li><li>实体集:所有属性名完全相同的实体集合在一起， 称为实体集。</li></ul><h3 id="三级模式" tabindex="-1"><a class="header-anchor" href="#三级模式"><span>三级模式</span></a></h3><table><thead><tr><th>名称</th><th>又称</th><th>面向对象</th><th>作用 &amp; 特点</th></tr></thead><tbody><tr><td><strong>模式</strong></td><td>逻辑模式</td><td>面向整个数据库</td><td>描述<strong>全体数据的逻辑结构</strong>，所有用户共享，<br>是数据库的“总体视图”</td></tr><tr><td><strong>外模式</strong></td><td>子模式、视图</td><td>面向用户</td><td>是<strong>每个用户看到的数据子集</strong>，用于<strong>控制访问权限、安全性、定制视图</strong></td></tr><tr><td><strong>内模式</strong></td><td>存储模式</td><td>面向系统</td><td>定义<strong>物理存储方式</strong>：如何在磁盘上保存数据（如索引结构、压缩、加密）</td></tr></tbody></table><h3 id="二级映像" tabindex="-1"><a class="header-anchor" href="#二级映像"><span>二级映像</span></a></h3><table><thead><tr><th>映像名称</th><th>映射对象</th><th>作用</th><th>保证什么独立性</th><th>说明</th></tr></thead><tbody><tr><td>外模式/模式映像</td><td>外模式 ←→ 模式</td><td>定义用户视图和逻辑结构的对应</td><td><strong>逻辑独立性</strong></td><td>模式改了，外模式不动，程序不改</td></tr><tr><td>模式/内模式映像</td><td>模式 ←→ 内模式</td><td>定义逻辑结构和物理结构的对应</td><td><strong>物理独立性</strong></td><td>存储方式改了，模式不动，程序不改</td></tr></tbody></table><h2 id="关系数据库概论" tabindex="-1"><a class="header-anchor" href="#关系数据库概论"><span>关系数据库概论</span></a></h2><h3 id="关系数据结构" tabindex="-1"><a class="header-anchor" href="#关系数据结构"><span>关系数据结构</span></a></h3><table><thead><tr><th>名称</th><th>作用</th><th>特点</th></tr></thead><tbody><tr><td>超码 Superkey</td><td>能唯一识别元组</td><td>可能含多余字段</td></tr><tr><td>候选码 Candidate Key</td><td>最简超码</td><td>不能再删字段</td></tr><tr><td>主码 Primary Key</td><td>候选码中选一个做代表</td><td>只能有一个</td></tr><tr><td>外码 Foreign Key</td><td>指向别的表的主码</td><td>表间建立联系，非自己表主码</td></tr></tbody></table><h3 id="关系操作" tabindex="-1"><a class="header-anchor" href="#关系操作"><span>关系操作</span></a></h3><table><thead><tr><th>运算</th><th>符号</th><th>类似集合什么操作？</th><th>常用场景</th></tr></thead><tbody><tr><td>并</td><td>∪</td><td>集合并集</td><td>多个条件取并集</td></tr><tr><td>差</td><td>−</td><td>集合差集</td><td>去除某些元组</td></tr><tr><td>交</td><td>∩</td><td>集合交集</td><td>找共同数据</td></tr><tr><td>笛卡尔积</td><td>×</td><td>所有组合</td><td>连接前的构造中间表</td></tr><tr><td>选择</td><td>σ</td><td>筛选行</td><td><code>WHERE</code> 子句作用</td></tr><tr><td>投影</td><td>π</td><td>选列</td><td><code>SELECT</code> 子句作用</td></tr><tr><td>连接</td><td>⨝</td><td>基于笛卡尔积的筛选组合</td><td>表关联查询</td></tr><tr><td>除</td><td>÷</td><td>含义较特殊：全包含匹配</td><td>满足所有条件的筛选（高级）</td></tr></tbody></table><ul><li>关系的基本操作有五种，分别是：选择、投影、并、差、笛卡尔积</li></ul><h3 id="关系完整性" tabindex="-1"><a class="header-anchor" href="#关系完整性"><span>关系完整性</span></a></h3><table><thead><tr><th><strong>完整性类型</strong></th><th><strong>约束对象</strong></th><th><strong>规则内容</strong></th><th><strong>允许为空？</strong></th><th><strong>举例</strong></th></tr></thead><tbody><tr><td><strong>实体完整性</strong></td><td>主码（Primary Key）</td><td>每个关系必须有主码，且主码不能为空，且唯一</td><td>❌ <strong>不允许为空</strong></td><td>学生表中的 <code>学号</code> 是主码，不能为 <code>NULL</code>，不能重复</td></tr><tr><td><strong>参照完整性</strong></td><td>外码（Foreign Key）</td><td>外码必须引用另一个关系中的主码值，或者为空</td><td>✅ <strong>允许为空</strong>，但如不为空必须有效</td><td>成绩表中的 <code>学号</code> 是外码，必须能在学生表中找到对应 <code>学号</code></td></tr><tr><td><strong>用户自定义完整性</strong></td><td>任意属性（字段）</td><td>针对具体应用逻辑的业务规则（如取值范围、格式等）</td><td>看定义（由用户决定）</td><td>年龄必须大于 0；邮箱格式必须合法；性别只能是男/女等</td></tr></tbody></table><h2 id="sql" tabindex="-1"><a class="header-anchor" href="#sql"><span>SQL</span></a></h2><h3 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点</span></a></h3><table><thead><tr><th><strong>特点</strong></th><th><strong>说明</strong></th><th><strong>速记关键词</strong></th></tr></thead><tbody><tr><td>综合统一</td><td>集数据定义语言（DDL）、数据操纵语言（DML）、数据控制语言（DCL）于一体，支持数据库生命周期全部活动</td><td>统一、全功能</td></tr><tr><td>高度非过程化</td><td>用户只需关注“做什么”，不必关心“怎么做”，存取路径对用户透明，简化操作</td><td>非过程化、做什么</td></tr><tr><td>面向集合的操作方式</td><td>SQL操作的是数据集合，结果也是集合，而不是单条记录的处理</td><td>面向集合</td></tr><tr><td>一种语法多种使用</td><td>SQL既能独立执行，也能嵌入C、Java等宿主语言中使用</td><td>独立/嵌入</td></tr><tr><td>语言简洁易学</td><td>核心功能仅用九个动词实现，功能强大且语法简单</td><td>简洁、易用</td></tr></tbody></table><h3 id="模式操作" tabindex="-1"><a class="header-anchor" href="#模式操作"><span>模式操作</span></a></h3><table><thead><tr><th><strong>操作</strong></th><th><strong>SQL语句格式</strong></th><th><strong>说明</strong></th><th><strong>速记关键词</strong></th><th></th></tr></thead><tbody><tr><td>定义模式</td><td><code>CREATE SCHEMA &lt;模式名&gt; AUTHORIZATION &lt;用户名&gt;</code></td><td>创建一个新的模式，并指定所有者</td><td>创建模式、指定用户</td><td></td></tr><tr><td>删除模式</td><td><code>DROP SCHEMA &lt;模式名&gt; &lt;CASCADE RESTRICT&gt;</code></td><td>删除指定模式，<code>CASCADE</code>表示级联删除，<code>RESTRICT</code>表示限制删除</td><td>删除模式、级联/限制</td><td></td></tr></tbody></table><h3 id="基本表操作" tabindex="-1"><a class="header-anchor" href="#基本表操作"><span>基本表操作</span></a></h3><table><thead><tr><th><strong>操作</strong></th><th><strong>SQL语句格式</strong></th><th><strong>说明</strong></th><th><strong>速记关键词</strong></th><th></th></tr></thead><tbody><tr><td>定义基本表</td><td><code>CREATE TABLE &lt;表名&gt; (&lt;列名&gt; &lt;数据类型&gt; [完整性约束])</code></td><td>创建一个新的基本表</td><td>创建表、定义列、完整性约束</td><td></td></tr><tr><td>删除基本表</td><td><code>DROP TABLE &lt;表名&gt;</code></td><td>删除指定基本表</td><td>删除表</td><td></td></tr><tr><td>修改基本表</td><td><code>ALTER TABLE &lt;表名&gt; &lt;修改操作&gt;</code></td><td>修改指定基本表</td><td>修改表、修改列、修改约束</td><td></td></tr></tbody></table><h3 id="索引和视图操作" tabindex="-1"><a class="header-anchor" href="#索引和视图操作"><span>索引和视图操作</span></a></h3><table><thead><tr><th><strong>考点</strong></th><th><strong>操作</strong></th><th><strong>SQL语句格式</strong></th><th><strong>说明</strong></th><th><strong>速记关键词</strong></th></tr></thead><tbody><tr><td>索引操作</td><td>建立索引</td><td><code>CREATE INDEX &lt;索引名称&gt; ON &lt;表名&gt;(列名);</code></td><td>创建索引，提高查询效率</td><td>建立索引、加速查询</td></tr><tr><td>索引操作</td><td>删除索引</td><td><code>DROP INDEX &lt;索引名称&gt;;</code></td><td>删除指定索引</td><td>删除索引</td></tr><tr><td>视图操作</td><td>定义视图</td><td><code>CREATE VIEW &lt;视图名&gt; AS SELECT ...</code></td><td>创建一个视图，简化复杂查询</td><td>创建视图</td></tr><tr><td>视图操作</td><td>删除视图</td><td><code>DROP VIEW &lt;视图名&gt;;</code></td><td>删除指定视图</td><td>删除视图</td></tr><tr><td>视图操作</td><td>更新视图</td><td><code>UPDATE &lt;视图名&gt; SET ...</code></td><td>对视图的数据进行更新</td><td>更新视图</td></tr></tbody></table><h3 id="查询操作" tabindex="-1"><a class="header-anchor" href="#查询操作"><span>查询操作</span></a></h3><table><thead><tr><th><strong>SQL 关键字</strong></th><th><strong>作用说明</strong></th><th><strong>速记要点</strong></th></tr></thead><tbody><tr><td>ALL / DISTINCT</td><td>控制是否去重，DISTINCT 去除重复元组，ALL 保留重复元组，默认 ALL</td><td>默认 ALL，DISTINCT 去重</td></tr><tr><td>目标列表达式</td><td>查询的列或表达式，作为结果集的列名</td><td>每个表达式对应结果中的一</td></tr><tr><td>FROM</td><td>指定查询的数据来源，表或视图</td><td>可多表或视图查询</td></tr><tr><td>WHERE</td><td>过滤条件，只输出满足条件的记录</td><td>可省略，查询所有记录</td></tr><tr><td>GROUP BY</td><td>按某列分组，将具有相同值的行归为一组</td><td>分组字段值相同的元组归为一组</td></tr><tr><td>HAVING</td><td>对分组后的结果过滤，只输出满足条件的分组</td><td>只能与 GROUP BY 联合使用</td></tr><tr><td>ORDER BY</td><td>对结果排序，默认升序（ASC），可指定降序（DESC）</td><td>ASC 可省略，DESC 指定降序</td></tr></tbody></table><ul><li>聚合函数：COUNT、SUM、AVG、MAX、MIN 后面不可以加 <code>WHERE</code> 子句</li></ul><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 错误写法，聚合函数后不能直接用 WHERE</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> department, </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">COUNT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(*)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> employees</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> COUNT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(*) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">GROUP BY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> department;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 正确写法，用 HAVING 过滤聚合结果</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> department, </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">COUNT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(*)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> employees</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">GROUP BY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> department </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- group by 后面可以不加having</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">HAVING</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> COUNT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(*) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- having后面不一定非得用聚合函数，但大多数情况下是用来过滤聚合结果的</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="更新操作" tabindex="-1"><a class="header-anchor" href="#更新操作"><span>更新操作</span></a></h3><table><thead><tr><th>内容</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>插入数据 (INSERT)</td><td><code>INSERT INTO &lt;表名&gt; [(属性列表)] VALUES (常量列表);</code><br>必须为 NOT NULL 且无默认值列赋值。字符串和日期用单引号括起。</td><td><code>INSERT INTO Student (id, name) VALUES (1, &#39;张三&#39;);</code></td></tr><tr><td>修改数据 (UPDATE)</td><td><code>UPDATE &lt;表名&gt; SET 列名=表达式 [, 列名=表达式 ...] [WHERE 条件];</code><br>无 WHERE 则更新全表。</td><td><code>UPDATE Student SET age=20 WHERE id=1;</code></td></tr><tr><td>删除数据 (DELETE)</td><td><code>DELETE FROM &lt;表名&gt; [WHERE 条件];</code><br>无 WHERE 则删除所有记录但保留表结构。</td><td><code>DELETE FROM Student WHERE age&lt;18;</code></td></tr></tbody></table><h3 id="查询条件" tabindex="-1"><a class="header-anchor" href="#查询条件"><span>查询条件</span></a></h3><table><thead><tr><th>内容说明</th><th>说明示例</th></tr></thead><tbody><tr><td>比较大小：=、&gt;、&lt;、&gt;=、&lt;=、!=（&lt;&gt;）、!&gt;、!&lt;</td><td><code>age &gt;= 18</code></td></tr><tr><td>确定范围：BETWEEN…AND… 和 NOT BETWEEN…AND…</td><td><code>salary BETWEEN 3000 AND 6000</code></td></tr><tr><td>确定集合：IN</td><td><code>department IN (&#39;IT&#39;,&#39;HR&#39;)</code></td></tr><tr><td>字符匹配：LIKE 用于模糊匹配，支持通配符 <code>%</code> 和 <code>_</code></td><td><code>name LIKE &#39;J%&#39;</code></td></tr><tr><td>涉及空值查询：用 IS NULL 或 IS NOT NULL 查询空值</td><td><code>address IS NULL</code></td></tr><tr><td>多重条件：用 AND、OR 连接，AND 优先级高，括号改变优先级</td><td><code>(age &gt; 20 AND city=&#39;NY&#39;) OR salary &gt; 5000</code></td></tr></tbody></table><h2 id="安全性" tabindex="-1"><a class="header-anchor" href="#安全性"><span>安全性</span></a></h2><h3 id="安全级别标准" tabindex="-1"><a class="header-anchor" href="#安全级别标准"><span>安全级别标准</span></a></h3><table><thead><tr><th>级别</th><th>说明</th></tr></thead><tbody><tr><td>D级</td><td>最低级别，未满足更高级别安全要求。</td></tr><tr><td>C1级</td><td>提供基本的自主安全保护（DAC），实现用户和数据分离，限制权限传播。</td></tr><tr><td>C2级</td><td>最低档安全产品，支持用户身份注册、审计和资源隔离，细化DAC控制。</td></tr><tr><td>B1级</td><td>标记安全保护，数据加标记，对主体和客体执行强制访问控制（MAC）和审计。</td></tr><tr><td>B2级</td><td>结构化保护，形式化安全策略，所有主体和客体均受DAC和MAC控制。</td></tr><tr><td>B3级</td><td>安全域，满足访问监控器要求，增强审计和系统恢复能力。</td></tr><tr><td>A1级</td><td>验证设计，在B3基础上提供系统的形式化设计说明和验证，确保安全措施真正实施。</td></tr></tbody></table><h3 id="安全机制" tabindex="-1"><a class="header-anchor" href="#安全机制"><span>安全机制</span></a></h3><table><thead><tr><th>安全机制</th><th>说明</th></tr></thead><tbody><tr><td>用户标识与鉴别</td><td>确认用户身份，如用户名、密码、生物识别等，防止冒用。</td></tr><tr><td>存取控制</td><td>控制用户对数据库对象的访问权限，限制非法访问。</td></tr><tr><td>授权与回收</td><td>给用户分配权限（授权），并在不需要时撤销权限（回收）。</td></tr><tr><td>视图机制</td><td>通过视图限制用户只能看到特定的数据，达到数据隔离和安全。</td></tr><tr><td>审计</td><td>记录数据库访问和操作日志，用于事后安全分析和责任追踪。</td></tr><tr><td>数据加密</td><td>对数据库中存储或传输的数据进行加密，保护数据机密性。</td></tr></tbody></table><h4 id="用户标识与鉴别" tabindex="-1"><a class="header-anchor" href="#用户标识与鉴别"><span>用户标识与鉴别</span></a></h4><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>用户标识</td><td>通过用户名或用户标识号表示身份，系统核对合法性，决定是否允许访问。</td></tr><tr><td>口令</td><td>用户输入密码进行身份验证，输入时屏幕不显示，保护口令安全。</td></tr><tr><td>利用个人特征</td><td>通过生物特征识别验证身份，如指纹识别、面部识别等。</td></tr><tr><td>智能卡</td><td>使用带有微处理器和存储的智能卡作为身份验证工具，安全可靠。</td></tr></tbody></table><h3 id="授权和回收" tabindex="-1"><a class="header-anchor" href="#授权和回收"><span>授权和回收</span></a></h3><h4 id="授权示例" tabindex="-1"><a class="header-anchor" href="#授权示例"><span>授权示例</span></a></h4><p><strong>例子 1：给用户 <code>alice</code> 授予对表 <code>employees</code> 的查询权限</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">GRANT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> SELECT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ON</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> employees </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">TO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> alice;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>例子 2：给用户 <code>bob</code> 授予对数据库 <code>sales_db</code> 中多个表的插入和更新权限</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">GRANT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> INSERT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">UPDATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ON</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> orders </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">TO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> bob;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">GRANT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> INSERT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">UPDATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ON</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> customers </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">TO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> bob;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>例子 3：给所有用户（PUBLIC）授予对视图 <code>public_view</code> 的查询权限</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">GRANT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> SELECT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> VIEW public_view </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">TO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> PUBLIC;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>例子 4：给用户 <code>charlie</code> 授予权限并允许他将权限继续授权给其他人</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">GRANT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">UPDATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ON</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> products </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">TO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> charlie </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WITH</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> GRANT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> OPTION</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="收回权限示例" tabindex="-1"><a class="header-anchor" href="#收回权限示例"><span>收回权限示例</span></a></h4><p><strong>例子 1：收回用户 <code>alice</code> 对表 <code>employees</code> 的查询权限</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">REVOKE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> SELECT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ON</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> employees </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> alice;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>例子 2：收回用户 <code>bob</code> 对表 <code>orders</code> 和 <code>customers</code> 的插入和更新权限</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">REVOKE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> INSERT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">UPDATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ON</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> orders </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> bob;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">REVOKE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> INSERT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">UPDATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ON</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> customers </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> bob;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>例子 3：收回所有用户对视图 <code>public_view</code> 的查询权限</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">REVOKE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> SELECT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> VIEW public_view </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> PUBLIC;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>例子 4：级联收回权限（例如收回 <code>charlie</code> 权限，并自动收回他授权给他人的权限）</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">REVOKE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">UPDATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ON</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> products </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> charlie CASCADE;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="数据库角色" tabindex="-1"><a class="header-anchor" href="#数据库角色"><span>数据库角色</span></a></h3><table><thead><tr><th>考点</th><th>内容</th><th>SQL 语句示例</th><th>说明</th></tr></thead><tbody><tr><td>角色创建</td><td>创建一个空角色</td><td><code>CREATE ROLE role_name;</code></td><td>角色刚创建时没有任何权限</td></tr><tr><td>给角色授权</td><td>给角色授予权限</td><td><code>GRANT SELECT, INSERT ON TABLE employees TO role_name;</code></td><td>数据库管理员或用户授予角色权限</td></tr><tr><td>角色赋予</td><td>将一个角色授予用户或其他角色</td><td><code>GRANT role1 TO role2;</code><br><code>GRANT role_name TO user_name WITH ADMIN OPTION;</code></td><td>角色继承权限，<code>WITH ADMIN OPTION</code>可授权再授予权限</td></tr><tr><td>收回角色权限</td><td>收回角色的权限</td><td><code>REVOKE SELECT ON TABLE employees FROM role_name;</code></td><td>由角色创建者或拥有ADMIN OPTION的用户执行</td></tr></tbody></table><h2 id="关系数据查询与优化" tabindex="-1"><a class="header-anchor" href="#关系数据查询与优化"><span>关系数据查询与优化</span></a></h2><h3 id="一般步骤" tabindex="-1"><a class="header-anchor" href="#一般步骤"><span>一般步骤</span></a></h3><table><thead><tr><th>步骤</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>把查询转换成某种内部表示，通常用的关系数据库</td></tr><tr><td>2</td><td>把语法树转换成标准（优化）形式</td></tr><tr><td>3</td><td>选择低层的存取路径</td></tr><tr><td>4</td><td>生成查询计划，选择代价最小的</td></tr></tbody></table><h3 id="规范化" tabindex="-1"><a class="header-anchor" href="#规范化"><span>规范化</span></a></h3><h4 id="解决的问题" tabindex="-1"><a class="header-anchor" href="#解决的问题"><span>解决的问题</span></a></h4><ul><li>数据冗余：多余存在的数据</li><li>插入异常：应能插入的数据不能插入</li><li>删除异常：不应该删除的数据被删除</li><li>修改异常：造成数据不一致的现象</li></ul><h4 id="规范化理论" tabindex="-1"><a class="header-anchor" href="#规范化理论"><span>规范化理论</span></a></h4><table><thead><tr><th>范式</th><th>主要要求</th><th>解决问题</th><th>例子说明</th></tr></thead><tbody><tr><td><strong>第一范式 (1NF)</strong></td><td>属性值都是原子值，不可再分</td><td>数据项必须原子化，避免嵌套结构</td><td>学生表中“爱好”不能写成“篮球,足球”，而要拆成多行或单独字段保存</td></tr><tr><td><strong>第二范式 (2NF)</strong></td><td>满足1NF，且非主属性完全函数依赖于主码</td><td>消除部分函数依赖，解决数据冗余和插入异常</td><td>学生成绩表：主键(学号,课程号)，成绩属性依赖于两个字段，学生姓名只依赖学号，拆成学生表和成绩表</td></tr><tr><td><strong>第三范式 (3NF)</strong></td><td>满足2NF，消除非主属性对主码的传递函数依赖</td><td>消除传递依赖，避免数据更新异常</td><td>员工表有部门号、部门名称，部门名称依赖部门号，拆成员工表和部门表</td></tr><tr><td><strong>BCNF</strong></td><td>关系中所有决定因素都是候选码，消除主属性对主码的部分与传递依赖</td><td>解决特殊依赖问题</td><td>表中候选键有多个，且存在决定非候选键的非候选键的情况，需要拆分</td></tr><tr><td><strong>第四范式 (4NF)</strong></td><td>消除多值依赖，即一个属性集多值依赖于主键，不允许出现多对多多值依赖</td><td>解决多值依赖导致的冗余</td><td>学生-课程-兴趣三元关系，一个学生可能选多门课程，也可能有多种兴趣，拆成学生-课程表和学生-兴趣表</td></tr><tr><td><strong>第五范式 (5NF)</strong></td><td>每个连接依赖都是由候选码决定的，消除连接依赖，保证无冗余</td><td>解决复杂的连接依赖导致数据冗余</td><td>订单中商品、供应商、客户三者相关关系，拆分为三个表，保证恢复原始数据需要连接三张表</td></tr></tbody></table><h4 id="_1nf-例子" tabindex="-1"><a class="header-anchor" href="#_1nf-例子"><span>1NF 例子</span></a></h4><table><thead><tr><th>学号</th><th>姓名</th><th>爱好</th><th></th></tr></thead><tbody><tr><td>001</td><td>张三</td><td>篮球,足球</td><td>← 不符合1NF，爱好不是原子值</td></tr></tbody></table><p>改成：</p><table><thead><tr><th>学号</th><th>姓名</th><th>爱好</th><th></th></tr></thead><tbody><tr><td>001</td><td>张三</td><td>篮球</td><td></td></tr><tr><td>001</td><td>张三</td><td>足球</td><td>← 符合1NF</td></tr></tbody></table><h4 id="_2nf-例子" tabindex="-1"><a class="header-anchor" href="#_2nf-例子"><span>2NF 例子</span></a></h4><p>假设成绩表：</p><table><thead><tr><th>学号</th><th>课程号</th><th>学生姓名</th><th>成绩</th></tr></thead><tbody><tr><td>001</td><td>01</td><td>张三</td><td>90</td></tr></tbody></table><p>主键是(学号,课程号)，学生姓名只依赖学号，存在部分依赖，违反2NF。</p><p>拆分为：</p><p>学生表：</p><table><thead><tr><th>学号</th><th>学生姓名</th></tr></thead><tbody><tr><td>001</td><td>张三</td></tr></tbody></table><p>成绩表：</p><table><thead><tr><th>学号</th><th>课程号</th><th>成绩</th></tr></thead><tbody><tr><td>001</td><td>01</td><td>90</td></tr></tbody></table><h4 id="_3nf-例子" tabindex="-1"><a class="header-anchor" href="#_3nf-例子"><span>3NF 例子</span></a></h4><p>员工表：</p><table><thead><tr><th>员工号</th><th>员工名</th><th>部门号</th><th>部门名称</th></tr></thead><tbody><tr><td>1001</td><td>李四</td><td>D01</td><td>财务部</td></tr></tbody></table><p>部门名称依赖部门号，部门号依赖员工号，传递依赖。拆分为：</p><p>员工表：</p><table><thead><tr><th>员工号</th><th>员工名</th><th>部门号</th></tr></thead><tbody><tr><td>1001</td><td>李四</td><td>D01</td></tr></tbody></table><p>部门表：</p><table><thead><tr><th>部门号</th><th>部门名称</th></tr></thead><tbody><tr><td>D01</td><td>财务部</td></tr></tbody></table><h4 id="bcnf-例子" tabindex="-1"><a class="header-anchor" href="#bcnf-例子"><span>BCNF 例子</span></a></h4><p>假设表：</p><table><thead><tr><th>学生</th><th>课程</th><th>教师</th></tr></thead><tbody><tr><td>张三</td><td>数学</td><td>王老师</td></tr><tr><td>张三</td><td>语文</td><td>李老师</td></tr></tbody></table><p>假设约束：</p><ul><li>学生 + 课程 决定教师（一个学生一个课程对应一个教师）</li><li>教师 决定课程（一个教师只教一门课）</li></ul><p>这里“教师→课程”不是候选码，违反BCNF，需要拆分。</p><p>拆分为：</p><table><thead><tr><th>教师</th><th>课程</th></tr></thead><tbody><tr><td>王老师</td><td>数学</td></tr><tr><td>李老师</td><td>语文</td></tr></tbody></table><p>和</p><table><thead><tr><th>学生</th><th>教师</th></tr></thead><tbody><tr><td>张三</td><td>王老师</td></tr><tr><td>张三</td><td>李老师</td></tr></tbody></table><h4 id="_4nf-例子" tabindex="-1"><a class="header-anchor" href="#_4nf-例子"><span>4NF 例子</span></a></h4><p>学生-课程-兴趣：</p><table><thead><tr><th>学生</th><th>课程</th><th>兴趣</th></tr></thead><tbody><tr><td>张三</td><td>数学</td><td>足球</td></tr><tr><td>张三</td><td>数学</td><td>篮球</td></tr><tr><td>张三</td><td>语文</td><td>足球</td></tr><tr><td>张三</td><td>语文</td><td>篮球</td></tr></tbody></table><p>兴趣和课程无直接关联，存在多值依赖。拆分为两张表：</p><p>学生-课程：</p><table><thead><tr><th>学生</th><th>课程</th></tr></thead><tbody><tr><td>张三</td><td>数学</td></tr><tr><td>张三</td><td>语文</td></tr></tbody></table><p>学生-兴趣：</p><table><thead><tr><th>学生</th><th>兴趣</th></tr></thead><tbody><tr><td>张三</td><td>足球</td></tr><tr><td>张三</td><td>篮球</td></tr></tbody></table><h4 id="_5nf-例子" tabindex="-1"><a class="header-anchor" href="#_5nf-例子"><span>5NF 例子</span></a></h4><p>订单系统中有3个属性：</p><table><thead><tr><th>订单号</th><th>商品</th><th>供应商</th></tr></thead><tbody><tr><td>001</td><td>A</td><td>X</td></tr><tr><td>001</td><td>B</td><td>X</td></tr><tr><td>001</td><td>A</td><td>Y</td></tr></tbody></table><p>商品供应商和订单之间有连接依赖。5NF保证这张表可以被拆分成更细的表，通过连接能完全恢复原始数据，且无冗余。</p><p>拆分为：</p><p>订单-商品：</p><table><thead><tr><th>订单号</th><th>商品</th></tr></thead><tbody><tr><td>001</td><td>A</td></tr><tr><td>001</td><td>B</td></tr></tbody></table><p>订单-供应商：</p><table><thead><tr><th>订单号</th><th>供应商</th></tr></thead><tbody><tr><td>001</td><td>X</td></tr></tbody></table><p>商品-供应商：</p><table><thead><tr><th>商品</th><th>供应商</th></tr></thead><tbody><tr><td>A</td><td>X</td></tr><tr><td>A</td><td>Y</td></tr></tbody></table><h2 id="数据库设计" tabindex="-1"><a class="header-anchor" href="#数据库设计"><span>数据库设计</span></a></h2><h3 id="设计方法" tabindex="-1"><a class="header-anchor" href="#设计方法"><span>设计方法</span></a></h3><table><thead><tr><th>设计方法</th><th>主要内容与特点</th></tr></thead><tbody><tr><td><strong>新奥尔良设计方法</strong></td><td>- 将数据库设计分成四大阶段：需求分析、概念设计、逻辑设计、物理设计。<br>- 每阶段采用与阶段相符的辅助手段。<br>- 属于规范化的设计流程。</td></tr><tr><td><strong>基于 E-R 模型的数据库设计方法</strong></td><td>- 主要用于概念设计阶段。<br>- 通过构建实体-联系图（E-R图）描述数据库的结构和联系。<br>- 广泛采用的设计方法。</td></tr><tr><td><strong>第三范式的设计方法</strong></td><td>- 依据关系数据库的规范化理论。<br>- 在逻辑设计阶段采用，确保关系满足第三范式，减少冗余和异常。</td></tr><tr><td><strong>ODL（对象定义语言）方法</strong></td><td>- 面向对象的数据库设计方法。<br>- 用面向对象的术语和概念描述数据库结构。</td></tr></tbody></table><h3 id="设计策略" tabindex="-1"><a class="header-anchor" href="#设计策略"><span>设计策略</span></a></h3><table><thead><tr><th>策略名称</th><th>主要内容</th></tr></thead><tbody><tr><td><strong>自顶向下设计策略</strong></td><td>- 从一般到特殊的开发方式。<br>- 从企业高层管理开始，分析企业的目标、对象和策略，构建抽象的高层数据模型。<br>- 逐步细化模型，直到识别出具体数据库和应用。</td></tr><tr><td><strong>自底向上设计策略</strong></td><td>- 逆向于自顶向下，从细节到整体。<br>- 从基层业务和数据处理开始分析设计。<br>- 将各个系统综合集中，再分析设计上一层系统，直到构建完整的信息系统。</td></tr></tbody></table><h3 id="设计步骤" tabindex="-1"><a class="header-anchor" href="#设计步骤"><span>设计步骤</span></a></h3><table><thead><tr><th>阶段</th><th>内容说明</th></tr></thead><tbody><tr><td><strong>需求分析</strong></td><td>- 准确了解和分析用户需求（数据和处理）。<br>- 是设计的基础且最困难耗时。<br>- 需求分析不足会导致设计返工。</td></tr><tr><td><strong>概念结构设计</strong></td><td>- 通过综合、归纳、抽象用户需求，形成与具体DBMS无关的概念模型（如E-R模型）。</td></tr><tr><td><strong>逻辑结构设计</strong></td><td>- 将概念结构转换成具体DBMS支持的数据模型（关系模型等），并对模型进行优化。</td></tr><tr><td><strong>物理结构设计</strong></td><td>- 根据应用环境选择适合的存储结构和存取方法，实现逻辑模型的物理存储。</td></tr><tr><td><strong>数据库实施</strong></td><td>- 利用DBMS语言和宿主语言建立数据库、编写调试程序、组织数据导入、进行试运行。</td></tr><tr><td><strong>系统运行与维护</strong></td><td>- 应用系统试运行后正式运行。<br>- 在运行过程中持续评估、调整和修改。<br>- 设计过程是不断反复完善的过程。</td></tr></tbody></table><h3 id="dba-数据库管理员-database-administrator-工作内容" tabindex="-1"><a class="header-anchor" href="#dba-数据库管理员-database-administrator-工作内容"><span>DBA（数据库管理员 Database Administrator）工作内容</span></a></h3><table><thead><tr><th>DBA 工作内容</th><th>具体说明</th></tr></thead><tbody><tr><td><strong>数据库的转储和恢复</strong></td><td>- 制定转储计划，保障故障发生时能快速恢复数据库至一致状态。<br>- 尽量减少对数据库的破坏。</td></tr><tr><td><strong>数据库的安全性与完整性控制</strong></td><td>- 根据实际需求调整安全控制，如数据密级变化、用户权限变动。<br>- 修改和维护数据库完整性约束，保证数据有效。</td></tr><tr><td><strong>数据库性能监督、分析与改造</strong></td><td>- 利用 DBMS 提供的性能检测工具监控系统。<br>- 分析性能数据，判断是否需要优化，如调整物理参数、重组织数据库。</td></tr><tr><td><strong>数据库重组织与重构造</strong></td><td>- 随着数据库运行，数据增删改导致存储碎片和性能下降。<br>- DBA进行重组织或部分重组织提升存储效率和访问性能。</td></tr></tbody></table><h3 id="er图的冲突" tabindex="-1"><a class="header-anchor" href="#er图的冲突"><span>ER图的冲突</span></a></h3><table><thead><tr><th>冲突类型</th><th>具体内容</th><th>解决思路（简述）</th></tr></thead><tbody><tr><td><strong>属性冲突</strong></td><td>- 属性域冲突：同一属性在不同系统中类型、取值范围或集合不同（如零件号整数vs字符型，年龄整数vs出生日期）。<br>- 属性取值单位冲突：同一属性单位不同（如重量有公斤、斤、克等）。</td><td>统一属性类型、定义标准单位与格式</td></tr><tr><td><strong>命名冲突</strong></td><td>- 同名异义：不同含义的对象却用同一名字。<br>- 异名同义：同一对象在不同系统中名字不一样。</td><td>统一命名规范，建立映射关系</td></tr><tr><td><strong>结构冲突</strong></td><td>- 同一对象在不同系统抽象不同。<br>- 同一实体的属性个数、属性顺序不同。</td><td>属性并集，调整属性次序，形成统一结构</td></tr></tbody></table><h2 id="数据库恢复技术" tabindex="-1"><a class="header-anchor" href="#数据库恢复技术"><span>数据库恢复技术</span></a></h2><ul><li>Begin Transaction 开始事务</li><li>Commit 提交事务</li><li>Rollback 回滚事务</li></ul><h3 id="事务" tabindex="-1"><a class="header-anchor" href="#事务"><span>事务</span></a></h3><table><thead><tr><th>考点</th><th>内容</th><th>速记点</th></tr></thead><tbody><tr><td><strong>事务的 ACID 性质</strong></td><td>事务应满足4个基本性质：原子性、一致性、隔离性、持续性（持久性）</td><td>1. <strong>原子性</strong>：事务中的操作要么全部完成，要么全部不做<br>2. <strong>一致性</strong>：事务执行后数据库从一个一致状态转到另一个一致状态<br>3. <strong>隔离性</strong>：事务执行过程不被其他事务干扰，各事务相互隔离<br>4. <strong>持续性</strong>：事务一旦提交，对数据库的改变永久保存，后续故障不影响</td></tr><tr><td><strong>事务的 ACID 实现过程</strong></td><td>事务4性质由数据库管理系统（DBMS）的不同子系统保证</td><td>1. 原子性由事务管理子系统实现<br>2. 一致性由完整性子系统实现<br>3. 隔离性由并发控制子系统实现<br>4. 持续性由恢复管理子系统实现</td></tr></tbody></table><h3 id="故障和恢复技术" tabindex="-1"><a class="header-anchor" href="#故障和恢复技术"><span>故障和恢复技术</span></a></h3><table><thead><tr><th>类别</th><th>故障描述</th><th>恢复关键机制</th><th>关键操作速记</th></tr></thead><tbody><tr><td>🔸事务故障</td><td>程序主动/被动终止、断电崩溃</td><td>UNDO 撤销事务</td><td>反向扫描日志，执行逆操作（写入“更新前的值”）</td></tr><tr><td>🔹系统故障</td><td>系统崩溃、断电等，内存数据丢失</td><td>UNDO + REDO</td><td>1. 正向日志：找 UNDO/REDO 队列<br>2. UNDO：反向写入旧值<br>3. REDO：正向写入新值</td></tr><tr><td>🔺介质故障</td><td>磁盘损坏、数据和日志文件同时丢失（最严重）</td><td>备份 + REDO</td><td>1. 装入最近一次转储（备份）<br>2. 装入日志副本<br>3. 扫描日志重做已提交事务</td></tr></tbody></table><h4 id="事务故障恢复" tabindex="-1"><a class="header-anchor" href="#事务故障恢复"><span>事务故障恢复</span></a></h4><table><thead><tr><th>分类</th><th>内容</th></tr></thead><tbody><tr><td>🔹 <strong>速记点 1</strong></td><td><strong>事务故障</strong>：事务未执行完就中止，需<strong>撤销其已对数据库的修改</strong>，称为 UNDO。</td></tr><tr><td>📂 <strong>日志处理步骤</strong></td><td>恢复子系统通过<strong>反向扫描日志</strong>，恢复被中断事务的执行前状态。</td></tr><tr><td>步骤一（1）</td><td><strong>反向扫描日志文件</strong>（从后往前）查找该事务的更新操作。</td></tr><tr><td>步骤二（2）</td><td>对每条更新记录执行<strong>逆操作</strong>（UNDO）：</td></tr><tr><td></td><td>- 插入操作 → 执行删除（原值为空）<br> - 删除操作 → 执行插入<br> - 修改操作 → 用旧值覆盖新值</td></tr><tr><td>步骤三（3）</td><td>继续反向扫描，查找该事务的其他更新操作，并同样执行 UNDO。</td></tr><tr><td>步骤四（4）</td><td>一直处理到遇到该事务的<strong>开始标记</strong>，此时恢复结束。</td></tr><tr><td>💡 说明</td><td>过程由系统自动完成，对用户透明，<strong>无需人工干预</strong>。</td></tr></tbody></table><h4 id="系统故障恢复" tabindex="-1"><a class="header-anchor" href="#系统故障恢复"><span>系统故障恢复</span></a></h4><table><thead><tr><th>分类</th><th>内容</th></tr></thead><tbody><tr><td>🔹 <strong>速记点 2</strong></td><td><strong>系统故障</strong>：如断电/系统崩溃，需根据日志<strong>撤销未完成事务（UNDO）</strong>，<strong>重做已提交事务（REDO）</strong>。</td></tr><tr><td>📂 <strong>日志处理步骤</strong></td><td>通过<strong>日志扫描</strong>识别哪些事务要撤销，哪些事务要重做。</td></tr><tr><td>步骤一（1）</td><td><strong>正向扫描日志</strong>：</td></tr><tr><td></td><td>- 找出已提交事务（有 BEGIN 和 COMMIT）→ 加入 <strong>REDO-LIST</strong></td></tr><tr><td></td><td>- 找出未完成事务（只有 BEGIN 无 COMMIT）→ 加入 <strong>UNDO-LIST</strong></td></tr><tr><td>步骤二（2）</td><td><strong>对 UNDO-LIST 执行撤销操作（UNDO）</strong>：</td></tr><tr><td></td><td>- <strong>反向扫描日志</strong>，每条更新操作执行逆操作（写入旧值）</td></tr><tr><td>步骤三（3）</td><td><strong>对 REDO-LIST 执行重做操作（REDO）</strong>：</td></tr><tr><td></td><td>- <strong>正向扫描日志</strong>，每条更新操作重新执行（写入新值）</td></tr><tr><td>💡 说明</td><td>UNDO 撤销未完成事务，REDO 重做已提交事务；该过程由系统自动执行，对用户透明。</td></tr></tbody></table><h4 id="介质故障恢复" tabindex="-1"><a class="header-anchor" href="#介质故障恢复"><span>介质故障恢复</span></a></h4><ul><li>恢复方法是重装数据库，然后重做已完成的事务</li></ul><table><thead><tr><th>步骤</th><th>内容</th></tr></thead><tbody><tr><td>1️⃣</td><td><strong>装入数据库最近一次的备份副本</strong>（即最近一次转储），恢复到<strong>转储时刻的一致状态</strong></td></tr><tr><td>2️⃣</td><td><strong>装入转储结束时刻的日志文件副本</strong>，扫描找出已提交事务，加入 <strong>REDO-LIST</strong></td></tr><tr><td>3️⃣</td><td><strong>正向扫描日志</strong>，对 REDO-LIST 中事务执行重做（写入更新后的值），恢复到最近一致状态</td></tr></tbody></table><h3 id="数据库镜像" tabindex="-1"><a class="header-anchor" href="#数据库镜像"><span>数据库镜像</span></a></h3><ul><li>出现介质故障，可由镜像磁盘继续提供使用，同时数据库管理系统自动利用镜像磁盘数据进行数据库的恢复，不需要关闭系统和重装数据库副本</li><li>可以用于并发操作，即当一个用户对数据加排他锁修改数据时，其他用户可以读镜像数据库上的数据，而不必等待该用户释放锁</li></ul><h2 id="并发控制" tabindex="-1"><a class="header-anchor" href="#并发控制"><span>并发控制</span></a></h2><h3 id="并发问题" tabindex="-1"><a class="header-anchor" href="#并发问题"><span>并发问题</span></a></h3><table><thead><tr><th>异常类型</th><th>描述速记</th><th>举例简要说明</th><th>事务隔离级别影响</th></tr></thead><tbody><tr><td>🔸丢失修改（Lost Update）</td><td>两个事务<strong>同时修改</strong>同一数据，一个事务的修改被另一个覆盖</td><td>T1 和 T2 都修改余额，T2 提交覆盖 T1 的更新</td><td><strong>读已提交</strong>即可避免</td></tr><tr><td>🔹读脏数据（Dirty Read）</td><td>一个事务读取到<strong>另一个事务尚未提交的数据</strong>，但后者回滚导致读到“脏”内容</td><td>T1 修改余额但未提交，T2 读取该余额，T1 回滚 → T2读的是脏数据</td><td><strong>读已提交</strong>可避免</td></tr><tr><td>🔺不可重复读（Non-repeatable Read）</td><td>一个事务两次读取同一数据，<strong>中间被其他事务修改并提交</strong>，两次读结果不同</td><td>T1 先读余额，T2 修改并提交，T1 再读余额发现变了</td><td><strong>可重复读</strong>可避免</td></tr><tr><td>🔻幻读（Phantom Read）*</td><td>一个事务两次查询满足某条件的多行记录，<strong>中间有事务新增/删除满足条件的记录</strong></td><td>T1 查找工资 &gt;5000 的人，T2 插入一个新员工工资 6000，T1 再查数量变化</td><td><strong>可串行化</strong>才完全避免</td></tr></tbody></table><h3 id="三级封锁协议" tabindex="-1"><a class="header-anchor" href="#三级封锁协议"><span>三级封锁协议</span></a></h3><table><thead><tr><th>封锁协议级别</th><th>加锁要求</th><th>解决的问题</th><th>仍然存在的问题</th></tr></thead><tbody><tr><td>🔹一级封锁协议</td><td>对<strong>修改的数据</strong>加 <strong>X 锁（排他锁）</strong>，<strong>直到事务结束才释放</strong></td><td>✅防止丢失修改（Lost Update）</td><td>❌可能读脏数据，❌不可重复读</td></tr><tr><td>🔸二级封锁协议</td><td>在一级基础上，<strong>对读取的数据加 S 锁（共享锁）</strong>，<strong>读完立即释放</strong></td><td>✅防止丢失修改，✅防止读脏数据</td><td>❌不可重复读仍存在</td></tr><tr><td>🔺三级封锁协议</td><td>在二级基础上，<strong>S/X 锁直到事务结束才释放</strong></td><td>✅防止丢失修改，✅防止读脏数据，✅可重复读</td><td>✅实现可重复读，无幻读保障</td></tr></tbody></table><h3 id="_2pl-两阶段封锁" tabindex="-1"><a class="header-anchor" href="#_2pl-两阶段封锁"><span>2PL（两阶段封锁）</span></a></h3><table><thead><tr><th>阶段</th><th>内容</th></tr></thead><tbody><tr><td>第一阶段</td><td>加锁阶段：事务可以获得锁，但不能释放锁。</td></tr><tr><td>第二阶段</td><td>解锁阶段：事务可以释放锁，但不能获得新锁。</td></tr><tr><td>说明</td><td>两阶段封锁协议可以解决丢失修改、读脏数据、不可重复读的问题。</td></tr></tbody></table><h4 id="_2pl-类型" tabindex="-1"><a class="header-anchor" href="#_2pl-类型"><span>2PL 类型</span></a></h4><table><thead><tr><th>类型</th><th>是否可串行化</th><th>是否避免死锁</th><th>说明</th></tr></thead><tbody><tr><td><strong>基本两级封锁协议</strong></td><td>✅</td><td>❌</td><td>标准2PL，存在死锁风险</td></tr><tr><td><strong>严格两级封锁协议</strong></td><td>✅</td><td>❌</td><td>所有<strong>X锁</strong>直到事务结束才释放</td></tr><tr><td><strong>强两级封锁协议</strong></td><td>✅</td><td>❌</td><td><strong>S锁/X锁</strong>都直到事务结束才释放</td></tr><tr><td><strong>保守（静态）2PL</strong></td><td>✅</td><td>✅</td><td>开始前一次性申请所有锁，避免死锁</td></tr></tbody></table><h3 id="活锁和死锁" tabindex="-1"><a class="header-anchor" href="#活锁和死锁"><span>活锁和死锁</span></a></h3><table><thead><tr><th>问题类型</th><th>定义</th><th>表现特征</th><th>示例</th><th>解决方法</th></tr></thead><tbody><tr><td><strong>活锁</strong>（Livelock）</td><td>事务不断尝试执行但始终无法完成</td><td>一直请求资源、<strong>未被阻塞</strong>，但始终<strong>让给其他事务</strong></td><td>T1释放锁后系统把锁给T3，T2始终请求不到</td><td>✅ 先来先服务（FIFO）<br>✅ 公平调度策略<br>✅ 引入随机等待或优先级</td></tr><tr><td><strong>死锁</strong>（Deadlock）</td><td>事务<strong>相互等待对方资源</strong>，形成循环依赖</td><td>所有事务都<strong>被阻塞</strong>，永远无法继续</td><td>T1锁A → 请求B<br>T2锁B → 请求A</td><td>✅ 超时机制<br>✅ 资源一次性申请（预占）<br>✅ 死锁检测与恢复</td></tr></tbody></table><h3 id="死锁预防和解除" tabindex="-1"><a class="header-anchor" href="#死锁预防和解除"><span>死锁预防和解除</span></a></h3><table><thead><tr><th>分类</th><th>名称</th><th>核心原理</th><th>示例 / 特点</th><th>优缺点</th></tr></thead><tbody><tr><td>🔒 <strong>死锁预防</strong></td><td><strong>一次封锁法</strong></td><td>事务一次性加锁所有资源，否则不能执行</td><td>T1 启动时就加锁 R1、R2，防止后续等待</td><td>✅ 简单<br>❌ 不灵活、资源利用率低</td></tr><tr><td>🔒</td><td><strong>顺序封锁法</strong></td><td>所有事务按<strong>统一顺序</strong>加锁，避免循环等待</td><td>在B树中按从上到下顺序加锁</td><td>✅ 易实现<br>❌ 编码复杂、数据结构相关</td></tr><tr><td>🚨 <strong>死锁诊断</strong></td><td><strong>超时法</strong></td><td>等待超时即认为死锁</td><td>T2 等待超时，系统中止T2</td><td>✅ 实现简单<br>❌ 易误判或延迟处理</td></tr><tr><td>🚨</td><td><strong>事务等待图（Wait-for Graph）</strong></td><td>构图找<strong>是否有回路</strong> → 有则死锁</td><td>T1→T2→T3→T1 构成环路表示死锁</td><td>✅ 精确检测<br>❌ 算法复杂，需周期检测</td></tr></tbody></table>',176)]))}]]),i=JSON.parse('{"path":"/zh/posts/review/%E6%95%B0%E6%8D%AE%E5%BA%93.html","title":"数据库","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-07-21T00:00:00.000Z","category":["Learning Records"],"tag":["Review"],"description":"数据库 数据库概念 数据库系统是由数据库、数据库管理系统（及其应用开发工具）、应用程序和数据库管理员（Data Base Administrator，DBA）组成的存储、管理、处理和维护数据的系统 数据库技术发展 数据库系统特点 数据结构化 数据的共享度高 数据的独立性高 统一管理和控制 数据模型组成要素 数据模型 关系模型的数据模型 举例讲解 表名（...","head":[["meta",{"property":"og:url","content":"https://crc011220.github.io/zh/posts/review/%E6%95%B0%E6%8D%AE%E5%BA%93.html"}],["meta",{"property":"og:site_name","content":"Ruochen Chen"}],["meta",{"property":"og:title","content":"数据库"}],["meta",{"property":"og:description","content":"数据库 数据库概念 数据库系统是由数据库、数据库管理系统（及其应用开发工具）、应用程序和数据库管理员（Data Base Administrator，DBA）组成的存储、管理、处理和维护数据的系统 数据库技术发展 数据库系统特点 数据结构化 数据的共享度高 数据的独立性高 统一管理和控制 数据模型组成要素 数据模型 关系模型的数据模型 举例讲解 表名（..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-07T11:01:58.000Z"}],["meta",{"property":"article:tag","content":"Review"}],["meta",{"property":"article:published_time","content":"2025-07-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-07T11:01:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据库\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-07-21T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-07T11:01:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ruochen Chen\\"}]}"]]},"headers":[{"level":2,"title":"数据库概念","slug":"数据库概念","link":"#数据库概念","children":[{"level":3,"title":"数据库技术发展","slug":"数据库技术发展","link":"#数据库技术发展","children":[]},{"level":3,"title":"数据库系统特点","slug":"数据库系统特点","link":"#数据库系统特点","children":[]},{"level":3,"title":"数据模型组成要素","slug":"数据模型组成要素","link":"#数据模型组成要素","children":[]},{"level":3,"title":"数据模型","slug":"数据模型","link":"#数据模型","children":[]},{"level":3,"title":"关系模型的数据模型","slug":"关系模型的数据模型","link":"#关系模型的数据模型","children":[]},{"level":3,"title":"关系模型性质","slug":"关系模型性质","link":"#关系模型性质","children":[]},{"level":3,"title":"ER图","slug":"er图","link":"#er图","children":[]},{"level":3,"title":"三级模式","slug":"三级模式","link":"#三级模式","children":[]},{"level":3,"title":"二级映像","slug":"二级映像","link":"#二级映像","children":[]}]},{"level":2,"title":"关系数据库概论","slug":"关系数据库概论","link":"#关系数据库概论","children":[{"level":3,"title":"关系数据结构","slug":"关系数据结构","link":"#关系数据结构","children":[]},{"level":3,"title":"关系操作","slug":"关系操作","link":"#关系操作","children":[]},{"level":3,"title":"关系完整性","slug":"关系完整性","link":"#关系完整性","children":[]}]},{"level":2,"title":"SQL","slug":"sql","link":"#sql","children":[{"level":3,"title":"特点","slug":"特点","link":"#特点","children":[]},{"level":3,"title":"模式操作","slug":"模式操作","link":"#模式操作","children":[]},{"level":3,"title":"基本表操作","slug":"基本表操作","link":"#基本表操作","children":[]},{"level":3,"title":"索引和视图操作","slug":"索引和视图操作","link":"#索引和视图操作","children":[]},{"level":3,"title":"查询操作","slug":"查询操作","link":"#查询操作","children":[]},{"level":3,"title":"更新操作","slug":"更新操作","link":"#更新操作","children":[]},{"level":3,"title":"查询条件","slug":"查询条件","link":"#查询条件","children":[]}]},{"level":2,"title":"安全性","slug":"安全性","link":"#安全性","children":[{"level":3,"title":"安全级别标准","slug":"安全级别标准","link":"#安全级别标准","children":[]},{"level":3,"title":"安全机制","slug":"安全机制","link":"#安全机制","children":[]},{"level":3,"title":"授权和回收","slug":"授权和回收","link":"#授权和回收","children":[]},{"level":3,"title":"数据库角色","slug":"数据库角色","link":"#数据库角色","children":[]}]},{"level":2,"title":"关系数据查询与优化","slug":"关系数据查询与优化","link":"#关系数据查询与优化","children":[{"level":3,"title":"一般步骤","slug":"一般步骤","link":"#一般步骤","children":[]},{"level":3,"title":"规范化","slug":"规范化","link":"#规范化","children":[]}]},{"level":2,"title":"数据库设计","slug":"数据库设计","link":"#数据库设计","children":[{"level":3,"title":"设计方法","slug":"设计方法","link":"#设计方法","children":[]},{"level":3,"title":"设计策略","slug":"设计策略","link":"#设计策略","children":[]},{"level":3,"title":"设计步骤","slug":"设计步骤","link":"#设计步骤","children":[]},{"level":3,"title":"DBA（数据库管理员 Database Administrator）工作内容","slug":"dba-数据库管理员-database-administrator-工作内容","link":"#dba-数据库管理员-database-administrator-工作内容","children":[]},{"level":3,"title":"ER图的冲突","slug":"er图的冲突","link":"#er图的冲突","children":[]}]},{"level":2,"title":"数据库恢复技术","slug":"数据库恢复技术","link":"#数据库恢复技术","children":[{"level":3,"title":"事务","slug":"事务","link":"#事务","children":[]},{"level":3,"title":"故障和恢复技术","slug":"故障和恢复技术","link":"#故障和恢复技术","children":[]},{"level":3,"title":"数据库镜像","slug":"数据库镜像","link":"#数据库镜像","children":[]}]},{"level":2,"title":"并发控制","slug":"并发控制","link":"#并发控制","children":[{"level":3,"title":"并发问题","slug":"并发问题","link":"#并发问题","children":[]},{"level":3,"title":"三级封锁协议","slug":"三级封锁协议","link":"#三级封锁协议","children":[]},{"level":3,"title":"2PL（两阶段封锁）","slug":"_2pl-两阶段封锁","link":"#_2pl-两阶段封锁","children":[]},{"level":3,"title":"活锁和死锁","slug":"活锁和死锁","link":"#活锁和死锁","children":[]},{"level":3,"title":"死锁预防和解除","slug":"死锁预防和解除","link":"#死锁预防和解除","children":[]}]}],"git":{"createdTime":1753006022000,"updatedTime":1754564518000,"contributors":[{"name":"Ruochen Chen","email":"ruocchen1220@gmail.com","commits":4}]},"readingTime":{"minutes":28.52,"words":8555},"filePathRelative":"zh/posts/review/数据库.md","localizedDate":"2025年7月21日","excerpt":"\\n<h2>数据库概念</h2>\\n<ul>\\n<li>数据库系统是由数据库、数据库管理系统（及其应用开发工具）、应用程序和数据库管理员（Data Base Administrator，DBA）组成的存储、管理、处理和维护数据的系统</li>\\n</ul>\\n<h3>数据库技术发展</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>阶段</th>\\n<th>主要特点</th>\\n<th>使用场景举例</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><strong>人工管理阶段</strong></td>\\n<td>- 数据<strong>不保存</strong><br>- 应用程序直接管理数据<br>- 数据面向应用<br>- 无独立性</td>\\n<td>最早期（如纸质记录、临时内存）</td>\\n</tr>\\n<tr>\\n<td><strong>文件系统管理阶段</strong></td>\\n<td>- 数据存放于<strong>文件</strong><br>- 程序与数据有<strong>一定独立性</strong><br>- 文件种类繁多<br>- 冗余高、共享差</td>\\n<td>早期计算机系统、C语言读写文件</td>\\n</tr>\\n<tr>\\n<td><strong>数据库管理阶段</strong></td>\\n<td>- <strong>结构化存储</strong><br>- 数据共享性好，冗余低<br>- 数据独立性强<br>- 由 <strong>DBMS统一管理</strong></td>\\n<td>现代企业信息系统、MIS 系统等</td>\\n</tr>\\n<tr>\\n<td><strong>高级数据库管理阶段</strong></td>\\n<td>- 支持<strong>分布式、大数据、对象、图形、云原生</strong>等特性<br>- 支持复杂查询、事务与安全机制</td>\\n<td>云数据库、分布式数据库、图数据库等</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}')}}]);