"use strict";(self.webpackChunkpersonalweb=self.webpackChunkpersonalweb||[]).push([[8299],{6262:(s,i)=>{i.A=(s,i)=>{const e=s.__vccOpts||s;for(const[s,a]of i)e[s]=a;return e}},8596:(s,i,e)=>{e.r(i),e.d(i,{comp:()=>l,data:()=>r});var a=e(641);const t=e.p+"assets/img/nextjs-file-based-routing.405bd290.png",n={},l=(0,e(6262).A)(n,[["render",function(s,i){return(0,a.uX)(),(0,a.CE)("div",null,i[0]||(i[0]=[(0,a.Fv)('<h1 id="nextjs-file-based-routing" tabindex="-1"><a class="header-anchor" href="#nextjs-file-based-routing"><span>NextJS File-Based Routing</span></a></h1><h3 id="terminology" tabindex="-1"><a class="header-anchor" href="#terminology"><span>Terminology</span></a></h3><ul><li><strong>Route Segment</strong>: Each folder in a route represents a route segment. These segments map directly to parts of the URL path.</li><li><strong>Dynamic Routes</strong>: Using brackets <code>[]</code> around a filename allows you to match dynamic segments, enabling parameters in URLs.</li><li><strong>Nested Routes</strong>: By nesting folders inside one another, you can create nested routes that reflect deeper URL structures.</li><li><strong>Special Files</strong>: Certain filenames have special meanings in Next.js, such as <code>index.js</code>, which serves as the default page for a directory, or <code>[...slug].js</code> for catch-all routes.</li></ul><h2 id="how-it-works" tabindex="-1"><a class="header-anchor" href="#how-it-works"><span>How It Works</span></a></h2><p>In Next.js, when a file is added to the <code>pages</code> directory, it becomes automatically available as a route. For instance, if you add a file named <code>about.js</code> inside the <code>pages</code> directory, it will be accessible at <code>/about</code>. Similarly, placing an <code>index.js</code> file within any directory makes that directory&#39;s root accessible via its name only. The router supports nested files too; creating a nested folder structure results in similarly structured URL paths <a href="7">ty-reference</a>.</p><p>Dynamic routes are particularly powerful because they allow you to handle variable parts of URLs. For example, a file named <code>[id].js</code> inside a <code>blog</code> directory would match URLs like <code>/blog/1</code>, <code>/blog/2</code>, etc., where <code>id</code> acts as a parameter that can be accessed within the component using <code>useRouter</code> from <code>next/router</code>.</p><p>For more complex scenarios, Next.js also supports optional catch-all routes with <code>[...slug].js</code>, which matches all possible subpaths after the specified segment. This feature is especially useful for blogs or documentation sites where articles might have multiple levels of hierarchy <a href="7">ty-reference</a>.</p><figure><img src="'+t+'" alt="nextjs-file-based-routing.png" tabindex="0" loading="lazy"><figcaption>nextjs-file-based-routing.png</figcaption></figure><h2 id="userouter" tabindex="-1"><a class="header-anchor" href="#userouter"><span>useRouter</span></a></h2><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">useRouter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;next/router&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MyComponent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> router</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> useRouter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // Access current path, query parameters, etc.</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">router</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">pathname</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Outputs the current pathname</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">router</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">query</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);    </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Outputs the query parameters object</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">      {</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* Component content */</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  );</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="usage-of-router-query" tabindex="-1"><a class="header-anchor" href="#usage-of-router-query"><span>Usage of router.query</span></a></h3><p>router.query is an object containing all query parameters. When the page renders initially, router.query might be empty because the client has not finished loading. To ensure correct reading of query parameters, you should wait until router.isReady becomes true, indicating that all initial loading, including parsing of query parameters, has been completed.</p><p>For dynamic routes, like defining [id].js to match paths such as /post/123, router.query.id will contain the specific ID value (e.g., 123). Similarly, if query parameters are passed through links, such as /search?term=react&amp;sort=popular, you can access these values via router.query.term and router.query.sort.</p><h3 id="defining-links" tabindex="-1"><a class="header-anchor" href="#defining-links"><span>Defining Links</span></a></h3><p>To define links that perform these client-side transitions, you typically import the <code>Link</code> component from <code>next/link</code> and wrap anchor tags (<code>&lt;a&gt;</code>) within it. Hereâ€™s an example demonstrating how this works:</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> Link</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;next/link&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Home</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ul</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">li</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Link</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;Home&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Link</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">li</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">li</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Link</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/about&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;About Us&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Link</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">li</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">li</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Link</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/blog/hello-world&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;Blog Post&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Link</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">li</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ul</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  );</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> Home</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="usage-of-router-push-router-replace" tabindex="-1"><a class="header-anchor" href="#usage-of-router-push-router-replace"><span>Usage of router.push(), router.replace()</span></a></h3><p>navigate to a specific route, e.g. router.push(/hello-world) replace the current page to a specific route, e.g. router.push(/hello-world)</p><h3 id="customize-404-page" tabindex="-1"><a class="header-anchor" href="#customize-404-page"><span>Customize 404 page</span></a></h3><p>create a 404.js under pages folder</p><h3 id="images" tabindex="-1"><a class="header-anchor" href="#images"><span>Images</span></a></h3><p>Need to be stored under the public folder, will be treated statically by next.js Non-page components should not be included under the pages folder</p>',22)]))}]]),r=JSON.parse('{"path":"/posts/nextjs/2.html","title":"NextJS File-Based Routing","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2024-12-09T00:00:00.000Z","category":["Learning Records"],"tag":["NextJS"],"description":"NextJS File-Based Routing Terminology Route Segment: Each folder in a route represents a route segment. These segments map directly to parts of the URL path. Dynamic Routes: Usi...","head":[["meta",{"property":"og:url","content":"https://crc011220.github.io/personalweb/personalweb/posts/nextjs/2.html"}],["meta",{"property":"og:site_name","content":"Richard Chen"}],["meta",{"property":"og:title","content":"NextJS File-Based Routing"}],["meta",{"property":"og:description","content":"NextJS File-Based Routing Terminology Route Segment: Each folder in a route represents a route segment. These segments map directly to parts of the URL path. Dynamic Routes: Usi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-12-16T08:16:28.000Z"}],["meta",{"property":"article:tag","content":"NextJS"}],["meta",{"property":"article:published_time","content":"2024-12-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-16T08:16:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"NextJS File-Based Routing\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-09T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-16T08:16:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Richard Chen\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":3,"title":"Terminology","slug":"terminology","link":"#terminology","children":[]},{"level":2,"title":"How It Works","slug":"how-it-works","link":"#how-it-works","children":[]},{"level":2,"title":"useRouter","slug":"userouter","link":"#userouter","children":[{"level":3,"title":"Usage of router.query","slug":"usage-of-router-query","link":"#usage-of-router-query","children":[]},{"level":3,"title":"Defining Links","slug":"defining-links","link":"#defining-links","children":[]},{"level":3,"title":"Usage of router.push(), router.replace()","slug":"usage-of-router-push-router-replace","link":"#usage-of-router-push-router-replace","children":[]},{"level":3,"title":"Customize 404 page","slug":"customize-404-page","link":"#customize-404-page","children":[]},{"level":3,"title":"Images","slug":"images","link":"#images","children":[]}]}],"git":{"createdTime":1733833775000,"updatedTime":1734336988000,"contributors":[{"name":"Ruochen Chen","email":"ruocchen1220@gmail.com","commits":3}]},"readingTime":{"minutes":1.88,"words":564},"filePathRelative":"posts/nextjs/2.md","localizedDate":"December 9, 2024","excerpt":"\\n<h3>Terminology</h3>\\n<ul>\\n<li><strong>Route Segment</strong>: Each folder in a route represents a route segment. These segments map directly to parts of the URL path.</li>\\n<li><strong>Dynamic Routes</strong>: Using brackets <code>[]</code> around a filename allows you to match dynamic segments, enabling parameters in URLs.</li>\\n<li><strong>Nested Routes</strong>: By nesting folders inside one another, you can create nested routes that reflect deeper URL structures.</li>\\n<li><strong>Special Files</strong>: Certain filenames have special meanings in Next.js, such as <code>index.js</code>, which serves as the default page for a directory, or <code>[...slug].js</code> for catch-all routes.</li>\\n</ul>","autoDesc":true}')}}]);