"use strict";(self.webpackChunkpersonalweb=self.webpackChunkpersonalweb||[]).push([[1501],{6262:(e,t)=>{t.A=(e,t)=>{const i=e.__vccOpts||e;for(const[e,a]of t)i[e]=a;return i}},7517:(e,t,i)=>{i.r(t),i.d(t,{comp:()=>r,data:()=>s});var a=i(641);const n={},r=(0,i(6262).A)(n,[["render",function(e,t){return(0,a.uX)(),(0,a.CE)("div",null,t[0]||(t[0]=[(0,a.Fv)('<h1 id="full-update-vs-rolling-update" tabindex="-1"><a class="header-anchor" href="#full-update-vs-rolling-update"><span>Full Update vs. Rolling Update</span></a></h1><p>Full updates and rolling updates are two common methods for system updates, particularly in service deployment and application upgrades. Here’s a comparison of their differences and characteristics:</p><h2 id="_1-full-update" tabindex="-1"><a class="header-anchor" href="#_1-full-update"><span>1. Full Update</span></a></h2><ul><li><strong>Definition</strong>: A full update replaces all service instances or system components at once during the update process.</li><li><strong>Characteristics</strong>: <ul><li><strong>Completed Quickly</strong>: Since everything is replaced at once, the update process is typically fast.</li><li><strong>Service Interruption</strong>: This often requires a short downtime, causing the service to be unavailable (unless a blue-green deployment or similar technique is used to minimize disruption).</li><li><strong>Higher Risk</strong>: Replacing everything at once can make rollback difficult if issues arise.</li></ul></li><li><strong>Suitable Scenarios</strong>: Ideal for smaller systems, updates during low-traffic periods, or applications that do not require high business continuity.</li></ul><h2 id="_2-rolling-update" tabindex="-1"><a class="header-anchor" href="#_2-rolling-update"><span>2. Rolling Update</span></a></h2><ul><li><strong>Definition</strong>: A rolling update gradually replaces service instances, updating the system in phases.</li><li><strong>Characteristics</strong>: <ul><li><strong>Phased Update</strong>: Only a subset of instances is updated at a time, with the remaining instances continuing to serve traffic. After one batch is updated, the next batch is updated.</li><li><strong>No Service Interruption</strong>: Since some instances are always available, the service typically remains uninterrupted.</li><li><strong>Lower Risk</strong>: Allows for real-time monitoring during the update. If issues occur, the update can be paused or rolled back.</li></ul></li><li><strong>Suitable Scenarios</strong>: Suitable for systems with high availability requirements, especially in microservices architectures or containerized environments (e.g., Kubernetes), where the service must remain available during the update process.</li></ul><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><ul><li><strong>Full Update</strong> is simpler and faster but has downtime risks and higher rollback costs.</li><li><strong>Rolling Update</strong> is preferred for systems requiring high availability, allowing updates without downtime and enabling easier monitoring and rollback.</li></ul>',8)]))}]]),s=JSON.parse('{"path":"/posts/kubernetes/2.html","title":"Full Update vs. Rolling Update","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2024-11-06T00:00:00.000Z","category":["Learning Records"],"tag":["Kubernetes"],"description":"Full Update vs. Rolling Update Full updates and rolling updates are two common methods for system updates, particularly in service deployment and application upgrades. Here’s a ...","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://crc011220.github.io/personalweb/personalweb/zh/posts/kubernetes/2.html"}],["meta",{"property":"og:url","content":"https://crc011220.github.io/personalweb/personalweb/posts/kubernetes/2.html"}],["meta",{"property":"og:site_name","content":"Richard Chen"}],["meta",{"property":"og:title","content":"Full Update vs. Rolling Update"}],["meta",{"property":"og:description","content":"Full Update vs. Rolling Update Full updates and rolling updates are two common methods for system updates, particularly in service deployment and application upgrades. Here’s a ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-06T11:59:48.000Z"}],["meta",{"property":"article:tag","content":"Kubernetes"}],["meta",{"property":"article:published_time","content":"2024-11-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-06T11:59:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Full Update vs. Rolling Update\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-06T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-06T11:59:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Richard Chen\\"}]}"]]},"headers":[{"level":2,"title":"1. Full Update","slug":"_1-full-update","link":"#_1-full-update","children":[]},{"level":2,"title":"2. Rolling Update","slug":"_2-rolling-update","link":"#_2-rolling-update","children":[]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]}],"git":{"createdTime":1730894388000,"updatedTime":1730894388000,"contributors":[{"name":"Ruochen Chen","email":"ruocchen1220@gmail.com","commits":1}]},"readingTime":{"minutes":0.95,"words":286},"filePathRelative":"posts/kubernetes/2.md","localizedDate":"November 6, 2024","excerpt":"\\n<p>Full updates and rolling updates are two common methods for system updates, particularly in service deployment and application upgrades. Here’s a comparison of their differences and characteristics:</p>\\n<h2>1. Full Update</h2>\\n<ul>\\n<li><strong>Definition</strong>: A full update replaces all service instances or system components at once during the update process.</li>\\n<li><strong>Characteristics</strong>:\\n<ul>\\n<li><strong>Completed Quickly</strong>: Since everything is replaced at once, the update process is typically fast.</li>\\n<li><strong>Service Interruption</strong>: This often requires a short downtime, causing the service to be unavailable (unless a blue-green deployment or similar technique is used to minimize disruption).</li>\\n<li><strong>Higher Risk</strong>: Replacing everything at once can make rollback difficult if issues arise.</li>\\n</ul>\\n</li>\\n<li><strong>Suitable Scenarios</strong>: Ideal for smaller systems, updates during low-traffic periods, or applications that do not require high business continuity.</li>\\n</ul>","autoDesc":true}')}}]);