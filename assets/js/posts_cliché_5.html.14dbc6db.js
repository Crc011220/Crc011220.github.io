"use strict";(self.webpackChunkpersonalweb=self.webpackChunkpersonalweb||[]).push([[8739],{568:(e,i,n)=>{n.r(i),n.d(i,{comp:()=>a,data:()=>o});var t=n(641);const s={},a=(0,n(6262).A)(s,[["render",function(e,i){return(0,t.uX)(),(0,t.CE)("div",null,i[0]||(i[0]=[(0,t.Fv)('<h1 id="spring-ioc-inversion-of-control" tabindex="-1"><a class="header-anchor" href="#spring-ioc-inversion-of-control"><span>Spring IOC (Inversion of Control)</span></a></h1><p>Spring IOC (Inversion of Control) is a design principle that delegates the responsibility of creating and managing objects to the Spring container. Simply put, IOC means that instead of creating dependencies on its own, an object’s dependencies are managed and injected by an external container like the Spring IOC container.</p><h2 id="core-concepts" tabindex="-1"><a class="header-anchor" href="#core-concepts"><span>Core Concepts</span></a></h2><ol><li><p><strong>IOC Container</strong>:</p><ul><li>The Spring IOC container is the core of the Spring framework. It manages the lifecycle of objects (beans) and their dependencies, with the configuration defined in XML or annotations.</li><li>At the startup of the application, the container creates all required beans and injects them where needed.</li></ul></li><li><p><strong>Dependency Injection (DI)</strong>:</p><ul><li>DI is an implementation of IOC, where an object&#39;s dependencies are injected externally rather than being created within the object itself.</li><li>Spring supports common DI methods: <ul><li><strong>Constructor Injection</strong>: Dependencies are passed through a constructor.</li><li><strong>Setter Injection</strong>: Dependencies are passed through setter methods.</li></ul></li></ul></li></ol><h2 id="how-it-works" tabindex="-1"><a class="header-anchor" href="#how-it-works"><span>How It Works</span></a></h2><p>In traditional development, a class typically creates the dependencies it needs directly. For example, if class <code>A</code> depends on class <code>B</code>, it might look like this:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> B</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> b </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> B</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With Spring IOC, class A doesn’t create B itself. Instead, the Spring container manages the creation of B and injects it into A. Now, A only declares that it needs a B instance:</p><h2 id="field-injection" tabindex="-1"><a class="header-anchor" href="#field-injection"><span>Field Injection</span></a></h2><h3 id="field-injection-directly-injects-the-dependency-into-the-field-using-the-autowired-annotation" tabindex="-1"><a class="header-anchor" href="#field-injection-directly-injects-the-dependency-into-the-field-using-the-autowired-annotation"><span>Field Injection directly injects the dependency into the field, using the @Autowired annotation.</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Component</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Autowired</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserRepository</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> userRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="benefits-of-dependency-injection" tabindex="-1"><a class="header-anchor" href="#benefits-of-dependency-injection"><span>Benefits of Dependency Injection</span></a></h2><h4 id="loose-coupling-di-reduces-tight-coupling-between-classes-making-the-system-more-modular-and-flexible" tabindex="-1"><a class="header-anchor" href="#loose-coupling-di-reduces-tight-coupling-between-classes-making-the-system-more-modular-and-flexible"><span>Loose Coupling: DI reduces tight coupling between classes, making the system more modular and flexible.</span></a></h4><h4 id="improved-testability-di-makes-it-easy-to-replace-dependencies-with-mock-objects-which-simplifies-unit-testing" tabindex="-1"><a class="header-anchor" href="#improved-testability-di-makes-it-easy-to-replace-dependencies-with-mock-objects-which-simplifies-unit-testing"><span>Improved Testability: DI makes it easy to replace dependencies with mock objects, which simplifies unit testing.</span></a></h4><h4 id="better-maintainability-code-that-follows-di-principles-is-generally-more-modular-easier-to-maintain-and-scalable" tabindex="-1"><a class="header-anchor" href="#better-maintainability-code-that-follows-di-principles-is-generally-more-modular-easier-to-maintain-and-scalable"><span>Better Maintainability: Code that follows DI principles is generally more modular, easier to maintain, and scalable.</span></a></h4>',15)]))}]]),o=JSON.parse('{"path":"/posts/clich%C3%A9/5.html","title":"Spring IOC (Inversion of Control)","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2024-11-08T00:00:00.000Z","category":["Learning Records"],"tag":["Programmer cliché"],"description":"Spring IOC (Inversion of Control) Spring IOC (Inversion of Control) is a design principle that delegates the responsibility of creating and managing objects to the Spring contai...","head":[["meta",{"property":"og:url","content":"https://crc011220.github.io/posts/clich%C3%A9/5.html"}],["meta",{"property":"og:site_name","content":"Richard Chen"}],["meta",{"property":"og:title","content":"Spring IOC (Inversion of Control)"}],["meta",{"property":"og:description","content":"Spring IOC (Inversion of Control) Spring IOC (Inversion of Control) is a design principle that delegates the responsibility of creating and managing objects to the Spring contai..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-08T09:01:42.000Z"}],["meta",{"property":"article:tag","content":"Programmer cliché"}],["meta",{"property":"article:published_time","content":"2024-11-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-08T09:01:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring IOC (Inversion of Control)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-08T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-08T09:01:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Richard Chen\\"}]}"]]},"headers":[{"level":2,"title":"Core Concepts","slug":"core-concepts","link":"#core-concepts","children":[]},{"level":2,"title":"How It Works","slug":"how-it-works","link":"#how-it-works","children":[]},{"level":2,"title":"Field Injection","slug":"field-injection","link":"#field-injection","children":[{"level":3,"title":"Field Injection directly injects the dependency into the field, using the @Autowired annotation.","slug":"field-injection-directly-injects-the-dependency-into-the-field-using-the-autowired-annotation","link":"#field-injection-directly-injects-the-dependency-into-the-field-using-the-autowired-annotation","children":[]}]},{"level":2,"title":"Benefits of Dependency Injection","slug":"benefits-of-dependency-injection","link":"#benefits-of-dependency-injection","children":[]}],"git":{"createdTime":1731056502000,"updatedTime":1731056502000,"contributors":[{"name":"Ruochen Chen","email":"ruocchen1220@gmail.com","commits":1}]},"readingTime":{"minutes":1.05,"words":315},"filePathRelative":"posts/cliché/5.md","localizedDate":"November 8, 2024","excerpt":"\\n<p>Spring IOC (Inversion of Control) is a design principle that delegates the responsibility of creating and managing objects to the Spring container. Simply put, IOC means that instead of creating dependencies on its own, an object’s dependencies are managed and injected by an external container like the Spring IOC container.</p>","autoDesc":true}')},6262:(e,i)=>{i.A=(e,i)=>{const n=e.__vccOpts||e;for(const[e,t]of i)n[e]=t;return n}}}]);