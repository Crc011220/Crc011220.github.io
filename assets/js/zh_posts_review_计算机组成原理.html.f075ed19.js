"use strict";(self.webpackChunkpersonalweb=self.webpackChunkpersonalweb||[]).push([[8813],{6262:(t,d)=>{d.A=(t,d)=>{const r=t.__vccOpts||t;for(const[t,n]of d)r[t]=n;return r}},8899:(t,d,r)=>{r.r(d),r.d(d,{comp:()=>s,data:()=>l});var n=r(641);const e=r.p+"assets/img/computer_system.3cfe340e.png",a={},s=(0,r(6262).A)(a,[["render",function(t,d){return(0,n.uX)(),(0,n.CE)("div",null,d[0]||(d[0]=[(0,n.Fv)('<h1 id="计算机组成原理" tabindex="-1"><a class="header-anchor" href="#计算机组成原理"><span>计算机组成原理</span></a></h1><h2 id="系统概念" tabindex="-1"><a class="header-anchor" href="#系统概念"><span>系统概念</span></a></h2><h3 id="发展阶段" tabindex="-1"><a class="header-anchor" href="#发展阶段"><span>发展阶段</span></a></h3><table><thead><tr><th>阶段</th><th>技术基础</th><th>存储技术</th><th>编程语言</th><th>特点</th></tr></thead><tbody><tr><td>第一代（1940s-1950s）</td><td><strong>电子管</strong></td><td>鼠笼式延迟线、磁鼓</td><td>机器语言</td><td>体积大、功耗高、运算慢、<strong>I/O 很慢</strong>、可存储信息</td></tr><tr><td>第二代（1950s-1960s）</td><td><strong>晶体管</strong></td><td><strong>磁芯存储器</strong></td><td><strong>汇编语言</strong></td><td>更小更快、更稳定、更省电</td></tr><tr><td>第三代（1960s-1970s）</td><td><strong>中小规模集成电路（SSI/MSI）</strong></td><td>磁芯/半导体混合</td><td>高级语言出现</td><td><strong>操作系统</strong>问世，批处理多道</td></tr><tr><td>第四代（1970s-至今）</td><td><strong>大规模/超大规模集成电路（LSI/VLSI）</strong></td><td>半导体存储器</td><td>C语言等高级语言广泛</td><td><strong>微处理器</strong>诞生，计算机普及化，出现个人电脑、网络、AI</td></tr></tbody></table><h3 id="计算机的更新迭代" tabindex="-1"><a class="header-anchor" href="#计算机的更新迭代"><span>计算机的更新迭代</span></a></h3><table><thead><tr><th>驱动因素</th><th>解释</th></tr></thead><tbody><tr><td><strong>摩尔定律</strong></td><td>每 18~24 个月，芯片上的晶体管数量翻倍，计算能力大幅提高，带动软件向<strong>更高复杂度、更多功能</strong>演进</td></tr><tr><td><strong>半导体存储器的发展</strong></td><td>存储容量增大、速度提升、价格下降，推动软件具备<strong>更强数据处理和存储能力</strong>（如数据库、大型软件系统）</td></tr><tr><td><strong>微处理器的发展</strong></td><td>微处理器不断集成更多功能（如图形加速、AI指令集等），促使软件<strong>向智能化、图形化、多媒体化</strong>发展</td></tr></tbody></table><h3 id="计算机的应用" tabindex="-1"><a class="header-anchor" href="#计算机的应用"><span>计算机的应用</span></a></h3><table><thead><tr><th>应用领域</th><th>特点与说明</th></tr></thead><tbody><tr><td><strong>科学计算</strong></td><td>⭐最早应用，处理<strong>复杂公式和计算</strong>，如天体模拟、气候建模等（追求精度与性能）</td></tr><tr><td><strong>过程控制</strong></td><td>用于<strong>实时监控与控制</strong>工业流程，如自动化生产线、航天飞控系统等（实时性强）</td></tr><tr><td><strong>人工智能</strong></td><td>⭐模拟人类智能，如<strong>语音识别、图像识别、机器学习</strong>（智能化方向）</td></tr><tr><td><strong>数据处理</strong></td><td>⭐应用<strong>最广泛最重要</strong>，处理简单但<strong>量大</strong>的数据，如银行、电商、统计系统等</td></tr><tr><td><strong>计算机辅助应用</strong></td><td>提高设计制造等工作效率，包括：<br> - CAD：辅助设计<br> - CAM：辅助制造<br> - CAI：辅助教学<br> - CAT：辅助测试<br> - CAE：辅助工程分析</td></tr><tr><td><strong>多媒体应用</strong></td><td>⭐处理<strong>图像、音频、视频</strong>等多媒体数据，如<strong>游戏、电影、音乐</strong>等（多模态数据处理）</td></tr></tbody></table><h3 id="计算机的分类" tabindex="-1"><a class="header-anchor" href="#计算机的分类"><span>计算机的分类</span></a></h3><table><thead><tr><th>分类方式</th><th>类型</th><th>关键词/说明</th></tr></thead><tbody><tr><td><strong>按工作原理</strong></td><td>① 数字式</td><td>离散数据、常见如 PC、手机，操作二进制，准确、通用</td></tr><tr><td></td><td>② 模拟式</td><td>连续数据、如温度仪表、电压控制，处理模拟信号</td></tr><tr><td></td><td>③ 混合式</td><td>数字 + 模拟结合，如雷达系统、航天控制等</td></tr><tr><td><strong>按计算机性能/规模</strong></td><td>① 巨型机</td><td>国防科研、航天等超级运算（如“神威·太湖之光”）</td></tr><tr><td></td><td>② 大型/中型机</td><td>企业/科研部门使用，支持多人多任务</td></tr><tr><td></td><td>③ 小型机</td><td>用于小型机构、部门、办公系统</td></tr><tr><td></td><td>④ 微型机</td><td>个人电脑 PC、笔记本，最常见</td></tr><tr><td></td><td>⑤ 单片机</td><td>嵌入式设备控制器，如智能电饭煲、空调遥控器</td></tr></tbody></table><h3 id="计算机常见性能指标" tabindex="-1"><a class="header-anchor" href="#计算机常见性能指标"><span>计算机常见性能指标</span></a></h3><table><thead><tr><th>指标名称</th><th>含义与说明</th></tr></thead><tbody><tr><td><strong>字长</strong></td><td>CPU 一次能处理的 <strong>二进制位数</strong>，常见如 8 位、16 位、32 位、64 位；字长越大，处理能力越强</td></tr><tr><td><strong>运算速度</strong></td><td>衡量计算快慢的单位：</td></tr><tr><td></td><td>• <strong>MIPS</strong>（Million Instructions Per Second）百万条指令每秒</td></tr><tr><td></td><td>• <strong>MFLOPS</strong>（Million Floating-point Operations Per Second）百万次浮点运算/秒</td></tr><tr><td></td><td>• <strong>CPI</strong>（Cycles Per Instruction）执行一条指令所需的时钟周期数，越小越快</td></tr><tr><td><strong>内存容量</strong></td><td>常用单位之间换算：</td></tr><tr><td></td><td>• 1KB = 1024B</td></tr><tr><td></td><td>• 1MB = 1024KB</td></tr><tr><td></td><td>• 1GB = 1024MB</td></tr><tr><td></td><td>• 1TB = 1024GB</td></tr></tbody></table><h3 id="冯诺伊曼计算机的特点" tabindex="-1"><a class="header-anchor" href="#冯诺伊曼计算机的特点"><span>冯诺伊曼计算机的特点</span></a></h3><ul><li><strong>五大组成部分</strong>：运算器、控制器、存储器、输入设备、输出设备</li><li><strong>程序存储原理</strong>：指令和数据在存储器中<strong>同等地位</strong>，<strong>按地址访问</strong></li><li><strong>二进制编码</strong>：指令和数据都以<strong>二进制形式</strong>存储</li><li><strong>指令格式</strong>：每条指令 = <strong>操作码（干什么）+ 地址码（找谁干）</strong></li><li><strong>顺序执行 + 条件跳转</strong>：指令通常<strong>顺序执行</strong>，也可<strong>根据条件跳转</strong>执行顺序</li></ul><h3 id="计算机系统层次结构" tabindex="-1"><a class="header-anchor" href="#计算机系统层次结构"><span>计算机系统层次结构</span></a></h3><table><thead><tr><th>层级</th><th>名称</th><th>特点</th><th>执行主体</th></tr></thead><tbody><tr><td>第 1 级</td><td>微程序机器层</td><td>真实硬件层，执行微指令</td><td>机器硬件</td></tr><tr><td>第 2 级</td><td>传统机器语言层</td><td>机器语言层，微程序解释执行机器指令系统</td><td>微程序</td></tr><tr><td>第 3 级</td><td>操作系统层</td><td>系统软件层，提供管理资源的服务（如进程、文件、设备等）</td><td>操作系统（由机器指令+广义指令实现）</td></tr><tr><td>第 4 级</td><td>汇编语言层</td><td>提供<strong>符号化语言</strong>，便于与机器层交流，接近硬件层</td><td>汇编程序</td></tr><tr><td>第 5 级</td><td>高级语言层</td><td>面向用户，接近自然语言，便于开发应用程序</td><td>编译器或解释器</td></tr></tbody></table><h3 id="计算机语言" tabindex="-1"><a class="header-anchor" href="#计算机语言"><span>计算机语言</span></a></h3><table><thead><tr><th>语言类型</th><th>特点</th><th>处理方式</th></tr></thead><tbody><tr><td><strong>机器语言</strong></td><td>- 又称二进制代码语言<br>- 计算机唯一能直接识别和执行的语言<br>- 编程复杂，需要记忆二进制指令编码</td><td>计算机硬件直接执行</td></tr><tr><td><strong>汇编语言</strong></td><td>- 用符号代替机器指令的二进制码<br>- 需要汇编程序（汇编器）翻译成机器语言才能执行</td><td>汇编程序将汇编语言翻译成机器语言</td></tr><tr><td><strong>高级语言</strong></td><td>- 接近自然语言，便于人类编写<br>- 需要编译程序把代码转换成汇编语言，再经过汇编器生成机器语言<br>或直接翻译成机器语言</td><td>先编译成汇编语言（或直接机器语言），再执行</td></tr></tbody></table><h3 id="语言处理程序" tabindex="-1"><a class="header-anchor" href="#语言处理程序"><span>语言处理程序</span></a></h3><table><thead><tr><th>类型</th><th>特点</th><th>举例</th></tr></thead><tbody><tr><td><strong>解释型</strong></td><td>- 逐句解释执行程序代码<br>- 边解释边执行，执行效率相对较低<br>- 灵活，便于调试</td><td>BASIC、Python</td></tr><tr><td><strong>编译型</strong></td><td>- 将程序源代码一次性编译成目标文件（如.obj文件）<br>- 编译完成后，运行效率较高</td><td>C、C++</td></tr></tbody></table><h3 id="cpu-的和它的主要性能指标" tabindex="-1"><a class="header-anchor" href="#cpu-的和它的主要性能指标"><span>CPU 的和它的主要性能指标</span></a></h3><ul><li>CPU包含运算器（对数据加工处理的中心）和控制器（计算机的控制中心）</li><li>双核表示CPU上集成的两个运算核心</li><li>主频 (Main Frequency): 也叫时钟频率，单位是MHz，用来表示CPU的运算速度。主频 = 外频 × 倍频系数。</li><li>外频 (External Frequency): 是CPU的基准频率，单位也是MHz，表示CPU与主板同步运行的速度。</li><li>倍频系数 (Multiplier): 指CPU主频与外频之间的相对比例关系。</li><li>前端总线 (FSB) 频率 (Front Side Bus Frequency): 也叫总线频率，是CPU与内存直接交换数据的速度。</li><li>缓存 (Cache): 是一种能够进行高速数据交换的存储设备，它在CPU与内存交换数据之前先与CPU交换数据，因此速度很快。</li></ul><figure><img src="'+e+'" alt="计算机系统的组成" tabindex="0" loading="lazy"><figcaption>计算机系统的组成</figcaption></figure><h2 id="数据表示和运算" tabindex="-1"><a class="header-anchor" href="#数据表示和运算"><span>数据表示和运算</span></a></h2><h3 id="进制转换" tabindex="-1"><a class="header-anchor" href="#进制转换"><span>进制转换</span></a></h3><ul><li>十转成非十：整数部分∶ 除 N 取余，商为 0 时，将余数倒序输出，小数部分∶乘 N 取整数</li><li>非十转十：每位上的数码×基数的位次方，然后求和</li><li>二/八/十六进制数的互相转换：一位八/十六进制数相当于三/四位二进制数</li></ul><h4 id="例-1-十进制转二进制-整数部分" tabindex="-1"><a class="header-anchor" href="#例-1-十进制转二进制-整数部分"><span>例 1：十进制转二进制（整数部分）</span></a></h4><p>把十进制数 <strong>13</strong> 转成二进制：</p><ul><li>13 ÷ 2 = 6 余 1</li><li>6 ÷ 2 = 3 余 0</li><li>3 ÷ 2 = 1 余 1</li><li>1 ÷ 2 = 0 余 1 （停止）</li></ul><p>把余数倒序排列：<strong>1101</strong> 所以，$13_{10} = 1101_2$</p><h4 id="例-2-十进制转八进制-小数部分" tabindex="-1"><a class="header-anchor" href="#例-2-十进制转八进制-小数部分"><span>例 2：十进制转八进制（小数部分）</span></a></h4><p>把十进制小数 <strong>0.625</strong> 转成八进制小数：</p><ul><li>0.625 × 8 = 5.0 → 取整数部分5，小数部分0.0</li><li>0.0 × 8 = 0 → 取整数0</li></ul><p>所以，$0.625_{10} = 0.5_8$</p><h4 id="例-3-二进制转十进制" tabindex="-1"><a class="header-anchor" href="#例-3-二进制转十进制"><span>例 3：二进制转十进制</span></a></h4><p>把二进制数 <strong>1011</strong> 转成十进制：</p><ul><li>1×$2^3$ + 0×$2^2$ + 1×$2^1$ + 1×$2^0$</li><li>= 8 + 0 + 2 + 1 = 11</li></ul><p>所以，$1011_2 = 11_{10}$</p><h4 id="例-4-八进制和二进制互转" tabindex="-1"><a class="header-anchor" href="#例-4-八进制和二进制互转"><span>例 4：八进制和二进制互转</span></a></h4><p>八进制数 <strong>7</strong> 转二进制：</p><ul><li>7 在二进制中是 <strong>111</strong> （因为一位八进制=三位二进制）</li></ul><p>八进制数 <strong>15</strong> 转二进制：</p><ul><li>1 八进制 = 001 二进制</li><li>5 八进制 = 101 二进制</li><li>所以 15 八进制 = 001101 二进制 → 合并去前导零就是 <strong>1101</strong></li></ul><h4 id="例-5-十六进制和二进制互转" tabindex="-1"><a class="header-anchor" href="#例-5-十六进制和二进制互转"><span>例 5：十六进制和二进制互转</span></a></h4><p>十六进制数 <strong>A</strong> 转二进制：</p><ul><li>A = 10 十进制 = 1010 二进制（4位）</li></ul><p>十六进制数 <strong>2F</strong> 转二进制：</p><ul><li>2 = 0010</li><li>F = 1111</li><li>合起来是 00101111 或简写为 <strong>101111</strong></li></ul><h3 id="机器数" tabindex="-1"><a class="header-anchor" href="#机器数"><span>机器数</span></a></h3><ul><li>机器数 = 用一定规则将数转换计算机内部二进制的形式</li><li>符号位：机器数中表示正负的位，0为正，1为负，符号位放在最高位。 <ul><li>原码和反码有符号位，补码没有符号位</li></ul></li></ul><table><thead><tr><th>数字</th><th>符号位</th><th>数值位（二进制）</th><th>原码</th><th>反码</th><th>补码</th><th>说明</th></tr></thead><tbody><tr><td>+5</td><td>0</td><td>0000101</td><td>00000101</td><td>00000101</td><td>00000101</td><td><strong>正数的时候 原码=反码=补码</strong></td></tr><tr><td>-5</td><td>1</td><td>0000101</td><td>10000101</td><td>11111010 (符号位不变，数值位取反)</td><td>11111011 (反码+1)</td><td>负数：原码符号位1，反码数值位取反，补码反码+1</td></tr><tr><td>+0</td><td>0</td><td>0000000</td><td>00000000</td><td>00000000</td><td>00000000</td><td>正零</td></tr><tr><td>-0</td><td>1</td><td>0000000</td><td>10000000</td><td>11111111</td><td>00000000</td><td>反码中有-0，补码无-0</td></tr></tbody></table><h3 id="补码的计算" tabindex="-1"><a class="header-anchor" href="#补码的计算"><span>补码的计算</span></a></h3><h4 id="例子背景" tabindex="-1"><a class="header-anchor" href="#例子背景"><span>例子背景</span></a></h4><p>我们用 8 位二进制补码表示整数，范围是 -128 到 +127。</p><h4 id="补码加法举例" tabindex="-1"><a class="header-anchor" href="#补码加法举例"><span>补码加法举例</span></a></h4><p>计算：</p><p>$$ 5 + (-3) $$</p><h4 id="步骤" tabindex="-1"><a class="header-anchor" href="#步骤"><span>步骤：</span></a></h4><ul><li><p><strong>5 的二进制（补码）</strong>： 5 的原码是 <code>00000101</code>，因为是正数，补码同原码， 所以 $[5]_{补} = 00000101$</p></li><li><p><strong>-3 的补码</strong>： 3 的原码是 <code>00000011</code> 先取反：<code>11111100</code> 加1：<code>11111101</code> 所以 $[-3]_{补} = 11111101$</p></li><li><p><strong>相加</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> 00000101</span></span>\n<span class="line"><span>+11111101</span></span>\n<span class="line"><span>----------</span></span>\n<span class="line"><span> 00000010 （忽略最高位进位）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>结果</strong>：<code>00000010</code>，即十进制的 2。</p></li><li><p>验证：5 + (-3) = 2，正确。</p></li></ul><h4 id="补码减法举例" tabindex="-1"><a class="header-anchor" href="#补码减法举例"><span>补码减法举例</span></a></h4><p>计算：</p><p>$$ 5 - 3 $$</p><h4 id="步骤-1" tabindex="-1"><a class="header-anchor" href="#步骤-1"><span>步骤：</span></a></h4><ul><li><p><strong>5 的补码</strong>：同上，<code>00000101</code></p></li><li><p><strong>3 的补码</strong>：同上，<code>00000011</code></p></li><li><p><strong>求 -3 的补码</strong>（减法转加法）</p><ul><li>取3的补码 <code>00000011</code></li><li>取反：<code>11111100</code></li><li>加1：<code>11111101</code></li></ul></li><li><p><strong>相加</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> 00000101</span></span>\n<span class="line"><span>+11111101</span></span>\n<span class="line"><span>----------</span></span>\n<span class="line"><span> 00000010</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>结果</strong>：<code>00000010</code>，十进制 2。</p></li><li><p>验证：5 - 3 = 2，正确。</p></li></ul><h3 id="ieee754-标准" tabindex="-1"><a class="header-anchor" href="#ieee754-标准"><span>IEEE754 标准</span></a></h3><ul><li>IEEE 754 标准是计算机中浮点数（小数）表示和运算的国际标准。它定义了浮点数的二进制格式和计算规则，保证不同平台之间浮点运算的一致性。</li><li>一个浮点数拆成3部分：符号位、指数位、尾数 <ul><li>符号位（S）：0表示正数，1表示负数</li><li>指数位（E）：用偏移码（Bias）表示，单精度Bias=127</li><li>尾数（M）：又称有效数字或小数部分，存储的是二进制小数的“尾数”，默认最高位是隐含的1（除非是非规格化数）</li></ul></li><li>比如：符号位=0（正数），指数=2，尾数=1.625，那真实数字就是：1.625 × 2² = 6.5</li></ul><h3 id="浮点数运算过程" tabindex="-1"><a class="header-anchor" href="#浮点数运算过程"><span>浮点数运算过程</span></a></h3><table><thead><tr><th>速记点</th><th>内容说明</th><th>关键操作 / 备注</th></tr></thead><tbody><tr><td><strong>速记点1</strong></td><td><strong>对阶</strong></td><td>计算阶差，把小阶尾数右移，向大阶靠齐，确保小数点对齐</td></tr><tr><td><strong>速记点2</strong></td><td><strong>尾数求和</strong></td><td>对阶后，两个尾数按定点加减法进行运算，考虑符号位</td></tr><tr><td><strong>速记点3</strong></td><td><strong>规格化</strong></td><td>调整尾数和阶码使尾数最高位满足规范</td></tr><tr><td></td><td>- Ss1Ss2 = 00 且尾数最高位不同 → 左规（尾数左移，阶码减1）</td><td>避免溢出，尾数补足有效位</td></tr><tr><td></td><td>- Ss1Ss2 = 00 或 11 且尾数最高位相同 → 无溢出，无需调整</td><td>保持原状</td></tr><tr><td></td><td>- Ss1Ss2 = 01 或 10 → 右规（尾数右移，阶码加1），表示溢出</td><td>防止阶码越界</td></tr><tr><td><strong>速记点4</strong></td><td><strong>舍入方式</strong></td><td>两种方法：</td></tr><tr><td></td><td>- “0 舍 1 入”法：尾数右移时，丢弃最高位0舍去，1则末位加1；可能引发溢出</td><td>需再次右规</td></tr><tr><td></td><td>- 恒置“1”法：尾数右移后，尾数末位恒为1，可能使尾数变大或变小</td><td>稳定尾数长度</td></tr><tr><td><strong>速记点5</strong></td><td><strong>溢出判断</strong>（观察 Ss1Ss2）</td><td>00：正数无溢出<br>01：正溢出<br>10：负溢出<br>11：负数无溢出</td></tr></tbody></table><h3 id="非数值型数据表示方法" tabindex="-1"><a class="header-anchor" href="#非数值型数据表示方法"><span>非数值型数据表示方法</span></a></h3><table><thead><tr><th>速记点</th><th>内容说明</th><th>备注</th></tr></thead><tbody><tr><td>速记点1</td><td><strong>ASCII</strong>：美国标准信息交换码</td><td>采用1字节（8位）编码字符</td></tr><tr><td>速记点2</td><td><strong>汉字编码</strong>：多种编码方式</td><td>国标码（GB码）、输入码、机内码、字形码</td></tr><tr><td>速记点3</td><td><strong>二-十进制编码</strong>：8421 BCD码</td><td>用4位二进制表示1位十进制数字</td></tr></tbody></table><h3 id="校验码" tabindex="-1"><a class="header-anchor" href="#校验码"><span>校验码</span></a></h3><table><thead><tr><th>速记点</th><th>内容说明</th><th>备注</th></tr></thead><tbody><tr><td>速记点1</td><td><strong>奇/偶校验码</strong>：在信息码基础上加1位校验码（可加前或后），分奇校验和偶校验</td><td>用于简单检错，但检错率较低</td></tr><tr><td>速记点2</td><td><strong>CRC码（循环冗余校验码）</strong>：检错率高、开销小、实现简单，广泛用于计算机网络数据通信</td><td>目前主流的检错方法</td></tr><tr><td>速记点3</td><td><strong>海明码</strong>：多重奇偶校验码，加入多个校验位，分配校验位到不同奇偶校验组，实现多位错误检测和定位</td><td>可以检测并纠正单个位错误</td></tr></tbody></table><h2 id="系统指令与总线" tabindex="-1"><a class="header-anchor" href="#系统指令与总线"><span>系统指令与总线</span></a></h2><h3 id="指令格式" tabindex="-1"><a class="header-anchor" href="#指令格式"><span>指令格式</span></a></h3><table><thead><tr><th>指令类型</th><th>特点简述</th></tr></thead><tbody><tr><td>零地址指令</td><td>操作数隐含在栈顶，指令不带地址字段</td></tr><tr><td>一地址指令</td><td>指令带一个地址字段，另一个操作数在累加器或隐含寄存器中</td></tr><tr><td>二地址指令</td><td>指令带两个地址字段，一个为源操作数，一个为目标操作数</td></tr><tr><td>三地址指令</td><td>指令带三个地址字段，分别指定两个源操作数和一个结果存放地址</td></tr><tr><td>四地址指令</td><td>指令带四个地址字段，适合复杂操作，较少见</td></tr></tbody></table><h3 id="数据寻址方式" tabindex="-1"><a class="header-anchor" href="#数据寻址方式"><span>数据寻址方式</span></a></h3><table><thead><tr><th>寻址方式</th><th>定义说明</th><th>访问速度（大致）</th><th>备注</th></tr></thead><tbody><tr><td>立即寻址</td><td>操作数直接在指令中给出</td><td>快</td><td>操作数大小受限</td></tr><tr><td>寄存器寻址</td><td>操作数存放在寄存器中</td><td>非常快</td><td>寄存器访问速度最快</td></tr><tr><td>直接寻址</td><td>指令给出操作数在内存的地址</td><td>较慢</td><td>访问内存</td></tr><tr><td>间接寻址</td><td>指令中地址指向另一个地址，操作数在该地址处</td><td>慢</td><td>多次内存访问</td></tr><tr><td>寄存器间接寻址</td><td>地址存在寄存器中，操作数在寄存器指向的内存地址</td><td>较慢</td><td>先读寄存器，再读内存</td></tr><tr><td>基址寻址</td><td>基址寄存器的值 + 指令中的偏移量计算地址</td><td>中等</td><td>面向系统，支持动态地址</td></tr><tr><td>变址寻址</td><td>变址寄存器的值 + 偏移量计算地址</td><td>中等</td><td>面向用户，支持数组、表等访问</td></tr><tr><td>相对寻址</td><td>以程序计数器PC为基址 + 指令偏移量计算地址</td><td>中等</td><td>支持跳转、分支</td></tr><tr><td>堆栈寻址</td><td>操作数在栈顶</td><td>较快</td><td>零地址指令，多用于表达式计算</td></tr><tr><td>组合寻址（基址+变址）</td><td>用多个寄存器和偏移量组合计算操作数地址</td><td>依组合复杂度而定</td><td>用于复杂数据结构访问</td></tr></tbody></table><h3 id="risc-和-cisc-的比较" tabindex="-1"><a class="header-anchor" href="#risc-和-cisc-的比较"><span>RISC 和 CISC 的比较</span></a></h3><ul><li>RISC （Reduced Instruction Set Computer）和 CISC （Complex Instruction Set Computer）都是计算机处理器设计的两种基本思想，目的是让 CPU 更高效地执行程序指令</li></ul><table><thead><tr><th>特点</th><th>RISC（精简指令集计算机）</th><th>CISC（复杂指令集计算机）</th></tr></thead><tbody><tr><td>指令数量</td><td>指令集简单，数量较少</td><td>指令集复杂，数量较多</td></tr><tr><td>指令长度</td><td>固定长度（如32位）</td><td>长度不固定，指令长度多样</td></tr><tr><td>指令格式</td><td>结构简单，格式统一</td><td>结构复杂，格式多样</td></tr><tr><td>寻址方式</td><td>寻址方式少，主要寄存器寻址</td><td>寻址方式多样</td></tr><tr><td>存储器访问</td><td>只有加载和存储指令访问存储器</td><td>多种指令直接访问存储器</td></tr><tr><td>操作数位置</td><td>大多数操作在寄存器之间完成</td><td>操作数可以在存储器和寄存器之间</td></tr><tr><td>执行周期</td><td>大部分指令一个时钟周期完成</td><td>指令执行时间不固定，复杂指令多周期执行</td></tr><tr><td>控制方式</td><td>主要采用组合逻辑控制</td><td>采用微程序控制</td></tr><tr><td>硬件设计</td><td>硬件简单，易于实现流水线</td><td>硬件复杂，实现流水线较难</td></tr><tr><td>编译器依赖</td><td>依赖优化编译器生成高效代码</td><td>硬件复杂，减少编译器负担</td></tr><tr><td>应用示例</td><td>ARM、MIPS、PowerPC</td><td>x86架构（Intel、AMD处理器）</td></tr></tbody></table><h3 id="总线结构" tabindex="-1"><a class="header-anchor" href="#总线结构"><span>总线结构</span></a></h3><ul><li>总线：连接各个功能部件的信息传输线，是各个功能部件共享的传输介质</li></ul><table><thead><tr><th>总线结构类型</th><th>说明</th></tr></thead><tbody><tr><td>单总线结构</td><td>用一条系统总线连接 CPU、内存、I/O 等所有功能部件，结构简单但易发生总线冲突</td></tr><tr><td>双总线结构</td><td>增加了存储总线，专门负责 CPU 与主存之间高速数据传输，提高存储访问效率</td></tr><tr><td>三总线结构</td><td>在双总线结构基础上增加 I/O 总线，多个外设通过 I/O 总线与通道通信，改善外设数据传输效率</td></tr></tbody></table><h3 id="总线特性" tabindex="-1"><a class="header-anchor" href="#总线特性"><span>总线特性</span></a></h3><table><thead><tr><th>特性类型</th><th>内容说明</th></tr></thead><tbody><tr><td>机械特性</td><td>总线连接的物理标准，如插头插座的尺寸、形状、引脚数量及排列顺序，接触可靠性</td></tr><tr><td>功能特性</td><td>各传输线功能分工，如地址总线传地址，数据总线传数据</td></tr><tr><td>电气特性</td><td>信号传递方向和电平范围，CPU发出的为输出信号，送入CPU为输入信号</td></tr><tr><td>时间特性</td><td>各信号有效的时间关系，信号之间的时序同步，通常用信号时序图描述</td></tr></tbody></table><h3 id="总线通信方式" tabindex="-1"><a class="header-anchor" href="#总线通信方式"><span>总线通信方式</span></a></h3><table><thead><tr><th>通信方式</th><th>说明</th></tr></thead><tbody><tr><td>同步通信</td><td>通信双方由统一时钟控制数据传送，操作时间严格同步</td></tr><tr><td>异步通信</td><td>无公共时钟，各部件操作时间不必严格统一，分为不互锁、半互锁、全互锁三种形式</td></tr><tr><td>半同步通信</td><td>结合同步和异步特点，部分时间段同步，部分异步</td></tr><tr><td>分离式通信</td><td>一个传输周期分成两个子周期：周期1由主控A向从控B传送，周期2由B向A传送</td></tr></tbody></table><h3 id="总线通信标准" tabindex="-1"><a class="header-anchor" href="#总线通信标准"><span>总线通信标准</span></a></h3><table><thead><tr><th>总线标准</th><th>简要说明</th></tr></thead><tbody><tr><td>ISA</td><td>工业标准体系结构，较老的总线标准</td></tr><tr><td>EISA</td><td>扩展的 ISA，总线性能和地址空间增强</td></tr><tr><td>VESA</td><td>视频电子标准协会，主要用于显示接口</td></tr><tr><td>PCI</td><td>外部设备互连，广泛应用的并行总线</td></tr><tr><td>PCI-Express</td><td>最新的高速串行总线和接口标准</td></tr><tr><td>AGP</td><td>专用于加速图形处理的接口</td></tr><tr><td>USB</td><td>通用串行总线，支持热插拔和即插即用</td></tr></tbody></table><h3 id="总线仲裁" tabindex="-1"><a class="header-anchor" href="#总线仲裁"><span>总线仲裁</span></a></h3><ul><li>总线仲裁：在多设备共享总线时，解决多个设备同时请求总线使用权的问题</li></ul><table><thead><tr><th>仲裁方式</th><th>特点总结</th><th>缺点</th></tr></thead><tbody><tr><td>链式查询方式</td><td>离仲裁器最近的设备优先级最高</td><td><strong>链路故障敏感</strong>，优先级固定</td></tr><tr><td>计数器定时查询</td><td>按顺序轮询各设备请求，使用程序计数器控制</td><td><strong>无法体现优先级</strong>，不适应实时性</td></tr><tr><td>独立请求/响应线方式</td><td>每个设备有一对 BRi/BGi 信号线，优先级可设</td><td><strong>布线复杂</strong>，<strong>硬件资源开销大</strong></td></tr></tbody></table><h2 id="存储系统" tabindex="-1"><a class="header-anchor" href="#存储系统"><span>存储系统</span></a></h2><h3 id="存储器分类" tabindex="-1"><a class="header-anchor" href="#存储器分类"><span>存储器分类</span></a></h3><table><thead><tr><th>分类方式</th><th>分类依据</th><th>具体类型</th><th>说明</th></tr></thead><tbody><tr><td>一、按<strong>存储介质</strong></td><td>物理材料</td><td>半导体器件、磁性材料、光盘</td><td>如：DRAM（半导体）、磁盘（磁性）、CD-ROM（光盘）等</td></tr><tr><td>二、按<strong>读写功能</strong></td><td>是否可写</td><td>ROM（只读存储器）、RAM（随机存储器）</td><td>ROM：数据预置不可改（在制造或写入时就固定好的）；RAM：数据可随时读写</td></tr><tr><td>三、按<strong>系统作用</strong></td><td>在系统中的位置</td><td>主存储器、辅助存储器、缓冲存储器</td><td>主存：如DDR；辅助：硬盘、U盘；缓冲：Cache（加快速度）</td></tr></tbody></table><h3 id="存储器层次结构" tabindex="-1"><a class="header-anchor" href="#存储器层次结构"><span>存储器层次结构</span></a></h3><table><thead><tr><th>层次</th><th>名称</th><th>作用</th><th>特点</th><th>举例</th></tr></thead><tbody><tr><td>第1层</td><td><strong>缓存 Cache</strong></td><td>CPU 与主存之间的高速缓冲</td><td>容量小、速度最快、价格高</td><td>L1、L2、L3 缓存</td></tr><tr><td>第2层</td><td><strong>主存 RAM</strong></td><td>存储正在运行的数据和程序</td><td>容量中等、速度较快、可读写</td><td>DDR4、DDR5</td></tr><tr><td>第3层</td><td><strong>辅助存储器</strong></td><td>永久保存大量数据</td><td>容量最大、速度慢、成本低</td><td>SSD、HDD、光盘等</td></tr></tbody></table><ul><li>RAM（随机访问存储器）：断电就没了，临时存程序和数据。</li><li>ROM（只读存储器）：断电也能保留数据，常存“启动程序”等。</li></ul><h3 id="ram的分类-sram-和-dram" tabindex="-1"><a class="header-anchor" href="#ram的分类-sram-和-dram"><span>RAM的分类：SRAM 和 DRAM</span></a></h3><table><thead><tr><th>特性</th><th><strong>SRAM（静态随机存取存储器）</strong></th><th><strong>DRAM（动态随机存取存储器）</strong></th></tr></thead><tbody><tr><td>英文全称</td><td>Static Random Access Memory</td><td>Dynamic Random Access Memory</td></tr><tr><td>是否需要刷新</td><td>❌ <strong>不需要刷新</strong>（数据稳定）</td><td>✅ <strong>需要周期性刷新</strong>（电容会漏电）</td></tr><tr><td>存储单元结构</td><td>由 <strong>6 个晶体管</strong>组成</td><td>由 <strong>1 个晶体管 + 1 个电容</strong>组成</td></tr><tr><td>存取速度</td><td>✅ 快（纳秒级）</td><td>❌ 慢（几十纳秒）</td></tr><tr><td>集成度（容量）</td><td>❌ 低（结构复杂，单元大）</td><td>✅ 高（结构简单，单位面积容量大）</td></tr><tr><td>功耗</td><td>✅ 低（静态功耗低）</td><td>❌ 高（刷新耗电）</td></tr><tr><td>成本</td><td>❌ 高</td><td>✅ 低</td></tr><tr><td>应用场景</td><td>CPU缓存（L1/L2/L3 Cache）</td><td>主存（常见的 DDR4/DDR5 等）</td></tr></tbody></table><h4 id="dram的三种刷新方式" tabindex="-1"><a class="header-anchor" href="#dram的三种刷新方式"><span>DRAM的三种刷新方式</span></a></h4><ul><li>刷新：DRAM 的电容会漏电，需要定期刷新，否则数据会丢失</li></ul><table><thead><tr><th>刷新方式</th><th>特点</th><th>优缺点对比</th><th>是否影响正常访问</th></tr></thead><tbody><tr><td><strong>集中刷新</strong></td><td>在一个统一的时间段内，<strong>集中</strong>刷新所有行</td><td>✅实现简单<br>❌刷新期间需停止访问</td><td>❌ 需要暂停读/写</td></tr><tr><td><strong>分散刷新</strong></td><td>每次访问都<strong>顺便刷新一行</strong>，刷新过程分散进行</td><td>✅无“死时间”，不中断访问<br>❌控制逻辑复杂</td><td>✅ 不影响访问</td></tr><tr><td><strong>异步刷新</strong></td><td>集中+分散的结合，按最大刷新间隔安排刷新</td><td>✅利用刷新间隔<br>✅减少死时间</td><td>✅ 减少访问冲突</td></tr></tbody></table><h3 id="rom的分类" tabindex="-1"><a class="header-anchor" href="#rom的分类"><span>ROM的分类</span></a></h3><table><thead><tr><th>名称</th><th>简称</th><th>特点</th></tr></thead><tbody><tr><td><strong>掩模式只读存储器</strong></td><td><strong>Mask ROM</strong></td><td>出厂前一次性烧录，<strong>不可更改</strong>，适合大批量生产</td></tr><tr><td><strong>一次可编程只读存储器</strong></td><td><strong>PROM</strong></td><td>用户可<strong>编程一次</strong>，之后不能修改（用电吹断保险丝）</td></tr><tr><td><strong>可擦除可编程只读存储器</strong></td><td><strong>EPROM</strong></td><td>可用紫外线<strong>擦除后重新编程</strong>，要整片擦除</td></tr><tr><td><strong>电可擦除可编程只读存储器</strong></td><td><strong>EEPROM</strong></td><td>可<strong>电擦除并重复编程</strong>，可以<strong>按字节</strong>擦除</td></tr><tr><td><strong>闪速存储器</strong></td><td><strong>Flash</strong></td><td><strong>改进版 EEPROM</strong>，按“块”擦除，速度快、价格低，广泛用于U盘、手机等</td></tr><tr><td><strong>固态硬盘</strong></td><td><strong>SSD</strong></td><td>实质是<strong>基于 Flash</strong> 的大容量存储器，替代机械硬盘（HDD）</td></tr></tbody></table><h3 id="地址映射" tabindex="-1"><a class="header-anchor" href="#地址映射"><span>地址映射</span></a></h3><table><thead><tr><th>映射方式</th><th>说明</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>直接映射</td><td>主存块固定映射到 Cache 中的唯一一块位置</td><td>结构简单，成本低</td><td>容易产生冲突，命中率较低</td></tr><tr><td>全相联映射</td><td>主存块可映射到 Cache 中的任意块位置</td><td>灵活性高，命中率高，减少冲突</td><td>逻辑复杂，成本高</td></tr><tr><td>组相联映射</td><td>将 Cache 分组，组内采用全相联，组间采用直接映射</td><td>兼顾灵活性和成本，命中率优于直接映射</td><td>复杂度介于两者之间</td></tr></tbody></table><h3 id="存储器和cpu的连接" tabindex="-1"><a class="header-anchor" href="#存储器和cpu的连接"><span>存储器和CPU的连接</span></a></h3><ul><li>存储器和CPU的连接，就是让CPU能正确访问存储器中的数据和指令，完成读写操作的硬件线路和控制信号</li></ul><table><thead><tr><th>连接方式</th><th>说明</th></tr></thead><tbody><tr><td>地址线连接</td><td>CPU 地址线连接到存储器地址输入端，选中存储单元</td></tr><tr><td>数据线连接</td><td>CPU 数据线与存储器数据端口相连，实现数据传输</td></tr><tr><td>读/写命令线连接</td><td>控制读写操作，读命令使存储器输出数据，写命令使存储器接收数据</td></tr><tr><td>片选线连接</td><td>控制哪片存储芯片被激活，防止总线冲突</td></tr><tr><td>合理选择存储芯片</td><td>根据容量、速度、功耗和成本选择合适芯片</td></tr></tbody></table><h3 id="cache替换算法" tabindex="-1"><a class="header-anchor" href="#cache替换算法"><span>Cache替换算法</span></a></h3><ul><li>替换算法：当Cache满时，需要替换掉一些数据，以腾出空间给新的数据</li></ul><table><thead><tr><th>替换算法</th><th>特点</th><th>优缺点</th></tr></thead><tbody><tr><td>随机算法（Random）</td><td>随机选择一个块替换，无需记录使用情况</td><td>简单易实现，但不能提高命中率</td></tr><tr><td>先进先出（FIFO）</td><td>替换最早进入Cache的块，不记录使用频率</td><td>实现简单，开销小，但不利用局部性</td></tr><tr><td>最少使用（LRU）</td><td>替换最近最少使用的块，利用局部性原理，需要跟踪使用记录</td><td>命中率高，但实现复杂，开销大</td></tr></tbody></table><h3 id="cache写策略" tabindex="-1"><a class="header-anchor" href="#cache写策略"><span>Cache写策略</span></a></h3><ul><li>写策略：当Cache中的数据被修改后，需要更新Cache和主存中的数据</li></ul><table><thead><tr><th>写策略名称</th><th>说明</th><th>优缺点</th></tr></thead><tbody><tr><td>写直达法（Write Through）</td><td>数据写入Cache的同时，<strong>立即写入主存</strong></td><td>数据一致性好，但写操作慢，主存压力大</td></tr><tr><td>写回法（Write Back）</td><td>只写Cache，不立即写主存，<strong>等该Cache块被替换时再写回主存</strong></td><td>减少主存写次数，提高性能，但需维护脏位，数据一致性差</td></tr><tr><td>写分配法（Write Allocate）</td><td>写操作发生Cache未命中时，<strong>先将对应块从主存调入Cache，再写</strong></td><td>利用局部性原则，提高后续访问效率</td></tr><tr><td>非写分配法（No Write Allocate）</td><td>写操作发生Cache未命中时，<strong>直接写主存，不加载到Cache</strong></td><td>简单，不占用Cache空间，但可能导致性能下降</td></tr></tbody></table><h2 id="cpu" tabindex="-1"><a class="header-anchor" href="#cpu"><span>CPU</span></a></h2><h3 id="cpu寄存器分类" tabindex="-1"><a class="header-anchor" href="#cpu寄存器分类"><span>CPU寄存器分类</span></a></h3><ul><li>CPU 寄存器（Register） 是计算机中速度最快、地位最高的存储器</li></ul><table><thead><tr><th>寄存器类型</th><th>代表寄存器</th><th>主要功能说明</th></tr></thead><tbody><tr><td><strong>通用寄存器</strong></td><td>多个寄存器组</td><td>用户可直接操作的寄存器，存放临时数据或运算数</td></tr><tr><td><strong>专用寄存器</strong></td><td>IR、PC、MDR、MAR、PSWR</td><td>特定功能寄存器，辅助CPU指令执行和控制</td></tr></tbody></table><h4 id="专用寄存器" tabindex="-1"><a class="header-anchor" href="#专用寄存器"><span>专用寄存器</span></a></h4><table><thead><tr><th>寄存器</th><th>缩写</th><th>作用描述</th></tr></thead><tbody><tr><td>指令寄存器</td><td>IR</td><td>存放从主存取出的当前执行指令</td></tr><tr><td>程序计数器</td><td>PC</td><td>存放下一条将要执行指令的地址</td></tr><tr><td>存储器数据寄存器</td><td>MDR</td><td>暂存从主存读取或写入的数据或指令</td></tr><tr><td>存储器地址寄存器</td><td>MAR</td><td>存放当前CPU要访问的主存单元地址</td></tr><tr><td>状态标志寄存器</td><td>PSWR</td><td>保存算术/逻辑运算结果的条件码（标志位）</td></tr></tbody></table><h3 id="指令周期" tabindex="-1"><a class="header-anchor" href="#指令周期"><span>指令周期</span></a></h3><ul><li>“指令周期的数据流”指的是CPU执行一条指令时，数据在CPU内部以及CPU和存储器之间传递和处理的过程。它描述了从取出指令开始，到完成指令执行，CPU内部各个部件之间数据如何流动的全过程。</li></ul><table><thead><tr><th>阶段名称</th><th>说明</th></tr></thead><tbody><tr><td>取指周期（Fetch）</td><td>从存储器取出下一条指令，送入指令寄存器（IR）</td></tr><tr><td>间址周期（Decode/Addressing）</td><td>解释指令含义，确定操作数地址，准备访问操作数</td></tr><tr><td>执行周期（Execute）</td><td>执行指令操作，如算术运算、存取数据或控制转移</td></tr><tr><td>中断周期（Interrupt）</td><td>响应中断请求，保存现场，转去中断服务程序</td></tr></tbody></table><h3 id="影响流水线性能的因素" tabindex="-1"><a class="header-anchor" href="#影响流水线性能的因素"><span>影响流水线性能的因素</span></a></h3><ul><li>**流水线（Pipeline）**就是一种让 CPU 同时“多道作业”并行处理的技术，类似工厂流水线把工作分成多个步骤，多个任务同时在不同步骤上作业，提高整体效率。 <ul><li>把一条指令的执行过程拆分成多个阶段（比如取指、译码、执行、访存、写回）</li><li>每个阶段像流水线上的一个工序，多个指令可以同时在不同阶段执行</li><li>这样一来，CPU 每个时钟周期都能完成一个阶段的工作，提高指令吞吐率</li></ul></li></ul><table><thead><tr><th>因素类型</th><th>说明</th><th>影响表现</th></tr></thead><tbody><tr><td>资源相关（结构相关）</td><td>多条指令争用同一个硬件资源（如ALU、存储器端口等）</td><td>硬件资源冲突，流水停顿</td></tr><tr><td>数据相关</td><td>后一条指令的操作数依赖前一条指令的结果，但结果尚未写回或更新</td><td>数据冒险，需等待或转发</td></tr><tr><td>控制相关</td><td>流水线遇到转移（跳转）指令，后续指令的执行顺序不确定</td><td>控制冒险，产生流水停顿或重填</td></tr></tbody></table><h3 id="时序系统控制方式" tabindex="-1"><a class="header-anchor" href="#时序系统控制方式"><span>时序系统控制方式</span></a></h3><ul><li>“时序系统控制方式”指的是计算机或数字系统中，如何产生和管理控制信号的时序安排方法，确保各个部件按正确的时间顺序协同工作。 | 控制方式 | 说明 | 特点 | | ---- | --------------------------- | ------------------ | | 同步控制 | 有统一时钟信号，所有控制信号都同步于该时钟 | 控制简单，易设计，但时钟周期限制性能 | | 异步控制 | 无统一时钟，操作时间不固定，指令执行时间随实际需要变化 | 灵活高效，但设计复杂 | | 联合控制 | 同步与异步控制结合，兼顾两者优点 | 灵活且易实现 | | 人工控制 | 通过面板开关或按键人工干预控制，用于调试或开发 | 非自动控制，用于特殊场景 |</li></ul><h3 id="微指令编码方式" tabindex="-1"><a class="header-anchor" href="#微指令编码方式"><span>微指令编码方式</span></a></h3><ul><li>微指令是微程序控制器中的最小控制单位，是用来实现一条机器指令的基础步骤的指令</li><li>微指令编码方式是指微程序控制器中，如何用二进制编码来表示和组织控制信号（微命令）的方式。它决定了微指令的长度、结构和控制信号的生成效率。</li></ul><table><thead><tr><th>编码方式</th><th>说明</th><th>优缺点</th></tr></thead><tbody><tr><td>直接编码法</td><td>每个微命令用独立的控制字段，所有控制信号并行出现</td><td>操作简单，速度快，但微指令字长，控制字段多</td></tr><tr><td>字段编码法</td><td>将相互排斥的微命令合并成一个字段，减少微指令字长度</td><td>缩短微指令字，提高编码效率</td></tr><tr><td>最短编译法</td><td>使用固定长度微指令，通过编码定义微命令</td><td>微指令字最短，节省存储空间</td></tr></tbody></table><h3 id="指令流水三个性能指标" tabindex="-1"><a class="header-anchor" href="#指令流水三个性能指标"><span>指令流水三个性能指标</span></a></h3><ul><li>指令流水（Instruction Pipeline） 是一种提高CPU执行效率的技术，它像工厂“装配线”一样，把一条指令的执行过程分成若干个阶段，每个阶段由不同的硬件模块完成，各阶段可以并行工作，提高吞吐率。</li></ul><table><thead><tr><th>指标</th><th>含义</th><th>公式或说明</th><th>理想值范围</th><th>类比解释</th></tr></thead><tbody><tr><td>吞吐量</td><td>单位时间内完成的指令数</td><td>最大吞吐量 ≈ 1 条/周期（满负荷工作时）<br>实际吞吐量 &lt; 最大吞吐量</td><td>≤ 1 条/周期</td><td>工厂每小时产出的产品数量</td></tr><tr><td>加速比</td><td>流水线比非流水线快多少倍</td><td>加速比 $S = \\frac{n \\cdot t}{n + k - 1}$<br>（n = 指令数，k = 段数）</td><td>≤ k（流水线段数）</td><td>一人干 10 分钟，五人协作只需 3 分钟</td></tr><tr><td>效率</td><td>各功能段的资源利用率</td><td>效率 $E = \\frac{S}{k}$<br>（S 为加速比，k 为段数）</td><td>≤ 1</td><td>有 5 个人，但只有 4 个在忙时效率为 0.8</td></tr></tbody></table><h3 id="流水多发" tabindex="-1"><a class="header-anchor" href="#流水多发"><span>流水多发</span></a></h3><ul><li>普通流水线：每个时钟周期发射一条指令，多个指令在不同流水线阶段交错执行。</li><li>流水多发：每个时钟周期可以发射多条指令，多个指令同时进入流水线的同一阶段并行处理。</li></ul><table><thead><tr><th>技术名称</th><th>核心思想</th><th>特点</th><th>类比理解</th></tr></thead><tbody><tr><td>超标量（Superscalar）</td><td><strong>多个指令并发执行</strong></td><td>多个执行单元，同时执行<strong>多条普通指令</strong></td><td>多条生产线并行运作，一次造多个零件</td></tr><tr><td>超流水（Superpipelining）</td><td><strong>单条指令细分更多流水段</strong></td><td>将传统5段流水进一步细分为更多阶段，提高时钟频率</td><td>把一条流水线拆成更多更小的流水阶段</td></tr><tr><td>超长指令字（VLIW）</td><td><strong>一条指令打包多条操作</strong></td><td>编译器将多个操作打包成<strong>一条“超大”指令</strong>，供多个部件并行执行</td><td>一条订单中包含多个加工任务</td></tr></tbody></table><h2 id="i-o设备" tabindex="-1"><a class="header-anchor" href="#i-o设备"><span>I/O设备</span></a></h2><h3 id="磁表面记录方式" tabindex="-1"><a class="header-anchor" href="#磁表面记录方式"><span>磁表面记录方式</span></a></h3><ul><li>磁表面记录方式是计算机磁盘或磁带等磁性介质上记录和读取二进制数据时所采用的一种编码方式</li></ul><table><thead><tr><th>编码方式</th><th>全称/简称</th><th>速记要点</th><th>特征/规律</th><th>优缺点简述</th></tr></thead><tbody><tr><td>归零制</td><td>RZ (Return to Zero)</td><td>一个比特周期中信号一定返回0</td><td>“1”与“0”都在中间回0</td><td>占带宽高，识别简单</td></tr><tr><td>不归零制</td><td>NRZ (Non Return to Zero)</td><td>信号不回0，保持电平</td><td>“1”保持高电平，“0”保持低电平</td><td>简单但难定位同步</td></tr><tr><td>“见1就翻”不归零</td><td>NRZ1（或NRZI）</td><td>遇到“1”就翻转电平，遇“0”不变</td><td>类似状态机：只在“1”时跳变</td><td>相对 NRZ 更适合长“0”串</td></tr><tr><td>调相制</td><td>PM (Phase Modulation)</td><td>利用相位跳变来表示数据</td><td>通过“相位翻转”表示“1”</td><td>解码复杂，但抗干扰好</td></tr><tr><td>调频制</td><td>FM (Frequency Modulation)</td><td>每位起始强制产生脉冲，“1”再加一脉冲</td><td>“1”=两个脉冲，“0”=一个脉冲</td><td>占用空间大，易同步</td></tr><tr><td>改进调频制</td><td>MFM (Modified FM)</td><td>只在需要时加中间脉冲，降低脉冲密度</td><td>“1”在位中加脉冲，“0”依据前位决定</td><td>更高存储密度，MFM更主流</td></tr></tbody></table><h3 id="传送控制方式" tabindex="-1"><a class="header-anchor" href="#传送控制方式"><span>传送控制方式</span></a></h3><ul><li>传送控制方式是为了 在 CPU、主存储器 和 I/O 设备之间高效、安全地传送数据</li></ul><table><thead><tr><th>控制方式</th><th>控制者</th><th>CPU参与情况</th><th>优点</th><th>缺点</th><th>适用场景</th></tr></thead><tbody><tr><td>程序查询方式</td><td>CPU</td><td>全程主动轮询</td><td>实现简单</td><td>CPU效率低、忙等</td><td>低速设备、结构简单系统</td></tr><tr><td>程序中断方式</td><td>CPU + 中断控制</td><td>CPU仅在中断时处理</td><td>提高CPU利用率</td><td>中断处理有开销</td><td>中速设备</td></tr><tr><td>DMA（直接存储访问）</td><td>DMA控制器</td><td>CPU仅发起请求</td><td>数据传输快，CPU负担小</td><td>控制器复杂，需仲裁总线</td><td>大量数据传输，如硬盘</td></tr><tr><td>I/O 通道控制方式</td><td>I/O通道控制器</td><td>CPU几乎不参与</td><td>可并行管理多个设备，效率最高</td><td>成本高，硬件复杂</td><td>大型主机、大型多设备系统</td></tr></tbody></table><h3 id="中断处理" tabindex="-1"><a class="header-anchor" href="#中断处理"><span>中断处理</span></a></h3><ul><li>中断（Interrupt）是指 计算机在执行程序的过程中，因某种突发事件而暂停当前任务，转去处理该事件，处理完后再返回原程序继续执行的一种机制。</li></ul><h4 id="✅-一图速记-中断处理-5-步流程" tabindex="-1"><a class="header-anchor" href="#✅-一图速记-中断处理-5-步流程"><span>✅ 一图速记：中断处理 5 步流程</span></a></h4><ul><li>INTR表示Interrupt Request</li><li>EINT 表示 Enable Interrupt</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>┌──────────────┐</span></span>\n<span class="line"><span>│ ① 中断请求   │ ← 来自外设（如键盘、磁盘）发出 INTR=1</span></span>\n<span class="line"><span>└────┬─────────┘</span></span>\n<span class="line"><span>     ↓</span></span>\n<span class="line"><span>┌──────────────┐</span></span>\n<span class="line"><span>│ ② 中断判优   │ ← 判断哪个中断源优先（如磁盘比键盘优先）</span></span>\n<span class="line"><span>└────┬─────────┘</span></span>\n<span class="line"><span>     ↓</span></span>\n<span class="line"><span>┌──────────────┐</span></span>\n<span class="line"><span>│ ③ 中断响应   │ ← CPU 检查 EINT=1 才会响应（开中断）</span></span>\n<span class="line"><span>└────┬─────────┘</span></span>\n<span class="line"><span>     ↓</span></span>\n<span class="line"><span>┌──────────────┐</span></span>\n<span class="line"><span>│ ④ 中断服务   │ ← 做三件事：保护现场 → 执行服务程序 → 恢复现场</span></span>\n<span class="line"><span>└────┬─────────┘</span></span>\n<span class="line"><span>     ↓</span></span>\n<span class="line"><span>┌──────────────┐</span></span>\n<span class="line"><span>│ ⑤ 中断返回   │ ← 执行 IRET 指令，返回断点处继续执行</span></span>\n<span class="line"><span>└──────────────┘</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="✅-对应的速记点解释表格" tabindex="-1"><a class="header-anchor" href="#✅-对应的速记点解释表格"><span>✅ 对应的速记点解释表格</span></a></h4><table><thead><tr><th>步骤</th><th>名称</th><th>关键词/作用</th></tr></thead><tbody><tr><td>① 中断请求</td><td>INTR = 1</td><td>某个设备发出请求 → 设置中断请求触发器</td></tr><tr><td>② 中断判优</td><td>优先级判断</td><td>判断哪个中断先响应，比如打印机和键盘一起请求怎么办</td></tr><tr><td>③ 中断响应</td><td>EINT 开关</td><td>CPU 检查是否允许中断（EINT=1）才能执行中断隐指令</td></tr><tr><td>④ 中断服务</td><td>最关键阶段</td><td>保护现场→执行服务程序→恢复现场</td></tr><tr><td>⑤ 中断返回</td><td>IRET</td><td>一条“中断返回指令”，回到中断前断点继续执行主程序</td></tr></tbody></table><h3 id="dma的控制方式" tabindex="-1"><a class="header-anchor" href="#dma的控制方式"><span>DMA的控制方式</span></a></h3><ul><li>DMA（Direct Memory Access，直接存储器访问）是一种让外设绕过 CPU，直接与主存交换数据的机制，大大提升了数据传输效率。</li></ul><table><thead><tr><th>方式名称</th><th>速记关键词</th><th>原理说明</th></tr></thead><tbody><tr><td><strong>① CPU 停止访问法</strong></td><td>暂停 CPU 用内存</td><td>DMA 请求时，CPU <strong>完全暂停</strong>，DMA 独占总线访问内存，控制简单，但 CPU 被“晾着”效率低</td></tr><tr><td><strong>② 交替访问法</strong></td><td>时间片轮转</td><td>一个 CPU 周期被平均分成两个片段：一半给 CPU，一半给 DMA，类似 <strong>轮流用内存</strong></td></tr><tr><td><strong>③ 周期挪用法</strong></td><td>挪用部分内存周期</td><td>DMA 仅在 <strong>IO 比内存慢</strong>时，<strong>趁内存空闲</strong>“偷用”一次周期（偷时间），不干扰 CPU 连续访问内存，效率更高</td></tr></tbody></table><h3 id="dma接口组成" tabindex="-1"><a class="header-anchor" href="#dma接口组成"><span>DMA接口组成</span></a></h3><table><thead><tr><th>组成部分</th><th>作用说明</th></tr></thead><tbody><tr><td><strong>主存地址寄存器（AR）</strong></td><td>保存当前要访问的主存地址（数据传输目标地址）</td></tr><tr><td><strong>字计数器（WC）</strong></td><td>记录需要传输的数据字数，传输完毕后计数器归零</td></tr><tr><td><strong>数据缓冲寄存器（BR）</strong></td><td>暂存从主存或设备读入的数据，或准备写入的数据</td></tr><tr><td><strong>DMA控制逻辑</strong></td><td>控制DMA传输过程，包括总线请求、握手、传送时序控制等</td></tr><tr><td><strong>中断机构</strong></td><td>DMA传输完成后向CPU发出中断信号，通知CPU传输结束</td></tr></tbody></table><h3 id="i-o接口的功能" tabindex="-1"><a class="header-anchor" href="#i-o接口的功能"><span>I/O接口的功能</span></a></h3><table><thead><tr><th>功能名称</th><th>作用说明</th></tr></thead><tbody><tr><td><strong>选址功能</strong></td><td>CPU通过设备选择线上的设备码确定与哪台I/O设备通信，实现设备定位</td></tr><tr><td><strong>传送命令功能</strong></td><td>存放并译码CPU发出的命令，保证I/O设备能正确响应CPU指令</td></tr><tr><td><strong>传送数据功能</strong></td><td>提供数据通路，实现CPU与I/O设备之间的数据传送</td></tr><tr><td><strong>反映设备状态功能</strong></td><td>设置状态触发器，实时反映I/O设备的工作状态，使CPU能及时了解设备状况</td></tr></tbody></table><h3 id="i-o接口的编址方式" tabindex="-1"><a class="header-anchor" href="#i-o接口的编址方式"><span>I/O接口的编址方式</span></a></h3><table><thead><tr><th>编址方式</th><th>特点与优缺点</th><th>备注</th></tr></thead><tbody><tr><td><strong>统一编址</strong></td><td>- I/O 地址视为内存地址的一部分<br>- 不需专门的I/O指令，操作灵活方便<br>- 端口地址空间大<br>- 端口占用内存地址空间，内存容量减小<br>- 访问速度较慢</td><td>编址空间共享，指令通用</td></tr><tr><td><strong>不统一编址</strong></td><td>- I/O地址和存储地址分开<br>- 输入/输出指令与存储指令区分清晰<br>- 编程更清晰<br>- 指令种类少，功能受限<br>- 需要CPU发出两组控制信号，增加复杂度</td><td>独立I/O端口，硬件设计更复杂</td></tr></tbody></table>',162)]))}]]),l=JSON.parse('{"path":"/zh/posts/review/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.html","title":"计算机组成原理","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-07-24T00:00:00.000Z","category":["Learning Records"],"tag":["Algorithm"],"description":"计算机组成原理 系统概念 发展阶段 计算机的更新迭代 计算机的应用 计算机的分类 计算机常见性能指标 冯诺伊曼计算机的特点 五大组成部分：运算器、控制器、存储器、输入设备、输出设备 程序存储原理：指令和数据在存储器中同等地位，按地址访问 二进制编码：指令和数据都以二进制形式存储 指令格式：每条指令 = 操作码（干什么）+ 地址码（找谁干） 顺序执行 +...","head":[["meta",{"property":"og:url","content":"https://crc011220.github.io/zh/posts/review/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"Ruochen Chen"}],["meta",{"property":"og:title","content":"计算机组成原理"}],["meta",{"property":"og:description","content":"计算机组成原理 系统概念 发展阶段 计算机的更新迭代 计算机的应用 计算机的分类 计算机常见性能指标 冯诺伊曼计算机的特点 五大组成部分：运算器、控制器、存储器、输入设备、输出设备 程序存储原理：指令和数据在存储器中同等地位，按地址访问 二进制编码：指令和数据都以二进制形式存储 指令格式：每条指令 = 操作码（干什么）+ 地址码（找谁干） 顺序执行 +..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-12T00:44:12.000Z"}],["meta",{"property":"article:tag","content":"Algorithm"}],["meta",{"property":"article:published_time","content":"2025-07-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-12T00:44:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"计算机组成原理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-07-24T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-12T00:44:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ruochen Chen\\"}]}"]]},"headers":[{"level":2,"title":"系统概念","slug":"系统概念","link":"#系统概念","children":[{"level":3,"title":"发展阶段","slug":"发展阶段","link":"#发展阶段","children":[]},{"level":3,"title":"计算机的更新迭代","slug":"计算机的更新迭代","link":"#计算机的更新迭代","children":[]},{"level":3,"title":"计算机的应用","slug":"计算机的应用","link":"#计算机的应用","children":[]},{"level":3,"title":"计算机的分类","slug":"计算机的分类","link":"#计算机的分类","children":[]},{"level":3,"title":"计算机常见性能指标","slug":"计算机常见性能指标","link":"#计算机常见性能指标","children":[]},{"level":3,"title":"冯诺伊曼计算机的特点","slug":"冯诺伊曼计算机的特点","link":"#冯诺伊曼计算机的特点","children":[]},{"level":3,"title":"计算机系统层次结构","slug":"计算机系统层次结构","link":"#计算机系统层次结构","children":[]},{"level":3,"title":"计算机语言","slug":"计算机语言","link":"#计算机语言","children":[]},{"level":3,"title":"语言处理程序","slug":"语言处理程序","link":"#语言处理程序","children":[]},{"level":3,"title":"CPU 的和它的主要性能指标","slug":"cpu-的和它的主要性能指标","link":"#cpu-的和它的主要性能指标","children":[]}]},{"level":2,"title":"数据表示和运算","slug":"数据表示和运算","link":"#数据表示和运算","children":[{"level":3,"title":"进制转换","slug":"进制转换","link":"#进制转换","children":[]},{"level":3,"title":"机器数","slug":"机器数","link":"#机器数","children":[]},{"level":3,"title":"补码的计算","slug":"补码的计算","link":"#补码的计算","children":[]},{"level":3,"title":"IEEE754 标准","slug":"ieee754-标准","link":"#ieee754-标准","children":[]},{"level":3,"title":"浮点数运算过程","slug":"浮点数运算过程","link":"#浮点数运算过程","children":[]},{"level":3,"title":"非数值型数据表示方法","slug":"非数值型数据表示方法","link":"#非数值型数据表示方法","children":[]},{"level":3,"title":"校验码","slug":"校验码","link":"#校验码","children":[]}]},{"level":2,"title":"系统指令与总线","slug":"系统指令与总线","link":"#系统指令与总线","children":[{"level":3,"title":"指令格式","slug":"指令格式","link":"#指令格式","children":[]},{"level":3,"title":"数据寻址方式","slug":"数据寻址方式","link":"#数据寻址方式","children":[]},{"level":3,"title":"RISC 和 CISC 的比较","slug":"risc-和-cisc-的比较","link":"#risc-和-cisc-的比较","children":[]},{"level":3,"title":"总线结构","slug":"总线结构","link":"#总线结构","children":[]},{"level":3,"title":"总线特性","slug":"总线特性","link":"#总线特性","children":[]},{"level":3,"title":"总线通信方式","slug":"总线通信方式","link":"#总线通信方式","children":[]},{"level":3,"title":"总线通信标准","slug":"总线通信标准","link":"#总线通信标准","children":[]},{"level":3,"title":"总线仲裁","slug":"总线仲裁","link":"#总线仲裁","children":[]}]},{"level":2,"title":"存储系统","slug":"存储系统","link":"#存储系统","children":[{"level":3,"title":"存储器分类","slug":"存储器分类","link":"#存储器分类","children":[]},{"level":3,"title":"存储器层次结构","slug":"存储器层次结构","link":"#存储器层次结构","children":[]},{"level":3,"title":"RAM的分类：SRAM 和 DRAM","slug":"ram的分类-sram-和-dram","link":"#ram的分类-sram-和-dram","children":[]},{"level":3,"title":"ROM的分类","slug":"rom的分类","link":"#rom的分类","children":[]},{"level":3,"title":"地址映射","slug":"地址映射","link":"#地址映射","children":[]},{"level":3,"title":"存储器和CPU的连接","slug":"存储器和cpu的连接","link":"#存储器和cpu的连接","children":[]},{"level":3,"title":"Cache替换算法","slug":"cache替换算法","link":"#cache替换算法","children":[]},{"level":3,"title":"Cache写策略","slug":"cache写策略","link":"#cache写策略","children":[]}]},{"level":2,"title":"CPU","slug":"cpu","link":"#cpu","children":[{"level":3,"title":"CPU寄存器分类","slug":"cpu寄存器分类","link":"#cpu寄存器分类","children":[]},{"level":3,"title":"指令周期","slug":"指令周期","link":"#指令周期","children":[]},{"level":3,"title":"影响流水线性能的因素","slug":"影响流水线性能的因素","link":"#影响流水线性能的因素","children":[]},{"level":3,"title":"时序系统控制方式","slug":"时序系统控制方式","link":"#时序系统控制方式","children":[]},{"level":3,"title":"微指令编码方式","slug":"微指令编码方式","link":"#微指令编码方式","children":[]},{"level":3,"title":"指令流水三个性能指标","slug":"指令流水三个性能指标","link":"#指令流水三个性能指标","children":[]},{"level":3,"title":"流水多发","slug":"流水多发","link":"#流水多发","children":[]}]},{"level":2,"title":"I/O设备","slug":"i-o设备","link":"#i-o设备","children":[{"level":3,"title":"磁表面记录方式","slug":"磁表面记录方式","link":"#磁表面记录方式","children":[]},{"level":3,"title":"传送控制方式","slug":"传送控制方式","link":"#传送控制方式","children":[]},{"level":3,"title":"中断处理","slug":"中断处理","link":"#中断处理","children":[]},{"level":3,"title":"DMA的控制方式","slug":"dma的控制方式","link":"#dma的控制方式","children":[]},{"level":3,"title":"DMA接口组成","slug":"dma接口组成","link":"#dma接口组成","children":[]},{"level":3,"title":"I/O接口的功能","slug":"i-o接口的功能","link":"#i-o接口的功能","children":[]},{"level":3,"title":"I/O接口的编址方式","slug":"i-o接口的编址方式","link":"#i-o接口的编址方式","children":[]}]}],"git":{"createdTime":1751966645000,"updatedTime":1754959452000,"contributors":[{"name":"Ruochen Chen","email":"ruocchen1220@gmail.com","commits":4}]},"readingTime":{"minutes":31.58,"words":9474},"filePathRelative":"zh/posts/review/计算机组成原理.md","localizedDate":"2025年7月24日","excerpt":"\\n<h2>系统概念</h2>\\n<h3>发展阶段</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>阶段</th>\\n<th>技术基础</th>\\n<th>存储技术</th>\\n<th>编程语言</th>\\n<th>特点</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>第一代（1940s-1950s）</td>\\n<td><strong>电子管</strong></td>\\n<td>鼠笼式延迟线、磁鼓</td>\\n<td>机器语言</td>\\n<td>体积大、功耗高、运算慢、<strong>I/O 很慢</strong>、可存储信息</td>\\n</tr>\\n<tr>\\n<td>第二代（1950s-1960s）</td>\\n<td><strong>晶体管</strong></td>\\n<td><strong>磁芯存储器</strong></td>\\n<td><strong>汇编语言</strong></td>\\n<td>更小更快、更稳定、更省电</td>\\n</tr>\\n<tr>\\n<td>第三代（1960s-1970s）</td>\\n<td><strong>中小规模集成电路（SSI/MSI）</strong></td>\\n<td>磁芯/半导体混合</td>\\n<td>高级语言出现</td>\\n<td><strong>操作系统</strong>问世，批处理多道</td>\\n</tr>\\n<tr>\\n<td>第四代（1970s-至今）</td>\\n<td><strong>大规模/超大规模集成电路（LSI/VLSI）</strong></td>\\n<td>半导体存储器</td>\\n<td>C语言等高级语言广泛</td>\\n<td><strong>微处理器</strong>诞生，计算机普及化，出现个人电脑、网络、AI</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}')}}]);