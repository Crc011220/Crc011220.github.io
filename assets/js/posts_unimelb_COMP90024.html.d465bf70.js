"use strict";(self.webpackChunkpersonalweb=self.webpackChunkpersonalweb||[]).push([[9679],{310:(e,t,i)=>{i.r(t),i.d(t,{comp:()=>p,data:()=>u});var s=i(641);const a=i.p+"assets/img/Amdhal_vs_Gustafsons_Law.a70e6e87.png",n=i.p+"assets/img/HPC_Cluster_Design.2a5e775c.png",l=i.p+"assets/img/openstack.e4d4acad.png",r=i.p+"assets/img/containerization.5e1c5957.png",o=i.p+"assets/img/evolution.be67dd8a.png",d=i.p+"assets/img/k8s-example.dd37bd65.png",h=i.p+"assets/img/cap.ae1825d3.png",c={},p=(0,i(6262).A)(c,[["render",function(e,t){const i=(0,s.g2)("RouteLink");return(0,s.uX)(),(0,s.CE)("div",null,[t[10]||(t[10]=(0,s.Fv)('<h1 id="cluster-and-cloud-computing-comp90024" tabindex="-1"><a class="header-anchor" href="#cluster-and-cloud-computing-comp90024"><span>Cluster and Cloud Computing (COMP90024)</span></a></h1><h2 id="week-1" tabindex="-1"><a class="header-anchor" href="#week-1"><span>Week 1</span></a></h2><h3 id="cloud-characteristics" tabindex="-1"><a class="header-anchor" href="#cloud-characteristics"><span>Cloud Characteristics</span></a></h3><p>‚Äì On-demand self-service . A consumer can provision computing capabilities as needed without requiring human interaction with each service provider. ‚Äì Networked access . Capabilities are available over the network and accessed through standard mechanisms that promote use by heterogeneous client platforms.</p><ul><li>Resource pooling . The provider&#39;s computing resources are pooled to serve multiple consumers using a multi-tenant model potentially with different physical and virtual resources that can be dynamically assigned and reassigned according to consumer demand. ‚Äì Rapid elasticity . Capabilities can be elastically provisioned and released, in some cases automatically, to scale rapidly upon demand. ‚Äì Measured service . Cloud systems automatically control and optimize resource use by leveraging a metering capability at some level of abstraction appropriate to the type of service.</li></ul><h3 id="grid-computing" tabindex="-1"><a class="header-anchor" href="#grid-computing"><span>Grid Computing</span></a></h3><h2 id="week-2" tabindex="-1"><a class="header-anchor" href="#week-2"><span>Week 2</span></a></h2><h3 id="horizontal-and-vertical-scaling" tabindex="-1"><a class="header-anchor" href="#horizontal-and-vertical-scaling"><span>Horizontal and Vertical Scaling</span></a></h3><ul><li>Horizontal scaling refers to adding more resources to a system, easy to add more, cost not so high.</li><li>Vertical scaling refers to increasing the resources of a system, more complex, cost high.</li></ul><figure><img src="'+a+'" alt="Amdhal vs. Gustafson&#39;s Law" tabindex="0" loading="lazy"><figcaption>Amdhal vs. Gustafson&#39;s Law</figcaption></figure><h3 id="categories-of-flynn-s-taxonomy" tabindex="-1"><a class="header-anchor" href="#categories-of-flynn-s-taxonomy"><span>Categories of Flynn&#39;s Taxonomy</span></a></h3><table><thead><tr><th>Type</th><th>Full Name</th><th>Instruction Stream</th><th>Data Stream</th><th>Example</th></tr></thead><tbody><tr><td><strong>SISD</strong></td><td>Single Instruction, Single Data</td><td>Single</td><td>Single</td><td>Traditional single-core CPU</td></tr><tr><td><strong>SIMD</strong></td><td>Single Instruction, Multiple Data</td><td>Single</td><td>Multiple</td><td>GPU, vector processors</td></tr><tr><td><strong>MISD</strong></td><td>Multiple Instruction, Single Data</td><td>Multiple</td><td>Single</td><td>Fault-tolerant systems (rare)</td></tr><tr><td><strong>MIMD</strong></td><td>Multiple Instruction, Multiple Data</td><td>Multiple</td><td>Multiple</td><td>Multi-core CPUs, distributed systems</td></tr></tbody></table><hr><h3 id="approaches-for-parallelism-where-and-how" tabindex="-1"><a class="header-anchor" href="#approaches-for-parallelism-where-and-how"><span>Approaches for Parallelism (where and how)</span></a></h3><p>‚Äì Explicit (openMP / MPI) vs Implicit parallelism ‚Äì Hardware ‚Äì Operating System ‚Äì Software/Applications ‚Äì Some or all of these</p><div class="hint-container info"><p class="hint-container-title">Info</p><p>Message Passing Interface (MPI) is a standardized and portable message-passing system designed to function on a wide range of parallel computers.</p></div><h3 id="erroneous-assumptions-of-distributed-systems" tabindex="-1"><a class="header-anchor" href="#erroneous-assumptions-of-distributed-systems"><span>Erroneous Assumptions of Distributed Systems</span></a></h3><ol><li>The network is reliable</li><li>Latency is zero</li><li>Bandwidth is infinite</li><li>The network is secure</li><li>Topology doesn&#39;t change</li><li>There is one administrator</li><li>Transport cost is zero</li><li>The network is homogeneous</li><li>Time is ubiquitous</li></ol><h2 id="week-3" tabindex="-1"><a class="header-anchor" href="#week-3"><span>Week 3</span></a></h2><figure><img src="'+n+'" alt="HPC Cluster Design" tabindex="0" loading="lazy"><figcaption>HPC Cluster Design</figcaption></figure><h3 id="amdahl-s-law-and-gustafson-s-law" tabindex="-1"><a class="header-anchor" href="#amdahl-s-law-and-gustafson-s-law"><span>Amdahl&#39;s Law and Gustafson&#39;s Law</span></a></h3><h4 id="üåü-key-differences" tabindex="-1"><a class="header-anchor" href="#üåü-key-differences"><span>üåü <strong>Key Differences</strong></span></a></h4><table><thead><tr><th>Law</th><th>Assumption</th><th>Best Use Case</th><th>Result</th></tr></thead><tbody><tr><td><strong>Amdahl&#39;s Law</strong></td><td>Fixed problem size</td><td>Small-scale problems, focus on bottlenecks</td><td>Speedup limited by the serial part</td></tr><tr><td><strong>Gustafson&#39;s Law</strong></td><td>Scalable problem size</td><td>Large-scale problems, focus on parallel efficiency</td><td>Speedup can scale nearly linearly with the number of processors</td></tr></tbody></table><p><strong>If you can make use of parallelisation you should make use of it! It will always generate some benefit, and the larger the problem the bigger the gain.</strong></p><h3 id="environment-modules" tabindex="-1"><a class="header-anchor" href="#environment-modules"><span>Environment Modules</span></a></h3><p>Environment Modules is a tool used to dynamically manage and configure the user‚Äôs shell environment in Unix-like systems. It is widely used in High-Performance Computing (HPC) environments to simplify the use of software packages and manage different software versions without conflicts.</p><p>Modules work by modifying environment variables (e.g., <code>PATH</code>, <code>LD_LIBRARY_PATH</code>, <code>MANPATH</code>, etc.) when a module is loaded or unloaded. This allows users to switch between different versions of the same software easily without modifying the system configuration.</p><hr><h3 id="üõ†Ô∏è-common-module-commands" tabindex="-1"><a class="header-anchor" href="#üõ†Ô∏è-common-module-commands"><span>üõ†Ô∏è <strong>Common <code>module</code> Commands</strong></span></a></h3><table><thead><tr><th>Command</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td><code>module help</code></td><td>Displays help information about the <code>module</code> command, including available options and subcommands.</td><td><code>module help</code></td></tr><tr><td><code>module avail</code></td><td>Lists all available modules in the system.</td><td><code>module avail</code></td></tr><tr><td><code>module whatis &lt;modulefile&gt;</code></td><td>Shows a brief description of the specified module.</td><td><code>module whatis gcc</code></td></tr><tr><td><code>module display &lt;modulefile&gt;</code></td><td>Displays detailed information about what a module will modify in your environment (e.g., <code>PATH</code>, <code>MANPATH</code>, etc.).</td><td><code>module display gcc/10.2.0</code></td></tr><tr><td><code>module load &lt;modulefile&gt;</code></td><td>Loads the specified module and updates the environment accordingly.</td><td><code>module load gcc/10.2.0</code></td></tr><tr><td><code>module unload &lt;modulefile&gt;</code></td><td>Unloads the specified module and resets the environment.</td><td><code>module unload gcc/10.2.0</code></td></tr><tr><td><code>module list</code></td><td>Lists all currently loaded modules.</td><td><code>module list</code></td></tr><tr><td><code>module purge</code></td><td>Unloads all currently loaded modules.</td><td><code>module purge</code></td></tr><tr><td><code>module swap &lt;old_module&gt; &lt;new_module&gt;</code></td><td>Unloads the old module and loads the new one in a single step.</td><td><code>module swap gcc/9.3.0 gcc/10.2.0</code></td></tr><tr><td><code>module save &lt;name&gt;</code></td><td>Saves the current module environment as a named collection.</td><td><code>module save my_environment</code></td></tr><tr><td><code>module restore &lt;name&gt;</code></td><td>Restores a previously saved module collection.</td><td><code>module restore my_environment</code></td></tr></tbody></table><hr><h3 id="üõ†Ô∏è-common-slurm-commands" tabindex="-1"><a class="header-anchor" href="#üõ†Ô∏è-common-slurm-commands"><span>üõ†Ô∏è <strong>Common <code>slurm</code> Commands</strong></span></a></h3><table><thead><tr><th>Command</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td><code>sbatch</code></td><td>Submit a job</td><td><code>sbatch job.slurm</code></td></tr><tr><td><code>squeue</code></td><td>View job status</td><td><code>squeue -u &lt;username&gt;</code></td></tr><tr><td><code>scancel</code></td><td>Cancel a job</td><td><code>scancel 12345</code></td></tr><tr><td><code>sinfo</code></td><td>View node status</td><td><code>sinfo</code></td></tr><tr><td><code>sacct</code></td><td>View job history</td><td><code>sacct -u username</code></td></tr><tr><td><code>sstat</code></td><td>View running job status</td><td><code>sstat 12345</code></td></tr><tr><td><code>scontrol</code></td><td>Manage jobs, nodes, partitions</td><td><code>scontrol show job 12345</code></td></tr><tr><td><code>sprio</code></td><td>View job priority</td><td><code>sprio</code></td></tr><tr><td><code>srun</code></td><td>Run a command interactively</td><td><code>srun --pty bash</code></td></tr><tr><td><code>sinteractive</code></td><td>Start an interactive session</td><td><code>sinteractive -n 4 -t 2:00:00 --mem=8G</code></td></tr></tbody></table><h3 id="slurm-job-scripts" tabindex="-1"><a class="header-anchor" href="#slurm-job-scripts"><span>Slurm Job Scripts</span></a></h3><p>Example</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#!/bin/bash</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#SBATCH --job-name=myjob        # ‰Ωú‰∏öÂêç</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#SBATCH --output=output.txt     # Ê†áÂáÜËæìÂá∫Êñá‰ª∂</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#SBATCH --error=error.txt       # Ê†áÂáÜÈîôËØØËæìÂá∫Êñá‰ª∂</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#SBATCH --ntasks=1              # ‰ªªÂä°Êï∞</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#SBATCH --cpus-per-task=4      # ÊØè‰∏™‰ªªÂä°ÁöÑCPUÊ†∏Êï∞</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#SBATCH --mem=4GB               # ÂàÜÈÖçÁöÑÂÜÖÂ≠ò</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#SBATCH --time=01:00:00         # ÊúÄÂ§ßËøêË°åÊó∂Èó¥Ôºà1Â∞èÊó∂Ôºâ</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#SBATCH --partition=standard    # ÂàÜÂå∫ÂêçÁß∞</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># ‰∏ãÈù¢ÊòØÂÆûÈôÖÊâßË°åÁöÑÂëΩ‰ª§</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Starting my job...&quot;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">srun</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> my_program</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> arg1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> arg2</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # ÊâßË°åÁöÑÁ®ãÂ∫èÂèäÂèÇÊï∞</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">Info</p><h3 id="some-linux-commands" tabindex="-1"><a class="header-anchor" href="#some-linux-commands"><span>Some Linux Commands</span></a></h3><table><thead><tr><th><strong>Command</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td><code>touch &lt;filename&gt;</code></td><td>Creates an empty file. If the file already exists, it updates the file&#39;s timestamp.</td></tr><tr><td><code>scp &lt;source&gt; &lt;destination&gt;</code></td><td>Securely copies files or directories to/from a remote host.</td></tr><tr><td><code>diff &lt;file1&gt; &lt;file2&gt;</code></td><td>Compares the differences between two files.</td></tr><tr><td><code>sdiff &lt;file1&gt; &lt;file2&gt;</code></td><td>Displays the differences between two files side by side.</td></tr><tr><td><code>comm &lt;file1&gt; &lt;file2&gt;</code></td><td>Compares two sorted files and outputs common and different lines.</td></tr><tr><td><code>find &lt;path&gt; &lt;options&gt;</code></td><td>Searches for files or directories within the specified path.</td></tr><tr><td><code>grep &lt;pattern&gt; &lt;file&gt;</code></td><td>Searches for lines in a file that match a given pattern.</td></tr><tr><td><code>tar -xvfh &lt;archive&gt;</code></td><td>Extracts a <code>.tar</code> file and shows the file list.</td></tr><tr><td><code>ls -d &lt;path&gt;</code></td><td>Lists only the directory itself, not its contents.</td></tr><tr><td><code>cut &lt;options&gt;</code></td><td>Extracts specific columns from text.</td></tr><tr><td><code>paste &lt;file1&gt; &lt;file2&gt;</code></td><td>Merges the contents of two files side by side by columns.</td></tr><tr><td>`ls</td><td>wc -l`</td></tr><tr><td><code>tar -xvfh &lt;archive.tar&gt;</code></td><td>Extracts a <code>.tar</code> archive and shows detailed information.</td></tr><tr><td><code>tar -cvf &lt;archive.tar&gt; &lt;files&gt;</code></td><td>Creates a <code>.tar</code> archive.</td></tr><tr><td><code>ls -l</code></td><td>Lists files in the current directory with detailed information like permissions, size, and modified time.</td></tr><tr><td><code>tar -cvf &lt;archive.tar&gt; &lt;files&gt;</code></td><td>Creates a <code>.tar</code> archive.</td></tr><tr><td><code>ls -l</code></td><td>Displays detailed information about files in the current directory.</td></tr><tr><td><code>tar -xvfh archive.tar</code></td><td>Extracts the contents of a <code>.tar</code> file and shows the files being extracted.</td></tr><tr><td>`ls</td><td>wc -l`</td></tr><tr><td><code>tar -cvf archive.tar</code></td><td>Creates a <code>.tar</code> file from specified files.</td></tr><tr><td><code>ls -d */</code></td><td>Lists only the subdirectories in the current directory.</td></tr><tr><td><code>cut -f1 -d&quot;:&quot; &lt;file&gt;</code></td><td>Extracts the first column of data before the colon (üòÉ delimiter in a file.</td></tr></tbody></table></div><h2 id="week-4" tabindex="-1"><a class="header-anchor" href="#week-4"><span>Week 4</span></a></h2><h3 id="public-clouds" tabindex="-1"><a class="header-anchor" href="#public-clouds"><span>Public Clouds</span></a></h3><h4 id="pros" tabindex="-1"><a class="header-anchor" href="#pros"><span>Pros</span></a></h4><p>‚Äì Utility computing ‚Äì Can focus on core business ‚Äì Cost-effective ‚Äì ‚ÄúRight-sizing‚Äù ‚Äì Democratisation of computing</p><h4 id="cons" tabindex="-1"><a class="header-anchor" href="#cons"><span>Cons</span></a></h4><p>‚Äì Security ‚Äì Loss of control ‚Äì Possible lock-in ‚Äì Dependency of Cloud provider continued existence</p><h3 id="private-on-premise-clouds" tabindex="-1"><a class="header-anchor" href="#private-on-premise-clouds"><span>Private (on premise) Clouds</span></a></h3><h4 id="pros-1" tabindex="-1"><a class="header-anchor" href="#pros-1"><span>Pros</span></a></h4><p>‚Äì Control ‚Äì Consolidation of resources ‚Äì Easier to secure ‚Äì More trust</p><h4 id="cons-1" tabindex="-1"><a class="header-anchor" href="#cons-1"><span>Cons</span></a></h4><p>‚Äì Relevance to core business? e.g., Netflix -&gt;Amazon ‚Äì Staff/management overheads ‚Äì Hardware obsolescence ‚Äì Over/under utilisation challenges ‚Äì (Effort and cost of establishing a data centre)</p><h3 id="openstack" tabindex="-1"><a class="header-anchor" href="#openstack"><span>OpenStack</span></a></h3><ul><li>Open Source: OpenStack is a completely open-source cloud computing platform, and anyone can download, install, and modify the source code. It allows enterprises to build and manage their own cloud infrastructure in private data centers with full control.</li><li>Deployment: OpenStack is typically deployed on an organization&#39;s own hardware or can be deployed on any supported hardware (including virtual machines). Therefore, it is suitable for private cloud and hybrid cloud deployments.</li><li>Highly Customizable: Being open-source, OpenStack allows users to highly customize according to their needs.</li><li>Primarily provides Infrastructure as a Service (IaaS) functionalities such as computing, storage, and networking.</li><li>Offers services like Nova (compute), Swift (object storage), Neutron (networking), Cinder (block storage), Keystone (identity management), etc.</li><li>Requires enterprises to manage and maintain their services themselves. <img src="'+l+'" alt="OpenStack Architecture" loading="lazy"></li></ul><h2 id="week-5" tabindex="-1"><a class="header-anchor" href="#week-5"><span>Week 5</span></a></h2><p><img src="'+r+'" alt="Virutalization vs. Containerization.png" loading="lazy"><img src="'+o+'" alt="Evolution" loading="lazy"></p><h3 id="container-orchestration-tools" tabindex="-1"><a class="header-anchor" href="#container-orchestration-tools"><span>Container Orchestration Tools</span></a></h3><ul><li>Container orchestration technologies provide a framework for integrating and managing containers at scale</li></ul><ol><li>Container orchestration technologies feature</li></ol><ul><li>Networking</li><li>Scaling</li><li>Service discovery and load balancing</li><li>Health check and self-healing</li><li>Security</li><li>Rolling updates</li></ul><ol start="2"><li>Goals:</li></ol><ul><li>Simplify container management processes</li><li>Help to manage availability and scaling of containers</li></ul><h3 id="persistence" tabindex="-1"><a class="header-anchor" href="#persistence"><span>Persistence</span></a></h3><h4 id="docker-has-two-options-for-containers-to-store-files-on-the-host-machine-so-that-the-files-are-persisted-even-after-the-container-stops" tabindex="-1"><a class="header-anchor" href="#docker-has-two-options-for-containers-to-store-files-on-the-host-machine-so-that-the-files-are-persisted-even-after-the-container-stops"><span>Docker has two options for containers to store files on the host machine, so that the files are persisted even after the container stops.</span></a></h4><ul><li>Docker volumes (Managed by Docker, /var/lib/docker/volume/)</li><li>Bind mounts (Managed by user, anywhere on the file system)</li></ul><h3 id="docker-networking" tabindex="-1"><a class="header-anchor" href="#docker-networking"><span>Docker networking</span></a></h3><ul><li>‚Äúhost‚Äù: every container uses the host network stack; which means all containers share the same IP address, hence ports cannot be reused in different containers (Docker Engine on Linux only, not for Docker Desktop for Linux, MacOS, or Windows)</li></ul><h3 id="docker-networking-modes" tabindex="-1"><a class="header-anchor" href="#docker-networking-modes"><span>Docker networking modes</span></a></h3><ul><li>‚Äúbridge‚Äù: containers can re-use the same port, as they havedifferent IP addresses, and expose a port of their own that belong to the hosts, allowing containers to be somewhat visible from theoutside.</li><li>‚Äúnone‚Äù: no network, completely isolated. i.e. No access fromoutside, no access to the outside.</li><li>‚Äúoverlay‚Äù: used in Docker SWARM for multi-host communications.</li><li>‚Äúmacvlan‚Äù: containers gets its own IP on the physical network (like a real machine)</li></ul><h3 id="ci-cd" tabindex="-1"><a class="header-anchor" href="#ci-cd"><span>CI/CD</span></a></h3><ul><li><p>CI/CD Pipeline - Integrates the CI/CD practices, the tools, and stages that software changes undergo from development to deployment</p></li><li><p>Lint Check</p></li><li><p>Dependency Check</p></li><li><p>Code Quality Analysis</p></li><li><p>Unit Testing</p></li><li><p>Integration/E2E Tests</p></li><li><p>Pack the Software (build docker image)</p></li><li><p>Deployment</p></li></ul><h2 id="week-6" tabindex="-1"><a class="header-anchor" href="#week-6"><span>Week 6</span></a></h2><h3 id="k8s" tabindex="-1"><a class="header-anchor" href="#k8s"><span>K8S</span></a></h3>',69)),(0,s.Lk)("ul",null,[t[3]||(t[3]=(0,s.Lk)("li",null,"Node: a compute node (usually a Virtual Machine) that k8s runs on",-1)),t[4]||(t[4]=(0,s.Lk)("li",null,"Volume: persistent storage that can be attached to a node and mounted as a file system",-1)),t[5]||(t[5]=(0,s.Lk)("li",null,"Pod: a set of one or more containers that work together to accomplish a task: a pod is the smallest component that can be deployed in a k8s cluster",-1)),t[6]||(t[6]=(0,s.Lk)("li",null,"Deployment: a set of identical pods that run at the same time: it can be used to keep a number of replicas of the same app (say, a deployment of three Nginx pods)",-1)),t[7]||(t[7]=(0,s.Lk)("li",null,"Service: functionality a pod offers on a port. Services are internal to a k8s cluster",-1)),t[8]||(t[8]=(0,s.Lk)("li",null,"Ingress: a component that allows clients access to one or more services with routing based on hostname, paths, etc",-1)),t[9]||(t[9]=(0,s.Lk)("li",null,"Config map: a way to pass parameters around in a k8s cluster",-1)),(0,s.Lk)("li",null,[t[1]||(t[1]=(0,s.eW)("Namespace: all the objects above (except nodes) are grouped in namespaces for easier management. In every k8s cluster there is a default namespace called ‚Äúdefault‚Äù ")),t[2]||(t[2]=(0,s.Lk)("img",{src:d,alt:"K8S Architecture Example",loading:"lazy"},null,-1)),(0,s.bF)(i,{to:"/posts/kubernetes/"},{default:(0,s.k6)((()=>t[0]||(t[0]=[(0,s.eW)("Check more about K8S")]))),_:1})])]),t[11]||(t[11]=(0,s.Fv)('<h3 id="soap-vs-rest" tabindex="-1"><a class="header-anchor" href="#soap-vs-rest"><span>SOAP vs REST</span></a></h3><ul><li>ReST is more of a style to use HTTP than a separate protocol</li><li>SOAP/WS is a stack of protocols that covers every aspect of using a remote service, from service discovery, to service description, to the actual request/response</li></ul><h3 id="wdsl-web-services-description-language" tabindex="-1"><a class="header-anchor" href="#wdsl-web-services-description-language"><span>WDSL (Web Services Description Language)</span></a></h3><ul><li>WSDLÔºàWeb Services Description LanguageÔºâÊòØWebÊúçÂä°ÁöÑÊ†∏ÂøÉÊ†áÂáÜ‰πã‰∏ÄÔºåÂÆÉÂú®ËøáÂéªÂæàÈïø‰∏ÄÊÆµÊó∂Èó¥ÂÜÖË¢´ÂπøÊ≥õÁî®‰∫éÊèèËø∞ÂíåÂÆûÁé∞SOAPÔºàSimple Object Access ProtocolÔºâÈ£éÊ†ºÁöÑWebÊúçÂä°„ÄÇÁÑ∂ËÄåÔºåÈöèÁùÄÊäÄÊúØÁöÑÂèëÂ±ïÔºåÁâπÂà´ÊòØÂú®RESTÔºàRepresentational State TransferÔºâÊû∂ÊûÑÈ£éÊ†ºÁöÑÂÖ¥Ëµ∑ÂíåÂæÆÊúçÂä°Êû∂ÊûÑÁöÑÊµÅË°åÔºåWSDLÁöÑ‰ΩøÁî®Á°ÆÂÆûÊúâÊâÄÂáèÂ∞ë„ÄÇ</li></ul><h3 id="rest-best-practices" tabindex="-1"><a class="header-anchor" href="#rest-best-practices"><span>ReST Best Practices</span></a></h3><ol><li>Keep URIs short ‚Äì and create URIs that don‚Äôt change.</li><li>URIs should be opaque identifiers that are meant to be discovered by following hyperlinks, not constructed by the client.</li><li>Use nouns, not verbs in URLs</li><li>Make all HTTP GETs side-effect free. Doing so makes the request &quot;safe&quot;.</li><li>Use links in your responses to requests! Doing so connects your response with other data. It enables client applications to be &quot;self-propelled‚Äù, i.e. &quot;what is the next step to take&quot;.</li><li>Minimize use of query strings.</li></ol><h2 id="week-7" tabindex="-1"><a class="header-anchor" href="#week-7"><span>Week 7</span></a></h2><h3 id="faas" tabindex="-1"><a class="header-anchor" href="#faas"><span>FaaS</span></a></h3><ul><li><p>The idea behind Serverless/FaaS is to develop software applications without bothering with the infrastructure (especially scaling-up and down as load increases or decreases): the cloud provider manages servers and capacity</p></li><li><p>FaaSÂáΩÊï∞ÊòØ‰∏Ä‰∏™Áã¨Á´ãÁöÑËøáÁ®ãÔºåÂÆÉËøîÂõûÁöÑÂÄºË¢´ÂÖ∂‰ªñËøõÁ®ãÊâÄÊ∂àË¥π„ÄÇÂú®ËÆ∏Â§öFaaSÊ°ÜÊû∂‰∏≠ÔºåFaaSÂáΩÊï∞ÊòØ‰∏Ä‰∏™DockerÂÆπÂô®„ÄÇ</p></li><li><p>FaaSÂáΩÊï∞ÂøÖÈ°ªËøîÂõû‰∏Ä‰∏™ÂèØ‰ª•Ë¢´ÂÖ∂‰ªñÈ°πÁõÆÊ∂àË¥πÁöÑÂÄºÔºåÈÄöÂ∏∏Ëøô‰∏™ÂÄºÊòØ‰∏Ä‰∏™ÂØπË±°ÁöÑJSONË°®Á§∫„ÄÇ</p></li></ul><h4 id="why-faas" tabindex="-1"><a class="header-anchor" href="#why-faas"><span>Why FaaS</span></a></h4><ul><li>Simpler deployment (the cloud provider takes care of the infrastructure)</li><li>Reduced computing costs (only the time during which functions are executed is billed) and more efficient use of computing resources</li><li>Reduced application complexity and more flexibility due to loosely-coupled architecture</li></ul><p>The main difference between proprietary FaaS services and open-source FaaS frameworks is that the latter can be deployed on your cluster, looked into, disassembled, and improved by you.</p><h3 id="functions" tabindex="-1"><a class="header-anchor" href="#functions"><span>Functions</span></a></h3><ul><li>‰∏ç‰øÆÊîπÁ≥ªÁªüÁä∂ÊÄÅÁöÑÂáΩÊï∞Ë¢´Áß∞‰∏∫Êó†ÂâØ‰ΩúÁî®ÁöÑÔºà‰æãÂ¶ÇÔºå‰∏Ä‰∏™Êé•ÂèóÂõæÂÉèÂπ∂ËøîÂõûËØ•ÂõæÂÉèÁº©Áï•ÂõæÁöÑÂáΩÊï∞Ôºâ„ÄÇ</li><li>‰ª•ÊüêÁßçÊñπÂºèÊîπÂèòÁ≥ªÁªüÁöÑÂáΩÊï∞‰∏çÊòØÊó†ÂâØ‰ΩúÁî®ÁöÑÔºà‰æãÂ¶ÇÔºå‰∏Ä‰∏™ËøîÂõûÂõæÂÉèÁº©Áï•ÂõæÂπ∂Â∞ÜÂÖ∂ÂÜôÂÖ•Êñá‰ª∂Á≥ªÁªüÁöÑÂáΩÊï∞Ôºâ„ÄÇ</li><li>Êó†ÂâØ‰ΩúÁî®ÁöÑÂáΩÊï∞ÂèØ‰ª•Âπ∂Ë°åËøêË°åÔºåÂπ∂‰∏îÂú®ÁªôÂÆöÁõ∏ÂêåËæìÂÖ•ÁöÑÊÉÖÂÜµ‰∏ãÔºå‰øùËØÅËøîÂõûÁõ∏ÂêåÁöÑËæìÂá∫„ÄÇ</li><li>ÁÑ∂ËÄåÔºåÂú®Áõ∏ÂØπÂ§çÊùÇÁöÑÁ≥ªÁªü‰∏≠ÔºåÂâØ‰ΩúÁî®Âá†‰πéÊòØ‰∏çÂèØÈÅøÂÖçÁöÑ„ÄÇÂõ†Ê≠§ÔºåÂøÖÈ°ªËÄÉËôëÂ¶Ç‰Ωï‰ΩøÂÖ∑ÊúâÂâØ‰ΩúÁî®ÁöÑÂáΩÊï∞Âú®FaaSÁéØÂ¢É‰∏≠ÈÄöÂ∏∏ÊâÄÈúÄÁöÑÂπ∂Ë°åËøêË°åÔºåÈÅøÂÖçÊ≠ªÈîÅÔºàÊØè‰∏™ÂáΩÊï∞ÈÉΩÂú®Á≠âÂæÖÂè¶‰∏Ä‰∏™ÂáΩÊï∞ÈáäÊîæËµÑÊ∫êÔºâ„ÄÇ</li><li>Â∞ÜÈùûÊó†ÂâØ‰ΩúÁî®ÁöÑÂáΩÊï∞Êï∞ÈáèÈôêÂà∂Âú®ÊúÄÂ∞èËåÉÂõ¥ÂÜÖÊòØ‰∏Ä‰∏™Â•ΩÁöÑÂÆûË∑µÔºåËÄå‰∏çÊòØÂú®Â∫îÁî®Á®ãÂ∫è‰∏≠Êï£Â∏ÉÊîπÂèòÁ≥ªÁªüÁöÑ‰ª£Á†ÅÁâáÊÆµ„ÄÇ</li></ul><p>ÊúâÁä∂ÊÄÅÂáΩÊï∞ÔºöËæìÂá∫‰æùËµñ‰∫éÂÜÖÈÉ®Â≠òÂÇ®ÁöÑ‰ø°ÊÅØÔºåÈöæ‰ª•Âπ∂Ë°åËøêË°å„ÄÇ Êó†Áä∂ÊÄÅÂáΩÊï∞Ôºö‰∏çÂÜÖÈÉ®Â≠òÂÇ®‰ø°ÊÅØÔºå‰æùËµñÂ§ñÈÉ®Â≠òÂÇ®Êù•Áª¥Êä§Áä∂ÊÄÅÔºåÊõ¥ÈÄÇÂêàÂú®FaaSÁéØÂ¢É‰∏≠ËøêË°å</p><ul><li>ÈªòËÆ§ÊÉÖÂÜµ‰∏ãÔºåFaaS‰∏≠ÁöÑÂáΩÊï∞ÊòØÂêåÊ≠•ÁöÑÔºåÂõ†Ê≠§ÂÆÉ‰ª¨‰ºöÁ´ãÂç≥ÔºàÊàñÂá†‰πéÁ´ãÂç≥ÔºâËøîÂõûÁªìÊûú„ÄÇ</li><li>ÁÑ∂ËÄåÔºåÊúâ‰∫õÂáΩÊï∞ÂèØËÉΩÈúÄË¶ÅÊõ¥ÈïøÁöÑÊó∂Èó¥ÊâçËÉΩËøîÂõûÁªìÊûúÔºåÂõ†Ê≠§Âú®ËøáÁ®ã‰∏≠ÂèØËÉΩ‰ºöÂØºËá¥Ë∂ÖÊó∂Âπ∂ÈîÅÂÆö‰∏éÂÆ¢Êà∑Á´ØÁöÑËøûÊé•ÔºåÂõ†Ê≠§ÊúÄÂ•ΩÂ∞ÜÂÆÉ‰ª¨ËΩ¨Êç¢‰∏∫ÂºÇÊ≠•ÂáΩÊï∞„ÄÇ</li><li>ÂºÇÊ≠•ÂáΩÊï∞ËøîÂõû‰∏Ä‰∏™‰ª£Á†ÅÔºåÈÄöÁü•ÂÆ¢Êà∑Á´ØÊâßË°åÂ∑≤ÂºÄÂßãÔºàÈÄöÂ∏∏ÊòØHTTPÁä∂ÊÄÅÁ†Å202ÔºâÔºåÁÑ∂ÂêéÂú®ÊâßË°åÂÆåÊàêÊó∂Ëß¶Âèë‰∏Ä‰∏™‰∫ã‰ª∂„ÄÇ</li><li>Âú®Êõ¥Â§çÊùÇÁöÑÊÉÖÂÜµ‰∏ãÔºåÂèØ‰ª•‰ΩøÁî®Ê∂âÂèäÊ∂àÊÅØÈòüÂàóÁ≥ªÁªüÁöÑÂèëÂ∏É/ËÆ¢ÈòÖÊ®°ÂºèÊù•Â§ÑÁêÜÂºÇÊ≠•ÂáΩÊï∞„ÄÇ</li></ul><table><thead><tr><th>ÁâπÊÄß</th><th>Âçï‰ΩìÂ∫îÁî®</th><th>ÂæÆÊúçÂä°Â∫îÁî®</th><th>Êó†ÊúçÂä°Âô®Â∫îÁî®</th></tr></thead><tbody><tr><td><strong>Êû∂ÊûÑ</strong></td><td>ÊâÄÊúâÂäüËÉΩÂú®‰∏Ä‰∏™‰ª£Á†ÅÂ∫ìÂíåËøêË°åÊó∂ÁéØÂ¢É‰∏≠</td><td>Â∞ÜÂäüËÉΩÊãÜÂàÜ‰∏∫Â§ö‰∏™Áã¨Á´ãÁöÑÊúçÂä°ÔºåÊØè‰∏™ÊúçÂä°ÊúâËá™Â∑±ÁöÑ‰ª£Á†ÅÂ∫ìÂíåËøêË°åÊó∂ÁéØÂ¢É</td><td>Â∞ÜÂäüËÉΩËøõ‰∏ÄÊ≠•ÊãÜÂàÜ‰∏∫ÂáΩÊï∞ÔºåÁî±Á¨¨‰∏âÊñπÂπ≥Âè∞ÁÆ°ÁêÜËøêË°åÊó∂ÁéØÂ¢É</td></tr><tr><td><strong>ÈÉ®ÁΩ≤</strong></td><td>‰Ωú‰∏∫‰∏Ä‰∏™Êï¥‰ΩìÈÉ®ÁΩ≤</td><td>ÂêÑ‰∏™ÊúçÂä°Áã¨Á´ãÈÉ®ÁΩ≤</td><td>ÂáΩÊï∞ÊåâÈúÄÈÉ®ÁΩ≤ÔºåÁî±Âπ≥Âè∞Ëá™Âä®Êâ©Â±ï</td></tr><tr><td><strong>Êâ©Â±ï</strong></td><td>ÂûÇÁõ¥Êâ©Â±ïÔºàÂ¢ûÂä†ËµÑÊ∫êÔºâ</td><td>Ê∞¥Âπ≥Êâ©Â±ïÔºàÂ¢ûÂä†ÂÆû‰æãÔºâ</td><td>Ëá™Âä®Ê∞¥Âπ≥Êâ©Â±ï</td></tr><tr><td><strong>ËÄ¶ÂêàÂ∫¶</strong></td><td>È´òËÄ¶Âêà</td><td>‰ΩéËÄ¶Âêà</td><td>Êó†ËÄ¶Âêà</td></tr><tr><td><strong>ÊäÄÊúØÊ†à</strong></td><td>ÈÄöÂ∏∏‰ΩøÁî®Âçï‰∏ÄÊäÄÊúØÊ†à</td><td>ÂêÑ‰∏™ÊúçÂä°ÂèØ‰ª•‰ΩøÁî®‰∏çÂêåÁöÑÊäÄÊúØÊ†à</td><td>ÂáΩÊï∞ÂèØ‰ª•‰ΩøÁî®‰∏çÂêåÁöÑËØ≠Ë®ÄÂíåÁéØÂ¢É</td></tr><tr><td><strong>ÂºÄÂèë</strong></td><td>ÂºÄÂèëÂíåË∞ÉËØïÁõ∏ÂØπÁÆÄÂçï</td><td>ÂºÄÂèëÂíåË∞ÉËØïÊõ¥Â§çÊùÇÔºåÈúÄË¶ÅÊúçÂä°Èó¥ÈÄö‰ø°Êú∫Âà∂</td><td>ÂºÄÂèëÁÆÄÂçïÔºåÂè™ÈúÄÂÖ≥Ê≥®ÂáΩÊï∞ÈÄªËæë</td></tr><tr><td><strong>ÊµãËØï</strong></td><td>ÊµãËØïÁõ∏ÂØπÁÆÄÂçï</td><td>ÈúÄË¶ÅËøõË°åÈõÜÊàêÊµãËØïÂíåÁ´ØÂà∞Á´ØÊµãËØï</td><td>ÊµãËØïÁõ∏ÂØπÁÆÄÂçïÔºå‰ΩÜÈúÄË¶ÅÊ®°Êãü‰∫ã‰ª∂Ëß¶Âèë</td></tr><tr><td><strong>Áª¥Êä§</strong></td><td>Áª¥Êä§Áõ∏ÂØπÁÆÄÂçï</td><td>ÈúÄË¶ÅÁª¥Êä§Â§ö‰∏™ÊúçÂä°ÔºåÊõ¥Â§çÊùÇ</td><td>Áª¥Êä§Áî±Âπ≥Âè∞Ë¥üË¥£ÔºåÂºÄÂèëËÄÖÂè™ÈúÄÂÖ≥Ê≥®‰ª£Á†Å</td></tr><tr><td><strong>ÊïÖÈöúÈöîÁ¶ª</strong></td><td>ÊïÖÈöú‰ºöÂΩ±ÂìçÊï¥‰∏™Â∫îÁî®</td><td>ÊïÖÈöúË¢´ÈöîÁ¶ªÂú®Âçï‰∏™ÊúçÂä°‰∏≠</td><td>ÊïÖÈöúË¢´ÈöîÁ¶ªÂú®Âçï‰∏™ÂáΩÊï∞‰∏≠</td></tr><tr><td><strong>ËµÑÊ∫êÂà©Áî®Áéá</strong></td><td>ËµÑÊ∫êÂà©Áî®ÁéáÂèØËÉΩËæÉ‰Ωé</td><td>ËµÑÊ∫êÂà©Áî®ÁéáËæÉÈ´òÔºå‰ΩÜÈúÄË¶ÅÁÆ°ÁêÜÂ§ö‰∏™ÊúçÂä°</td><td>ËµÑÊ∫êÂà©Áî®ÁéáÊúÄÈ´òÔºåÊåâÈúÄ‰ªòË¥π</td></tr><tr><td><strong>Âª∂Ëøü</strong></td><td>ÈÄöÂ∏∏ËæÉ‰Ωé</td><td>ÂèØËÉΩÂºïÂÖ•ÁΩëÁªúÂª∂Ëøü</td><td>ÂèØËÉΩÂºïÂÖ•ÁΩëÁªúÂª∂ËøüÂíåÂÜ∑ÂêØÂä®Âª∂Ëøü</td></tr><tr><td><strong>ÊàêÊú¨</strong></td><td>ÂàùÊúüÊàêÊú¨ËæÉ‰ΩéÔºå‰ΩÜÈöèÁùÄËßÑÊ®°Êâ©Â§ßÊàêÊú¨Â¢ûÂä†</td><td>ÂàùÊúüÊàêÊú¨ËæÉÈ´òÔºå‰ΩÜÊõ¥ÂÆπÊòìÊâ©Â±ïÔºåÈïøÊúüÊàêÊú¨ÂèØËÉΩËæÉ‰Ωé</td><td>ÊàêÊú¨‰∏é‰ΩøÁî®ÈáèÁõ¥Êé•Áõ∏ÂÖ≥ÔºåÈÄÇÂêà‰∫ã‰ª∂È©±Âä®ÁöÑÂ∫îÁî®</td></tr><tr><td><strong>ÈÄÇÁî®Âú∫ÊôØ</strong></td><td>Â∞èÂûãÂ∫îÁî®„ÄÅÂø´ÈÄüÂéüÂûãÂºÄÂèë</td><td>Â§ßÂûãÂ§çÊùÇÂ∫îÁî®„ÄÅÈúÄË¶ÅÁÅµÊ¥ªÊÄßÂíåÂèØÊâ©Â±ïÊÄßÁöÑÂ∫îÁî®</td><td>‰∫ã‰ª∂È©±Âä®ÁöÑÂ∫îÁî®„ÄÅÈúÄË¶ÅÈ´òÂ∫¶ÂºπÊÄßÂíåËá™Âä®Êâ©Â±ïÁöÑÂ∫îÁî®</td></tr><tr><td><strong>Á§∫‰æãÂ∑•ÂÖ∑</strong></td><td>‰º†ÁªüÁöÑ Web Â∫îÁî®Ê°ÜÊû∂</td><td>Kubernetes, Docker, Istio</td><td>AWS Lambda, Azure Functions, Google Cloud Functions</td></tr><tr><td><strong>ÊÄªÁªì:</strong></td><td></td><td></td><td></td></tr></tbody></table><ul><li><strong>Âçï‰ΩìÂ∫îÁî®</strong> ÁÆÄÂçïÊòìÁî®ÔºåÈÄÇÂêàÂ∞èÂûãÈ°πÁõÆÊàñÂø´ÈÄüÂéüÂûãÂºÄÂèë„ÄÇ</li><li><strong>ÂæÆÊúçÂä°Â∫îÁî®</strong> Êèê‰æõÊõ¥È´òÁöÑÁÅµÊ¥ªÊÄßÂíåÂèØÊâ©Â±ïÊÄßÔºåÈÄÇÂêàÂ§ßÂûãÂ§çÊùÇÈ°πÁõÆ„ÄÇ</li><li><strong>Êó†ÊúçÂä°Âô®Â∫îÁî®</strong> Êèê‰æõÊúÄÈ´òÁöÑÂºπÊÄßÂíåËá™Âä®Êâ©Â±ïËÉΩÂäõÔºåÈÄÇÂêà‰∫ã‰ª∂È©±Âä®ÁöÑÂ∫îÁî®„ÄÇ</li></ul><h3 id="fission" tabindex="-1"><a class="header-anchor" href="#fission"><span>Fission</span></a></h3><ul><li>Function: a software module that returns a value and can be called independently by a trigger</li><li>Environment: the Docker image that a function runs on. An environment is a language-specific, includes an HTTP server and some base libraries, but it can be customised</li><li>Package: a set of files (usually source code and/or compiled binaries) that is used to customise an Environment</li><li>Trigger: an event that causes the execution of a function, such as: ‚óã An HTTP request ‚óã A timer ‚óã A message published on a queue ‚óã The completion of a Kubernetes job</li><li>Router: a component that directs an HTTP request to a function</li><li>Specifications (Specs): a set of YAML files that defines the components of a Fission application. ‚ÄúSpecs‚Äù make it easier to deploy and maintain applications compared to the use of CLI commands</li></ul><h4 id="executors" tabindex="-1"><a class="header-anchor" href="#executors"><span>Executors</span></a></h4><ul><li>Fission executes function in two different ways:</li><li>PoolManager (default executor): Fission manages a pool of pods for every environment; when a function is invoked the function packages are loaded into the pod and the function executed. There is a single instance of a function running on any given time</li><li>NewDeploy: new pods are created as the load increases</li><li>PoolManager minimizes the latency in executing functions (warm start), but cannot cope with heavy load on a single function (functions are multi-threaded and able to service different request at the same time, but they may become overloaded)</li><li>NewDeploy has a higher latency (cold start) but allows multiple instances of the same function to run at the same time, hence it can cope better under heavy loads. Additional function instances are automatically spun according to some metrics (such as CPU consumption)</li></ul><h4 id="fission-cli" tabindex="-1"><a class="header-anchor" href="#fission-cli"><span>Fission Cli</span></a></h4><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fission</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> environment</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> list</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fission</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> packages</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> list</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fission</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> function</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> log</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --name</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fission</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> function</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hello</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --env</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> python</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --code</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hello.py</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # create a function</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> name&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> --namespace &lt;namespace&gt; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># see the log of a function</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fission</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> function</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">function</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">--namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">namespac</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># test function</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fission</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> specs</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apply</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # To update the cluster based on specs</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>While the test command is useful for a quick test, it is not how functions are invoked, for that we need a trigger, The most typical use case is an HTTP request, hence we need to create a route (aka HTTP trigger):</li></ul><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fission</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> route</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hellort</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --function</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hello</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --method</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> GET</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --url</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /hello</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="fission-mq" tabindex="-1"><a class="header-anchor" href="#fission-mq"><span>Fission MQ</span></a></h4><ul><li>To achieve asynchronous functions (e.g using kafka or redis)</li></ul><h4 id="fission-websocket" tabindex="-1"><a class="header-anchor" href="#fission-websocket"><span>Fission WebSocket</span></a></h4><ul><li>Fission can accommodate long-running tasks between a back-end application and a web front-end</li></ul><hr><h2 id="week-8" tabindex="-1"><a class="header-anchor" href="#week-8"><span>Week 8</span></a></h2><h3 id="couchdb-vs-postgresql-vs-elasticsearch" tabindex="-1"><a class="header-anchor" href="#couchdb-vs-postgresql-vs-elasticsearch"><span>CouchDB vs PostgreSQL vs ElasticSearch</span></a></h3><ul><li><p>ElasticSearch restricts write request directed to an index to only one node at a time (the node hosting the primary shard) while every node in CouchDB can accept write requests</p></li><li><p>ElasticSearch has elections in place to establish another master node in case one fails, and there is the possibility of not reaching a minimum number of master-eligible nodes (a quorum), hence forcing the cluster to stop accepting write requests. By contrast, there are no elections in CouchDB, even when one or more nodes fail</p></li><li><p>In PostgreSQL a failed node hinders the functioning of the whole cluster and leads to some data not being accessible at all</p></li><li><p>These differences are rooted in different approaches to an unsolvable problem, a problem defined by Brewer‚Äôs CAP Theorem <img src="'+h+'" alt="CAP Theorem and the Classification of Distributed Processing Algorithms" loading="lazy"></p></li><li><p>CouchDB uses MVCC, hence it is a highly-available DBMS and maintains its availability even when a network partition happens, possibly sacrificing its consistency</p></li><li><p>ElasticSearch uses a mix of two-phase commit (for replicating data from primary to secondary nodes) and Paxos-like behaviour (to elect a master node), hence it is consistent but not available when a network partition occurs. To ensure in-order updates of documents, a sequence number and a primary term (a number that identifies the primary shard) has to be passed to the transaction request</p></li><li><p>PostgreSQL federated databases use a two-phase commit, hence they do not tolerate a network partition</p></li></ul><h3 id="elasticsearch" tabindex="-1"><a class="header-anchor" href="#elasticsearch"><span>ElasticSearch</span></a></h3><h4 id="esÈõÜÁæ§ÂÅ•Â∫∑Áä∂ÊÄÅ" tabindex="-1"><a class="header-anchor" href="#esÈõÜÁæ§ÂÅ•Â∫∑Áä∂ÊÄÅ"><span>EsÈõÜÁæ§ÂÅ•Â∫∑Áä∂ÊÄÅ</span></a></h4><p>Áä∂ÊÄÅ | Âê´‰πâ | Êï∞ÊçÆÂèØÁî®ÊÄß | ÂÜó‰ΩôÂÆâÂÖ®ÊÄß Green | ‰∏ÄÂàáÊ≠£Â∏∏Ôºå‰∏ª + ÂâØÊú¨ÈÉΩÂú® | ‚úÖ | ‚úÖ Yellow | ‰∏ªÂàÜÁâáÂú®ÔºåÂâØÊú¨Áº∫Â§± | ‚úÖ | ‚ùå Red | ‰∏ªÂàÜÁâáÊàñÊï∞ÊçÆ‰∏¢Â§±ÔºåÊúçÂä°‰∏≠Êñ≠ | ‚ùå | ‚ùå</p><h4 id="es-components" tabindex="-1"><a class="header-anchor" href="#es-components"><span>Es Components</span></a></h4><ul><li>ElasticSearch: the component that does the storing and searching of documents</li><li>FileBeat: the component that listens for updates in files (typically log files) and loads the updates into indexes</li><li>MetricBeat: a component that monitors the state of a system and stores the metrics into indexes</li><li>LogStash: a component that transforms data collected by data sources (such as FileBeat and MetricBeat) and stores the transformed data into ElasticSearch indexes</li><li>Kibana: a web-based user interface that allows the query and management of an ElasticSearch cluster</li></ul><h4 id="shards" tabindex="-1"><a class="header-anchor" href="#shards"><span>Shards</span></a></h4><ul><li>ElasticSearch by default uses hash sharding on the document ID to ensure an equal number of documents in each shard</li><li>The bigger the shard, the slower the search, but every shard consumes resources, hence the optimal number of shards depends on several criteria</li><li>it makes sense to remove older data when they become either too old or too large</li><li>In ElasticSearch an index can have its life-cycle policy defined through the following phases: Hot, Warm, Cold, Frozen, Delete</li></ul><div class="hint-container info"><p class="hint-container-title">Info</p><p>ElasticSearch Index = MySQL Database ElasticSearch Document = MySQL Row ElasticSearch Field = MySQL Column</p></div><h4 id="es-data-types" tabindex="-1"><a class="header-anchor" href="#es-data-types"><span>ES Data Types</span></a></h4><ul><li>Binary (encoded as Base64 strings)</li><li>Boolean (true or false as JSON values)</li><li>Keyword (a string that contain a limited number of values, such as postal</li><li>odes, city names, etc)</li><li>Text (a string field that is full-text indexed)</li><li>Numeric (integers, float, double, etc)</li><li>Date (timestamps expressed as either strings or numbers)</li><li>Object (not indexed, but its fields can be)</li><li>Array (there are no arrays in ElasticSearch, but any field can contain 0, 1, or more values as long as all the values have the same data type)</li><li>Join (a field that creates a parent-child relationship between documents)</li><li>Geo (a geometric shape with real-world coordinates)</li><li>Vector (a numeric array that contains a point in a multi-dimensional space)</li></ul><h4 id="es-metadata" tabindex="-1"><a class="header-anchor" href="#es-metadata"><span>ES Metadata</span></a></h4><ul><li>When documents are inserted, some metadata fields are added (by default _id and _index) Common metadata fields include:</li><li><ul><li>_index (the index the document belongs to)</li></ul></li><li><ul><li>_id (document ID - similar to the primary key in a relational DBMS)</li></ul></li><li><ul><li>_version (document version)</li></ul></li><li><ul><li>_primary_term (it identifies the primary shard)</li></ul></li><li><ul><li>_seq_no (the change number within the primary shard)</li></ul></li><li><ul><li>_source (the original JSON document)</li></ul></li><li><ul><li>_routing (the shard the document is assigned to - only when the routing is forced when creating the document)</li></ul></li><li>By default the search API does not return all metadata fields, but adds _score (the relevancy of a document in a query: the higher the score, the more relevant the document within the query results)</li><li>The ID of a document is assigned by ElasticSearch if no ID is given in the request</li><li>The ID is unique to a document: an error is returned when trying to insert a document using an existing ID</li></ul><h4 id="updating-and-deleting-documents" tabindex="-1"><a class="header-anchor" href="#updating-and-deleting-documents"><span>Updating and deleting documents</span></a></h4><ul><li>Since ElasticSearch is concurrent, there may be requests that are arrive out-of-order (say, when a node fails), therefore the document sequence number and the primary term should be sent along with the update or delete request.</li><li>When these two meta fields are omitted, the update or delete request may return status 409 (conflict) or risk overwriting previous changes.</li><li>The meta fields can be obtained by reading the document just before sending the update or delete request</li><li>409s can happen especially during search updates or deletes, as other clients may have changed the documents between the search and update/delete steps (ElasticSearch does not lock data as relational DBMS do: no ‚ÄúSELECT FOR UPDATE‚Äù in ElasticSearch)</li></ul><h4 id="query-dsl" tabindex="-1"><a class="header-anchor" href="#query-dsl"><span>Query DSL</span></a></h4><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// A query to select all H1 students that are named ‚ÄúJohn‚Äù</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">POST /students/_search</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;query&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;bool&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      &quot;must&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          &quot;range&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;mark&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">              &quot;gte&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">80</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">              }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          },</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;match&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">              &quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;john *&quot;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">              }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          ]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>‚Äúmust‚Äù means ‚Äúand‚Äù</li><li>‚Äúshould‚Äù means ‚Äúor‚Äù</li><li>&quot;filter&quot; means &quot;where&quot;</li></ul><h4 id="es-pagination" tabindex="-1"><a class="header-anchor" href="#es-pagination"><span>ES pagination</span></a></h4><ul><li>Pagination (by default ElasticSearch returns 1,000 rows) is implemented via a cursor (think of it as a bookmark that marks a page in a book)</li><li>The cursor ID has to be passed to subsequent request to retrieve the next page</li></ul><h4 id="eql" tabindex="-1"><a class="header-anchor" href="#eql"><span>EQL</span></a></h4><ul><li>EQL is a language used to match events that occur near each other, often used to search logs for suspicious activity</li><li>The following query retrieve events that happen within one minute from each other and satisfy a logical expression</li></ul><h4 id="parent-child-relationship-mapping-definition" tabindex="-1"><a class="header-anchor" href="#parent-child-relationship-mapping-definition"><span>Parent-Child Relationship: Mapping Definition</span></a></h4><ul><li>In ElasticSearch, you can explicitly establish a <strong>parent-child relationship</strong> between two documents through mappings.</li><li>For example, a <code>&quot;course&quot;</code> document can have multiple <code>&quot;student&quot;</code> documents as child documents.</li></ul><p>This is similar to a one-to-many relationship in relational databases.<br> In ElasticSearch, the <code>join</code> field type is used to define this relationship. For example:</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">PUT my_index</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;mappings&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;properties&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      &quot;my_join_field&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;type&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;join&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;relations&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          &quot;course&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;student&quot;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example:</p><ul><li><code>my_join_field</code> is a special field used to represent the parent-child relationship between documents.</li><li><code>&quot;course&quot;: &quot;student&quot;</code> indicates that each <code>&quot;course&quot;</code> document can have multiple <code>&quot;student&quot;</code> child documents.</li></ul><p>When inserting documents, you need to specify whether it is a parent or child. For example:</p><ul><li>Inserting a course document:<div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">POST my_index/_doc/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;title&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Math 101&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;my_join_field&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;course&quot;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>Inserting a student child document (must reference the parent document ID):<div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">POST my_index/_doc/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">?routing=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Alice&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;my_join_field&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;student&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;parent&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1&quot;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="vector-data" tabindex="-1"><a class="header-anchor" href="#vector-data"><span>Vector Data</span></a></h4><ul><li>Vectors (both sparse and dense) can be loaded into ElasticSearch and queried for equality and k-Nearest Neighbours searches</li><li>During the mapping definition, a vector is defined with its type, no. of dimensions, the distance to use and some index parameters</li></ul><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">&quot;type&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;dense_vector&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">&quot;dims&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">&quot;similarity&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;l2_norm&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">&quot;m&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">32</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">&quot;ef_construction&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>ElasticSearch uses the Hierarchical Navigable Small World algorithm for vector searches</li></ul><h2 id="week-9" tabindex="-1"><a class="header-anchor" href="#week-9"><span>Week 9</span></a></h2><ul><li>Virtual Machine Monitor (VMM) aka Hypervisor: The virtualisation layer between the underlying hardware (e.g. the physical server) and the virtual machines and guest operating systems it supports.</li><li><ul><li>The environment of the VM should appear to be the same as the physical machine</li></ul></li><li><ul><li>Minor decrease in performance only</li></ul></li><li><ul><li>Appears as though in control of system resources</li></ul></li><li>Virtual Machine (VM): A representation of a real machine/server using hardware/software that can host a guest operating system</li><li>Guest Operating System: An operating system that runs in a virtual machine environment that would otherwise run directly on a separate physical system</li></ul><h3 id="typical-virtualization-strategies-mainly-include-the-following-three-aspects" tabindex="-1"><a class="header-anchor" href="#typical-virtualization-strategies-mainly-include-the-following-three-aspects"><span>Typical virtualization strategies mainly include the following three aspects:</span></a></h3><h3 id="_1-de-privileging" tabindex="-1"><a class="header-anchor" href="#_1-de-privileging"><span>1. De-privileging</span></a></h3><ul><li><strong>Trap and Emulate</strong>: The VMM simulates the impact of system and hardware resources by intercepting and simulating the execution of privileged instructions that fall into the VMM.</li><li><strong>Implementation</strong>: This is usually achieved by running the GuestOS at a lower hardware priority than the VMM.</li></ul><h3 id="_2-primary-shadow-structures" tabindex="-1"><a class="header-anchor" href="#_2-primary-shadow-structures"><span>2. Primary/Shadow Structures</span></a></h3><ul><li><strong>Maintaining Shadow Copies</strong>: The VMM maintains a &quot;shadow&quot; copy of critical structures, with its &quot;primary&quot; version operated by the GuestOS, such as the memory page table.</li><li><strong>Purpose</strong>: To ensure that the correct version of the copy is visible to the GuestOS.</li></ul><h3 id="_3-memory-traces" tabindex="-1"><a class="header-anchor" href="#_3-memory-traces"><span>3. Memory Traces</span></a></h3><ul><li><strong>Controlling Access</strong>: Control access to memory to ensure that the shadow and primary structures remain consistent.</li><li><strong>Common Strategies</strong>: Write-protect the primary copy so that it can capture, interpret, and handle update operations that may cause page faults.</li><li><strong>Benefits</strong>: Prevent other people&#39;s applications/code from crashing the server you are using. The picture also includes a schematic diagram, showing the relationship between GuestOS, VMM, and resources, emphasizing the process of interception and simulation.</li></ul><h3 id="there-are-many-hypervisors-that-are-realized-in-many-ways-more-later" tabindex="-1"><a class="header-anchor" href="#there-are-many-hypervisors-that-are-realized-in-many-ways-more-later"><span>There are MANY hypervisors that are realized in many ways (more later)</span></a></h3><ul><li>KVM - Kernel-based Virtual Machine ‚Äì uses raw images, qcow2, and VMware formats.</li><li>LXC - Linux Containers (through libvirt) used to run Linux-based virtual machines.</li><li>QEMU - Quick EMUlator (typically used for development purposes)</li><li>Vmware vSphere runs VMware-based Linux and Windows images through connection with vCenter server.</li><li>Virtuozzo - OS Containers and Kernel-based Virtual Machines supported via libvirt virt_type=parallels.</li><li>zVM - Server virtualization on z Systems and IBM LinuxONE, it can run Linux, z/OS and more.</li><li>Ironic - OpenStack project which provisions bare metal machines (more later).</li></ul><h3 id="full-virtualization-and-para-virtualization" tabindex="-1"><a class="header-anchor" href="#full-virtualization-and-para-virtualization"><span>Full Virtualization and Para-virtualization</span></a></h3><table><thead><tr><th style="text-align:left;">Feature</th><th style="text-align:left;">Full Virtualization</th><th style="text-align:left;">Para-virtualization</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>Definition</strong></td><td style="text-align:left;">Allows unmodified Guest OS to run by simulating complete hardware.</td><td style="text-align:left;">Hypervisor provides a special interface to the Guest OS, which needs to be modified to be aware of and use this interface.</td></tr><tr><td style="text-align:left;"><strong>Guest OS</strong></td><td style="text-align:left;">Unmodified, unaware of the virtualization environment.</td><td style="text-align:left;">Requires modification, also known as &quot;Hypervisor-aware&quot; Guest OS.</td></tr><tr><td style="text-align:left;"><strong>Performance</strong></td><td style="text-align:left;">Relatively low. Due to the need to simulate hardware and trap/translate sensitive instructions (Trap &amp; Emulate), there is a performance overhead.</td><td style="text-align:left;">Relatively high. The Guest OS communicates directly with the Hypervisor through an efficient interface, reducing the overhead of instruction trapping and emulation.</td></tr><tr><td style="text-align:left;"><strong>Compatibility</strong></td><td style="text-align:left;"><strong>Advantage</strong>: Supports unmodified operating systems, good compatibility, and can run various different Guest OS.</td><td style="text-align:left;"><strong>Disadvantage</strong>: Can only run modified Guest OS that supports this specific Hypervisor.</td></tr><tr><td style="text-align:left;"><strong>Security</strong></td><td style="text-align:left;">Good isolation between Guest OS and Hypervisor, because the OS runs on simulated hardware.</td><td style="text-align:left;">The Guest OS needs to interact directly with the Hypervisor, which may theoretically pose a more direct interaction risk (but in practice, the Hypervisor is usually designed very securely).</td></tr><tr><td style="text-align:left;"><strong>Deployment/Maintenance</strong></td><td style="text-align:left;"><strong>Advantage</strong>: Simple deployment, no need to modify the Guest OS.</td><td style="text-align:left;"><strong>Disadvantage</strong>: Need to obtain, install, and maintain modified versions of the Guest OS.</td></tr><tr><td style="text-align:left;"><strong>Examples</strong></td><td style="text-align:left;">VMware Workstation/Fusion, VirtualBox, KVM (when running unmodified OS)</td><td style="text-align:left;">Xen (early versions), OpenVZ (strictly speaking, it is OS-level virtualization, but the concept is similar)</td></tr><tr><td style="text-align:left;"><strong>Summary:</strong></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr></tbody></table><ul><li>The main advantage of <strong>Full Virtualization</strong> is its <strong>compatibility</strong> and <strong>ease of use</strong> (no need to modify the Guest OS), but at the cost of <strong>performance</strong>.</li><li>The main advantage of <strong>Para-virtualization</strong> is its <strong>high performance</strong>, but it sacrifices <strong>compatibility</strong> and requires the modification of the Guest OS. If you need to run various different, unmodified operating systems, Full Virtualization is the better choice. If you pursue the ultimate performance and can accept the modification of the Guest OS, then Para-virtualization may be more suitable.</li></ul><h3 id="hardware-assisted-virtualization-and-binary-translation" tabindex="-1"><a class="header-anchor" href="#hardware-assisted-virtualization-and-binary-translation"><span>Hardware-assisted Virtualization and Binary Translation</span></a></h3><table><thead><tr><th style="text-align:left;">Feature</th><th style="text-align:left;">Hardware-assisted Virtualization</th><th style="text-align:left;">Binary Translation</th></tr></thead><tbody><tr><td style="text-align:left;">Definition</td><td style="text-align:left;">Hardware provides architectural support to run Hypervisor (e.g., KVM)</td><td style="text-align:left;">Implements capture and execution by scanning guest instructions and replacing sensitive instructions with simulated code (e.g., VMWare)</td></tr><tr><td style="text-align:left;">Hardware Requirements</td><td style="text-align:left;">Requires new processor support, many new processors typically have this feature</td><td style="text-align:left;">Does not require hardware support, but implementation is more difficult</td></tr><tr><td style="text-align:left;">Sensitive Instruction Handling</td><td style="text-align:left;">All sensitive instructions can be captured</td><td style="text-align:left;">Sensitive instructions are replaced with simulated code</td></tr><tr><td style="text-align:left;">Performance</td><td style="text-align:left;">Typically high, as hardware directly supports virtualization</td><td style="text-align:left;">May be lower, as an additional translation step is required</td></tr><tr><td style="text-align:left;">Compatibility</td><td style="text-align:left;">High, as hardware support reduces software layer complexity</td><td style="text-align:left;">Relatively high, but may have issues with non-1:1 mapping between instruction sets</td></tr><tr><td style="text-align:left;">Implementation Difficulty</td><td style="text-align:left;">Relatively low, as hardware provides support</td><td style="text-align:left;">Relatively high, as complex software translation mechanisms are required</td></tr><tr><td style="text-align:left;">Instruction Set Mapping</td><td style="text-align:left;">Typically 1:1 mapping, hardware directly supports</td><td style="text-align:left;">Rarely 1:1 mapping, requires translation and simulation</td></tr><tr><td style="text-align:left;">Examples</td><td style="text-align:left;">KVM, Intel VT-x, AMD-V</td><td style="text-align:left;">VMWare, VirtualBox (early versions)</td></tr><tr><td style="text-align:left;">Summary:</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr></tbody></table><ul><li>The main advantage of <strong>Hardware-assisted Virtualization</strong> is its high performance and relatively low implementation difficulty, as hardware directly supports virtualization operations. This makes it the preferred method for modern virtualization technology.</li><li>The main advantage of <strong>Binary Translation</strong> is that it does not rely on specific hardware and can run on older processors. However, its performance may not be as good as hardware-assisted virtualization, and it is more complex to implement. In modern processors, hardware-assisted virtualization is usually the better choice. However, in cases where hardware does not support or maximum compatibility is required, binary translation may be more suitable.</li></ul><h3 id="bare-metal-hypervisor-and-hosted-virtualization" tabindex="-1"><a class="header-anchor" href="#bare-metal-hypervisor-and-hosted-virtualization"><span>Bare Metal Hypervisor and Hosted Virtualization</span></a></h3><table><thead><tr><th style="text-align:left;">Feature</th><th style="text-align:left;">Bare Metal Hypervisor</th><th style="text-align:left;">Hosted Virtualisation</th></tr></thead><tbody><tr><td style="text-align:left;">Running Location</td><td style="text-align:left;">Directly on physical hardware</td><td style="text-align:left;">On top of a host operating system</td></tr><tr><td style="text-align:left;">Examples</td><td style="text-align:left;">VMWare ESX Server</td><td style="text-align:left;">VMWare Workstation</td></tr><tr><td style="text-align:left;">Boot Method</td><td style="text-align:left;">Boots directly on physical machine</td><td style="text-align:left;">First boots the host operating system, then the VMM</td></tr><tr><td style="text-align:left;">Hardware Management</td><td style="text-align:left;">VMM directly manages hardware</td><td style="text-align:left;">Host operating system manages hardware</td></tr><tr><td style="text-align:left;">Performance</td><td style="text-align:left;">Typically higher</td><td style="text-align:left;">May be lower, influenced by the host operating system</td></tr><tr><td style="text-align:left;">Complexity</td><td style="text-align:left;">Implementation is complex, requires direct hardware management</td><td style="text-align:left;">Implementation is simple, utilizing host operating system functions</td></tr><tr><td style="text-align:left;">Driver Support</td><td style="text-align:left;">VMM needs to support all hardware drivers</td><td style="text-align:left;">Utilizes the host operating system&#39;s drivers</td></tr><tr><td style="text-align:left;">System Resource Utilization</td><td style="text-align:left;">Lower, no additional operating system overhead</td><td style="text-align:left;">Higher, including the host operating system&#39;s overhead</td></tr><tr><td style="text-align:left;">Typical Application Scenarios</td><td style="text-align:left;">Enterprise-level data centers, high-performance demand environments</td><td style="text-align:left;">Personal users, development and testing environments</td></tr></tbody></table><h3 id="operating-system-level-virtualization" tabindex="-1"><a class="header-anchor" href="#operating-system-level-virtualization"><span>Operating System Level Virtualization</span></a></h3><table><thead><tr><th style="text-align:left;">Feature</th><th style="text-align:left;">Advantages</th><th style="text-align:left;">Disadvantages</th></tr></thead><tbody><tr><td style="text-align:left;">Resource Utilization</td><td style="text-align:left;"><strong>Lightweight</strong><br>Uses fewer resources, high efficiency</td><td style="text-align:left;"><strong>Resource Sharing</strong><br>Shares resources with other containers, may have resource competition</td></tr><tr><td style="text-align:left;">Performance</td><td style="text-align:left;"><strong>Fast</strong><br>Runs directly on the host operating system, reducing virtualization layer overhead</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">Number of Containers</td><td style="text-align:left;"><strong>More VMs</strong><br>Can run more virtual machines on the same hardware</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">Application Packaging</td><td style="text-align:left;"><strong>Application and Dependency Packaging</strong><br>Can package applications and all OS dependencies into containers</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">Development Proximity</td><td style="text-align:left;"><strong>Closer to Application Development</strong><br>Provides an environment closer to application development</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">Compatibility</td><td style="text-align:left;"><strong>Same OS Applications</strong><br>Can only run applications designed for the same operating system</td><td style="text-align:left;"><strong>Different Guest OS</strong><br>Cannot host different guest operating systems</td></tr><tr><td style="text-align:left;">File System</td><td style="text-align:left;"><strong>Native File System</strong><br>Can only use the native file system</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">Resource Utilization</td><td style="text-align:left;"><strong>Resource Sharing</strong><br>Uses the same resources as other containers</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">This table details some of the main advantages and disadvantages of operating system level virtualization, helping to understand the characteristics of this virtualization technology in terms of resource utilization, performance, compatibility, and more. Operating system level virtualization, also commonly referred to as containerization (e.g., Docker), is very popular in modern software development and deployment, particularly suitable for microservice architectures and continuous integration/continuous deployment (CI/CD) processes.</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr></tbody></table>',88))])}]]),u=JSON.parse('{"path":"/posts/unimelb/COMP90024.html","title":"Cluster and Cloud Computing (COMP90024)","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2025-03-02T00:00:00.000Z","category":["Learning Records"],"tag":["Unimelb"],"description":"Cluster and Cloud Computing (COMP90024) Week 1 Cloud Characteristics ‚Äì On-demand self-service . A consumer can provision computing capabilities as needed without requiring human...","head":[["meta",{"property":"og:url","content":"https://crc011220.github.io/posts/unimelb/COMP90024.html"}],["meta",{"property":"og:site_name","content":"Richard Chen"}],["meta",{"property":"og:title","content":"Cluster and Cloud Computing (COMP90024)"}],["meta",{"property":"og:description","content":"Cluster and Cloud Computing (COMP90024) Week 1 Cloud Characteristics ‚Äì On-demand self-service . A consumer can provision computing capabilities as needed without requiring human..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-05-07T12:41:12.000Z"}],["meta",{"property":"article:tag","content":"Unimelb"}],["meta",{"property":"article:published_time","content":"2025-03-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-07T12:41:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Cluster and Cloud Computing (COMP90024)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-03-02T00:00:00.000Z\\",\\"dateModified\\":\\"2025-05-07T12:41:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Richard Chen\\"}]}"]]},"headers":[{"level":2,"title":"Week 1","slug":"week-1","link":"#week-1","children":[{"level":3,"title":"Cloud Characteristics","slug":"cloud-characteristics","link":"#cloud-characteristics","children":[]},{"level":3,"title":"Grid Computing","slug":"grid-computing","link":"#grid-computing","children":[]}]},{"level":2,"title":"Week 2","slug":"week-2","link":"#week-2","children":[{"level":3,"title":"Horizontal and Vertical Scaling","slug":"horizontal-and-vertical-scaling","link":"#horizontal-and-vertical-scaling","children":[]},{"level":3,"title":"Categories of Flynn\'s Taxonomy","slug":"categories-of-flynn-s-taxonomy","link":"#categories-of-flynn-s-taxonomy","children":[]},{"level":3,"title":"Approaches for Parallelism (where and how)","slug":"approaches-for-parallelism-where-and-how","link":"#approaches-for-parallelism-where-and-how","children":[]},{"level":3,"title":"Erroneous Assumptions of Distributed Systems","slug":"erroneous-assumptions-of-distributed-systems","link":"#erroneous-assumptions-of-distributed-systems","children":[]}]},{"level":2,"title":"Week 3","slug":"week-3","link":"#week-3","children":[{"level":3,"title":"Amdahl\'s Law and Gustafson\'s Law","slug":"amdahl-s-law-and-gustafson-s-law","link":"#amdahl-s-law-and-gustafson-s-law","children":[]},{"level":3,"title":"Environment Modules","slug":"environment-modules","link":"#environment-modules","children":[]},{"level":3,"title":"üõ†Ô∏è Common module Commands","slug":"üõ†Ô∏è-common-module-commands","link":"#üõ†Ô∏è-common-module-commands","children":[]},{"level":3,"title":"üõ†Ô∏è Common slurm Commands","slug":"üõ†Ô∏è-common-slurm-commands","link":"#üõ†Ô∏è-common-slurm-commands","children":[]},{"level":3,"title":"Slurm Job Scripts","slug":"slurm-job-scripts","link":"#slurm-job-scripts","children":[]}]},{"level":2,"title":"Week 4","slug":"week-4","link":"#week-4","children":[{"level":3,"title":"Public Clouds","slug":"public-clouds","link":"#public-clouds","children":[]},{"level":3,"title":"Private (on premise) Clouds","slug":"private-on-premise-clouds","link":"#private-on-premise-clouds","children":[]},{"level":3,"title":"OpenStack","slug":"openstack","link":"#openstack","children":[]}]},{"level":2,"title":"Week 5","slug":"week-5","link":"#week-5","children":[{"level":3,"title":"Container Orchestration Tools","slug":"container-orchestration-tools","link":"#container-orchestration-tools","children":[]},{"level":3,"title":"Persistence","slug":"persistence","link":"#persistence","children":[]},{"level":3,"title":"Docker networking","slug":"docker-networking","link":"#docker-networking","children":[]},{"level":3,"title":"Docker networking modes","slug":"docker-networking-modes","link":"#docker-networking-modes","children":[]},{"level":3,"title":"CI/CD","slug":"ci-cd","link":"#ci-cd","children":[]}]},{"level":2,"title":"Week 6","slug":"week-6","link":"#week-6","children":[{"level":3,"title":"K8S","slug":"k8s","link":"#k8s","children":[]},{"level":3,"title":"SOAP vs REST","slug":"soap-vs-rest","link":"#soap-vs-rest","children":[]},{"level":3,"title":"WDSL (Web Services Description Language)","slug":"wdsl-web-services-description-language","link":"#wdsl-web-services-description-language","children":[]},{"level":3,"title":"ReST Best Practices","slug":"rest-best-practices","link":"#rest-best-practices","children":[]}]},{"level":2,"title":"Week 7","slug":"week-7","link":"#week-7","children":[{"level":3,"title":"FaaS","slug":"faas","link":"#faas","children":[]},{"level":3,"title":"Functions","slug":"functions","link":"#functions","children":[]},{"level":3,"title":"Fission","slug":"fission","link":"#fission","children":[]}]},{"level":2,"title":"Week 8","slug":"week-8","link":"#week-8","children":[{"level":3,"title":"CouchDB vs PostgreSQL vs ElasticSearch","slug":"couchdb-vs-postgresql-vs-elasticsearch","link":"#couchdb-vs-postgresql-vs-elasticsearch","children":[]},{"level":3,"title":"ElasticSearch","slug":"elasticsearch","link":"#elasticsearch","children":[]}]},{"level":2,"title":"Week 9","slug":"week-9","link":"#week-9","children":[{"level":3,"title":"Typical virtualization strategies mainly include the following three aspects:","slug":"typical-virtualization-strategies-mainly-include-the-following-three-aspects","link":"#typical-virtualization-strategies-mainly-include-the-following-three-aspects","children":[]},{"level":3,"title":"1. De-privileging","slug":"_1-de-privileging","link":"#_1-de-privileging","children":[]},{"level":3,"title":"2. Primary/Shadow Structures","slug":"_2-primary-shadow-structures","link":"#_2-primary-shadow-structures","children":[]},{"level":3,"title":"3. Memory Traces","slug":"_3-memory-traces","link":"#_3-memory-traces","children":[]},{"level":3,"title":"There are MANY hypervisors that are realized in many ways (more later)","slug":"there-are-many-hypervisors-that-are-realized-in-many-ways-more-later","link":"#there-are-many-hypervisors-that-are-realized-in-many-ways-more-later","children":[]},{"level":3,"title":"Full Virtualization and Para-virtualization","slug":"full-virtualization-and-para-virtualization","link":"#full-virtualization-and-para-virtualization","children":[]},{"level":3,"title":"Hardware-assisted Virtualization and Binary Translation","slug":"hardware-assisted-virtualization-and-binary-translation","link":"#hardware-assisted-virtualization-and-binary-translation","children":[]},{"level":3,"title":"Bare Metal Hypervisor and Hosted Virtualization","slug":"bare-metal-hypervisor-and-hosted-virtualization","link":"#bare-metal-hypervisor-and-hosted-virtualization","children":[]},{"level":3,"title":"Operating System Level Virtualization","slug":"operating-system-level-virtualization","link":"#operating-system-level-virtualization","children":[]}]}],"git":{"createdTime":1742122096000,"updatedTime":1746621672000,"contributors":[{"name":"Ruochen Chen","email":"ruocchen1220@gmail.com","commits":10}]},"readingTime":{"minutes":20.58,"words":6175},"filePathRelative":"posts/unimelb/COMP90024.md","localizedDate":"March 2, 2025","excerpt":"\\n<h2>Week 1</h2>\\n<h3>Cloud Characteristics</h3>\\n<p>‚Äì On-demand self-service . A consumer can provision computing\\ncapabilities as needed without requiring human interaction with\\neach service provider.\\n‚Äì Networked access . Capabilities are available over the network and\\naccessed through standard mechanisms that promote use by\\nheterogeneous client platforms.</p>","autoDesc":true}')},6262:(e,t)=>{t.A=(e,t)=>{const i=e.__vccOpts||e;for(const[e,s]of t)i[e]=s;return i}}}]);