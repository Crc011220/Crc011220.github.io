"use strict";(self.webpackChunkpersonalweb=self.webpackChunkpersonalweb||[]).push([[1337],{3115:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>t,data:()=>h});var n=a(641);const l={},t=(0,a(6262).A)(l,[["render",function(s,i){return(0,n.uX)(),(0,n.CE)("div",null,i[0]||(i[0]=[(0,n.Fv)('<h1 id="haskell-常见内置函数速查" tabindex="-1"><a class="header-anchor" href="#haskell-常见内置函数速查"><span>Haskell 常见内置函数速查</span></a></h1><h3 id="列表操作" tabindex="-1"><a class="header-anchor" href="#列表操作"><span>列表操作</span></a></h3><table><thead><tr><th>函数</th><th>类型签名</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td><code>head</code></td><td><code>[a] -&gt; a</code></td><td>取列表第一个元素</td><td><code>head [1,2,3] = 1</code></td></tr><tr><td><code>tail</code></td><td><code>[a] -&gt; [a]</code></td><td>去掉列表第一个元素</td><td><code>tail [1,2,3] = [2,3]</code></td></tr><tr><td><code>init</code></td><td><code>[a] -&gt; [a]</code></td><td>去掉列表最后一个元素</td><td><code>init [1,2,3] = [1,2]</code></td></tr><tr><td><code>last</code></td><td><code>[a] -&gt; a</code></td><td>取列表最后一个元素</td><td><code>last [1,2,3] = 3</code></td></tr><tr><td><code>length</code></td><td><code>[a] -&gt; Int</code></td><td>计算列表长度</td><td><code>length [1,2,3] = 3</code></td></tr><tr><td><code>null</code></td><td><code>[a] -&gt; Bool</code></td><td>判断列表是否为空</td><td><code>null [] = True</code></td></tr><tr><td><code>reverse</code></td><td><code>[a] -&gt; [a]</code></td><td>翻转列表</td><td><code>reverse [1,2,3] = [3,2,1]</code></td></tr><tr><td><code>take</code></td><td><code>Int -&gt; [a] -&gt; [a]</code></td><td>取前 n 个元素</td><td><code>take 2 [1,2,3] = [1,2]</code></td></tr><tr><td><code>drop</code></td><td><code>Int -&gt; [a] -&gt; [a]</code></td><td>丢弃前 n 个元素</td><td><code>drop 2 [1,2,3] = [3]</code></td></tr><tr><td><code>splitAt</code></td><td><code>Int -&gt; [a] -&gt; ([a],[a])</code></td><td>分割列表为两部分</td><td><code>splitAt 2 [1,2,3] = ([1,2],[3])</code></td></tr><tr><td><code>filter</code></td><td><code>(a -&gt; Bool) -&gt; [a] -&gt; [a]</code></td><td>过滤满足条件的元素</td><td><code>filter even [1..5] = [2,4]</code></td></tr><tr><td><code>map</code></td><td><code>(a -&gt; b) -&gt; [a] -&gt; [b]</code></td><td>对列表每个元素应用函数</td><td><code>map (+1) [1,2,3] = [2,3,4]</code></td></tr><tr><td><code>foldl</code></td><td><code>(b -&gt; a -&gt; b) -&gt; b -&gt; [a] -&gt; b</code></td><td>从左到右折叠</td><td><code>foldl (+) 0 [1,2,3] = 6</code></td></tr><tr><td><code>foldr</code></td><td><code>(a -&gt; b -&gt; b) -&gt; b -&gt; [a] -&gt; b</code></td><td>从右到左折叠</td><td><code>foldr (:) [] [1,2,3] = [1,2,3]</code></td></tr><tr><td><code>zip</code></td><td><code>[a] -&gt; [b] -&gt; [(a,b)]</code></td><td>两个列表配对成元组列表</td><td><code>zip [1,2] [&#39;a&#39;,&#39;b&#39;] = [(1,&#39;a&#39;),(2,&#39;b&#39;)]</code></td></tr><tr><td><code>zipWith</code></td><td><code>(a -&gt; b -&gt; c) -&gt; [a] -&gt; [b] -&gt; [c]</code></td><td>两个列表的对应元素分别应用一个函数，返回一个新列表</td><td><code>zipWith (+) [1,2] [3,4] = [4,6]</code></td></tr><tr><td><code>concat</code></td><td><code>[[a]] -&gt; [a]</code></td><td>合并列表的列表</td><td><code>concat [[1,2],[3]] = [1,2,3]</code></td></tr><tr><td><code>concatMap</code></td><td><code>(a -&gt; [b]) -&gt; [a] -&gt; [b]</code></td><td>对列表每个元素应用函数，返回一个新列表</td><td><code>concatMap (\\x -&gt; [x,x]) [1,2,3] = [1,1,2,2,3,3]</code></td></tr><tr><td><code>elem</code></td><td><code>Eq a =&gt; a -&gt; [a] -&gt; Bool</code></td><td>判断元素是否在列表中</td><td><code>elem 3 [1,2,3] = True</code></td></tr><tr><td><code>notElem</code></td><td><code>Eq a =&gt; a -&gt; [a] -&gt; Bool</code></td><td>判断元素不在列表中</td><td><code>notElem 4 [1,2,3] = True</code></td></tr><tr><td><code>takeWhile</code></td><td><code>(a -&gt; Bool) -&gt; [a] -&gt; [a]</code></td><td>从头取满足条件的元素</td><td><code>takeWhile (&lt;3) [1,2,3] = [1,2]</code></td></tr><tr><td><code>dropWhile</code></td><td><code>(a -&gt; Bool) -&gt; [a] -&gt; [a]</code></td><td>从头丢弃满足条件的元素</td><td><code>dropWhile (&lt;3) [1,2,3] = [3]</code></td></tr><tr><td><code>span</code></td><td><code>(a -&gt; Bool) -&gt; [a] -&gt; ([a], [a])</code></td><td>从头分割列表，前部分满足条件，后部分不满足，在第一次不满足条件时停止</td><td><code>span (&lt;3) [1,2,3] = ([1,2],[3])</code></td></tr><tr><td><code>all</code></td><td><code>(a -&gt; Bool) -&gt; [a] -&gt; Bool</code></td><td>判断列表所有元素是否满足条件</td><td><code>all (&lt;3) [1,2,3] = True</code></td></tr><tr><td><code>\\\\</code></td><td><code>(a -&gt; Bool) -&gt; [a] -&gt; [a]</code></td><td>列表差集操作符</td><td><code>[1,2,3] \\\\ [1,2] = [3]</code></td></tr><tr><td><code>flip</code></td><td><code>(a -&gt; b -&gt; c) -&gt; b -&gt; a -&gt; c</code></td><td>翻转函数参数顺序</td><td><code>flip (++) &quot;word&quot; &quot; hello&quot; = &quot;hello word&quot;</code></td></tr></tbody></table><hr><h3 id="数字和数学" tabindex="-1"><a class="header-anchor" href="#数字和数学"><span>数字和数学</span></a></h3><table><thead><tr><th>函数</th><th>类型签名</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td><code>(+)</code>, <code>(-)</code>, <code>(*)</code>, <code>div</code>, <code>mod</code></td><td>数字的加减乘除及模运算</td><td>常见算术运算</td><td><code>5 + 3 = 8</code></td></tr><tr><td><code>abs</code></td><td><code>Num a =&gt; a -&gt; a</code></td><td>取绝对值</td><td><code>abs (-5) = 5</code></td></tr><tr><td><code>signum</code></td><td><code>Num a =&gt; a -&gt; a</code></td><td>符号函数</td><td><code>signum (-3) = -1</code></td></tr><tr><td><code>fromIntegral</code></td><td><code>(Integral a, Num b) =&gt; a -&gt; b</code></td><td>整数转换成更一般数字类型</td><td><code>fromIntegral 5 :: Double</code></td></tr><tr><td><code>sqrt</code></td><td><code>Floating a =&gt; a -&gt; a</code></td><td>平方根</td><td><code>sqrt 9 = 3.0</code></td></tr><tr><td><code>(^)</code></td><td><code>(Num a, Integral b) =&gt; a -&gt; b -&gt; a</code></td><td>幂运算</td><td><code>2 ^ 3 = 8</code></td></tr><tr><td><code>quot</code>, <code>rem</code></td><td><code>Integral a =&gt; a -&gt; a -&gt; a</code></td><td>商和余数</td><td><code>quot 7 3 = 2</code>, <code>rem 7 3 = 1</code></td></tr><tr><td><code>max</code>, <code>min</code></td><td><code>Ord a =&gt; a -&gt; a -&gt; a</code></td><td>最大值和最小值</td><td><code>max 3 5 = 5</code>, <code>min 3 5 = 3</code></td></tr></tbody></table><hr><h3 id="布尔逻辑" tabindex="-1"><a class="header-anchor" href="#布尔逻辑"><span>布尔逻辑</span></a></h3><table><thead><tr><th>函数</th><th>类型签名</th><th>说明</th><th>例子</th><th></th><th></th></tr></thead><tbody><tr><td><code>&amp;&amp;</code>, `</td><td><code>Bool</code></td><td><code>, </code>not`</td><td><code>Bool -&gt; Bool -&gt; Bool</code> / <code>Bool -&gt; Bool</code></td><td>逻辑与、或、非</td><td><code>True &amp;&amp; False = False</code></td></tr><tr><td><code>otherwise</code></td><td><code>Bool</code></td><td>总为真，用于守卫</td><td><code>otherwise = True</code></td><td></td><td></td></tr></tbody></table><hr><h3 id="字符串和字符" tabindex="-1"><a class="header-anchor" href="#字符串和字符"><span>字符串和字符</span></a></h3><table><thead><tr><th>函数</th><th>类型签名</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td><code>head</code>, <code>tail</code></td><td><code>[Char] -&gt; Char</code> / <code>[Char] -&gt; [Char]</code></td><td>取首字符和尾字符串</td><td><code>head &quot;hello&quot; = &#39;h&#39;</code></td></tr><tr><td><code>length</code></td><td><code>[Char] -&gt; Int</code></td><td>计算字符串长度</td><td><code>length &quot;abc&quot; = 3</code></td></tr><tr><td><code>++</code></td><td><code>[a] -&gt; [a] -&gt; [a]</code></td><td>字符串连接</td><td><code>&quot;hello&quot; ++ &quot; world&quot; = &quot;hello world&quot;</code></td></tr></tbody></table><h3 id="语法-函数" tabindex="-1"><a class="header-anchor" href="#语法-函数"><span>语法/函数</span></a></h3><table><thead><tr><th>语法/函数</th><th>示例代码</th><th>说明/作用</th><th>常用场景或备注</th></tr></thead><tbody><tr><td><strong>匿名函数</strong>（Lambda）</td><td><code>\\x -&gt; x + 1</code></td><td>定义没有名字的函数，<code>x</code> 是参数，右边是函数体</td><td>传递给 <code>map</code>, <code>filter</code> 等高阶函数</td></tr><tr><td>多参数匿名函数</td><td><code>\\x y -&gt; x * y</code></td><td>函数可有多个参数</td><td><code>zipWith (\\x y -&gt; x + y) xs ys</code></td></tr><tr><td><strong>case表达式</strong></td><td><code>case x of 0 -&gt; &quot;zero&quot;; _ -&gt; &quot;nonzero&quot;</code></td><td>模式匹配，对变量的值分支处理</td><td>替代复杂的 if/then/else</td></tr><tr><td><strong>函数箭头 <code>-&gt;</code></strong></td><td><code>f x = x + 1</code><br><code>\\x -&gt; x + 1</code><br><code>case x of 1 -&gt; ...</code></td><td>用于函数定义和case匹配中的模式和结果分隔</td><td>任何函数定义、case分支语法</td></tr><tr><td><strong>通配符 <code>_</code></strong></td><td><code>case xs of [] -&gt; 0; _ -&gt; 1</code></td><td>匹配任意不关心的值</td><td>忽略变量，减少模式匹配冗余</td></tr><tr><td><strong>let/in 绑定</strong></td><td><code>let y = 2*x in y + 3</code></td><td>在表达式中局部定义变量</td><td>用于复杂计算局部绑定</td></tr><tr><td><strong>where绑定</strong></td><td><code>f x = y + 3 where y = 2*x</code></td><td>在函数定义后局部绑定变量</td><td>增加可读性，局部命名</td></tr><tr><td><strong>if then else</strong></td><td><code>if x &gt; 0 then &quot;pos&quot; else &quot;neg&quot;</code></td><td>条件判断表达式</td><td>简单条件表达式替代case</td></tr><tr><td><strong>高阶函数 map</strong></td><td><code>map (\\x -&gt; x*2) [1,2,3]</code></td><td>对列表每个元素应用函数</td><td>列表元素批量转换</td></tr><tr><td><strong>高阶函数 filter</strong></td><td><code>filter even [1..10]</code></td><td>过滤满足条件的元素</td><td>过滤列表中满足条件的元素</td></tr><tr><td><strong>高阶函数 foldl</strong></td><td><code>foldl (+) 0 [1,2,3]</code></td><td>从左开始累积</td><td>求和、求积、累积结果</td></tr><tr><td><strong>高阶函数 foldr</strong></td><td><code>foldr (:) [] [1,2,3]</code></td><td>从右开始累积</td><td>构造列表，递归遍历</td></tr><tr><td><strong>zip</strong></td><td><code>zip [1,2] [&#39;a&#39;,&#39;b&#39;]</code></td><td>组合两个列表成元组列表</td><td>两个列表按位置配对</td></tr><tr><td><strong>zipWith</strong></td><td><code>zipWith (+) [1,2] [3,4]</code></td><td>对两个列表对应元素应用函数</td><td>同时处理两个列表</td></tr><tr><td><strong>function composition (.)</strong></td><td><code>(negate . abs) (-5)</code></td><td>函数组合，先执行右边，再执行左边</td><td>简化多函数嵌套调用</td></tr><tr><td><strong>currying</strong></td><td><code>add x y = x + y</code> 实际为 <code>add = \\x -&gt; \\y -&gt; x + y</code></td><td>函数自动柯里化，可部分应用</td><td>方便传递参数较少的函数</td></tr><tr><td><strong>Maybe Monad do写法</strong></td><td><code>do { x &lt;- Just 1; return (x+1) }</code></td><td>链式处理可能失败的计算</td><td>处理带有 <code>Nothing</code> 可能性的计算</td></tr><tr><td><code>read</code></td><td><code>read &quot;123&quot; :: Int</code></td><td>将字符串转换为指定类型</td><td>将字符串转换为整数</td></tr><tr><td><code>show</code></td><td><code>show 123</code></td><td>将指定类型转换为字符串</td><td>将整数转换为字符串</td></tr></tbody></table><h3 id="类" tabindex="-1"><a class="header-anchor" href="#类"><span>类</span></a></h3><div class="language-haskell line-numbers-mode" data-highlighter="shiki" data-ext="haskell" data-title="haskell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">data</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;"> Square</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Red</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Black</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Empty</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> deriving</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Eq</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Ord</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Show</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 定义一个Square类，有三个值：Red, Black, Empty</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">instance</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;"> Show</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;"> Square</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> where</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> -- 重写Show类，使得Square可以被自定义打印</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    show </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Red</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Red111&quot;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    show </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Black</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Black11&quot;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    show </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Empty11&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">instance</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;"> Eq</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;"> Square</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> where</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> -- 重写Eq类，使得Square可以被比较</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    Red</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> == </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Red</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- a 代表列表中的元素类型</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">data</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;"> List</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ListNode</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">List</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) | </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ListEnd</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 这样的类型是定义死的</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">data</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;"> List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ListNode</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;"> Int</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;"> List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ListEnd</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">data</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;"> Person</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Person</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> b</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> deriving</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Show</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tellMan</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: (</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Show</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Show</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) =&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Person</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">String</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">tellMan (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Person</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> name age) = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Name: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ++ name ++ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;, Age: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ++ show age</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">data</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;"> Vector</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Vector</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> deriving</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Show</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vplus</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: (</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Num</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) =&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Vector</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Vector</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Vector</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">vplus (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Vector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a b c) (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Vector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a&#39; b&#39; c&#39;) = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Vector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (a + a&#39;) (b + b&#39;) (c + c&#39;)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vmult</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: (</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Num</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) =&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Vector</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Vector</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">vmult (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Vector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a b c) k = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Vector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (a * k) (b * k) (c * k)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 递归定义的列表</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">data</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;"> List</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ListNode</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">List</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) | </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ListEnd</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mylength</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">List</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Int</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">mylength </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ListEnd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">         = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">mylength (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ListNode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> _ xs) = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + mylength xs</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mymaximum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Ord</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">List</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">mymaximum </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ListEnd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = error </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Empty list has no maximum&quot;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">mymaximum (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ListNode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x xs) = maxHelper x xs</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  where</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    maxHelper currMax </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ListEnd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = currMax</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    maxHelper currMax (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ListNode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> y ys) = maxHelper (max currMax y) ys</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tree" tabindex="-1"><a class="header-anchor" href="#tree"><span>Tree</span></a></h3><div class="language-haskell line-numbers-mode" data-highlighter="shiki" data-ext="haskell" data-title="haskell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 二叉树</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">data</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;"> BST</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">BST</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">BST</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">deriving</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Eq</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Show</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 多叉树</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">data</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;"> Tree</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Node</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Tree</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">deriving</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Eq</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Show</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 1. 最大深度</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">maxDepth</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">BST</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Int</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">maxDepth </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">maxDepth (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> l _ r) = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + max (maxDepth l) (maxDepth r)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 2. 最小深度</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">minDepth</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">BST</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Int</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">minDepth </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">minDepth (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> l _ r) = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + min (minDepth l) (minDepth r)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 3. 判断是否为空</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isEmpty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">BST</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Bool</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">isEmpty </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">isEmpty _     = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">False</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 4. 判断是否平衡（最大深度和最小深度差&lt;=1）</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isBalanced</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">BST</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Bool</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">isBalanced t = maxDepth t - minDepth t &lt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 5. 中序遍历</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">inorder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">BST</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">inorder </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">inorder (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> l v r) = inorder l ++ [v] ++ inorder r</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 6. 插入元素到BST</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">bstInsert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Ord</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">BST</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">BST</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">bstInsert x </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Node</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> Empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Empty</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">bstInsert x (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> l v r)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  | x &lt;= v    = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (bstInsert x l) v r</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  | otherwise = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> l v (bstInsert x r)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 7. 判断元素是否存在</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">bstSearch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Ord</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">BST</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Bool</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">bstSearch _ </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">False</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">bstSearch x (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> l v r)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  | x == v    = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  | x &lt; v     = bstSearch x l</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  | otherwise = bstSearch x r</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 8. 计算节点总数</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">countNodes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">BST</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Int</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">countNodes </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">countNodes (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> l _ r) = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + countNodes l + countNodes r</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 9. 计算叶子节点数（左右子树都为空）</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">countLeaves</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">BST</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Int</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">countLeaves </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">countLeaves (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Node</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> Empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> _ </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">countLeaves (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> l _ r) = countLeaves l + countLeaves r</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 10. 镜像树（交换左右子树）</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mirrorTree</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">BST</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">BST</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">mirrorTree </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Empty</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">mirrorTree (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> l v r) = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (mirrorTree r) v (mirrorTree l)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 11. 判断是否为BST</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isBST</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Ord</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">BST</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Bool</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">isBST </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">isBST (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> l v r) = isBST l &amp;&amp; isBST r &amp;&amp; all (&lt; v) (inorder l) &amp;&amp; all (&gt; v) (inorder r)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 12. list to tree</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">listToTree</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">BST</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">listToTree </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Empty</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">listToTree (x:xs) = bstInsert x (listToTree xs)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 13. 判断是否两树是一个shape</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isSameShape</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">BST</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">BST</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Bool</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">isSameShape </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Empty</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> Empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">isSameShape (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> l1 v1 r1) (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> l2 v2 r2) = isSameShape l1 l2 &amp;&amp; isSameShape r1 r2</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">isSameShape _ _ = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">False</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_1-计算树的高度-深度" tabindex="-1"><a class="header-anchor" href="#_1-计算树的高度-深度"><span>1. 计算树的高度（深度）</span></a></h3><div class="language-haskell line-numbers-mode" data-highlighter="shiki" data-ext="haskell" data-title="haskell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">height</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">BST</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Int</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">height </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">height (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> l _ r) = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + max (height l) (height r)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_2-判断树是否是满二叉树-每个节点要么是叶子-要么有两个子节点" tabindex="-1"><a class="header-anchor" href="#_2-判断树是否是满二叉树-每个节点要么是叶子-要么有两个子节点"><span>2. 判断树是否是满二叉树（每个节点要么是叶子，要么有两个子节点）</span></a></h3><div class="language-haskell line-numbers-mode" data-highlighter="shiki" data-ext="haskell" data-title="haskell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isFull</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">BST</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Bool</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">isFull </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">isFull (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Node</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> Empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> _ </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">isFull (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> l _ r) = isFull l &amp;&amp; isFull r &amp;&amp; (l /= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &amp;&amp; r /= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">isFull _ = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">False</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_3-查找某个元素是否在树中存在" tabindex="-1"><a class="header-anchor" href="#_3-查找某个元素是否在树中存在"><span>3. 查找某个元素是否在树中存在</span></a></h3><div class="language-haskell line-numbers-mode" data-highlighter="shiki" data-ext="haskell" data-title="haskell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">contains</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Eq</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">BST</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Bool</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">contains _ </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">False</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">contains x (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> l v r)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  | x == v = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  | otherwise = contains x l || contains x r</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_4-将树转成列表-中序遍历" tabindex="-1"><a class="header-anchor" href="#_4-将树转成列表-中序遍历"><span>4. 将树转成列表（中序遍历）</span></a></h3><div class="language-haskell line-numbers-mode" data-highlighter="shiki" data-ext="haskell" data-title="haskell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">BST</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">toList </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">toList (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> l v r) = toList l ++ [v] ++ toList r</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_5-计算树中节点值的总和-假设存的值是数字" tabindex="-1"><a class="header-anchor" href="#_5-计算树中节点值的总和-假设存的值是数字"><span>5. 计算树中节点值的总和（假设存的值是数字）</span></a></h3><div class="language-haskell line-numbers-mode" data-highlighter="shiki" data-ext="haskell" data-title="haskell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sumTree</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Num</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">BST</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">sumTree </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">sumTree (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> l v r) = sumTree l + v + sumTree r</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_6-找出树中的最大值-假设树非空且元素可比较" tabindex="-1"><a class="header-anchor" href="#_6-找出树中的最大值-假设树非空且元素可比较"><span>6. 找出树中的最大值（假设树非空且元素可比较）</span></a></h3><div class="language-haskell line-numbers-mode" data-highlighter="shiki" data-ext="haskell" data-title="haskell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 非BST 的情况</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">maxValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Ord</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">BST</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">maxValue </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = error </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Empty tree&quot;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">maxValue (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> l v r) = maximum [v, maxL, maxR]</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  where</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    maxL = </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> l == </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Empty</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> then</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> v </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> maxValue l</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    maxR = </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> r == </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Empty</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> then</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> v </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> maxValue r</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- BST 的情况</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">maxValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Ord</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">BST</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">maxValue </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = error </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Empty tree&quot;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">maxValue (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> _ v </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) = v            </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 没有右子树，当前就是最大值</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">maxValue (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> _ _ r)     = maxValue r   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 否则继续向右找</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_7-判断树是否对称-镜像对称" tabindex="-1"><a class="header-anchor" href="#_7-判断树是否对称-镜像对称"><span>7. 判断树是否对称（镜像对称）</span></a></h3><div class="language-haskell line-numbers-mode" data-highlighter="shiki" data-ext="haskell" data-title="haskell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isSymmetric</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Eq</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">BST</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Bool</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">isSymmetric </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">isSymmetric (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> l _ r) = isMirror l r</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isMirror</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Eq</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">BST</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">BST</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Bool</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">isMirror </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Empty</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> Empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">isMirror (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> l1 v1 r1) (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> l2 v2 r2) =</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  v1 == v2 &amp;&amp; isMirror l1 r2 &amp;&amp; isMirror r1 l2</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">isMirror _ _ = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">False</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_8-计算路径总和-判断是否存在根到叶子路径-路径和等于给定值" tabindex="-1"><a class="header-anchor" href="#_8-计算路径总和-判断是否存在根到叶子路径-路径和等于给定值"><span>8. 计算路径总和（判断是否存在根到叶子路径，路径和等于给定值）</span></a></h3><div class="language-haskell line-numbers-mode" data-highlighter="shiki" data-ext="haskell" data-title="haskell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hasPathSum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: (</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Num</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Eq</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) =&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">BST</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Bool</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">hasPathSum </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> _ = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">False</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">hasPathSum (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Node</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> Empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> v </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) sum = v == sum</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">hasPathSum (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> l v r) sum =</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  hasPathSum l (sum - v) || hasPathSum r (sum - v)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题"><span>常见问题</span></a></h2><div class="language-haskell line-numbers-mode" data-highlighter="shiki" data-ext="haskell" data-title="haskell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 手写实现Haskell常用列表/字符串操作函数</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 筛选出非空列表</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> notNull x = not (null x) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> filter notNull [[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 筛选出大写字母</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">filter (`elem` [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;A&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">..</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Z&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello World&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 筛选出小于1000的偶数的平方的和</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">sum (takeWhile (&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) (filter even (map (^</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">..])))</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 计算多项式</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">sum $ zipWith (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) c $ map (x^) [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">..]</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- intersperse: 在列表元素之间插入分隔符</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">intersperse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] -&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">intersperse _ </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">intersperse _ [x] = [x]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">intersperse sep (x:xs) = x : sep : intersperse sep xs</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- intercalate: 在列表的列表之间插入分隔符列表，然后连接</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">intercalate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] -&gt; [[</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]] -&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">intercalate _ </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">intercalate _ [xs] = xs</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">intercalate sep (xs:xss) = xs ++ sep ++ intercalate sep xss</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- transpose: 转置矩阵</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">transpose</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: [[</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]] -&gt; [[</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">transpose </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">transpose (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : xss) = transpose xss</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">transpose ((x:xs) : xss) = (x : [h | (h:_) &lt;- xss]) : transpose (xs : [t | (_:t) &lt;- xss])</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- concat: 连接列表的列表</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">concat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: [[</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]] -&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">concat </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">concat (xs:xss) = xs ++ concat xss</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- concatMap: 对每个元素应用函数然后连接结果</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">concatMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: (</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]) -&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] -&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">concatMap _ </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">concatMap f (x:xs) = f x ++ concatMap f xs</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- and: 逻辑AND操作 所有元素都是 True → 返回 True</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">and</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: [</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Bool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Bool</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">and </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">and (x:xs) = x &amp;&amp; and xs</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- or: 逻辑OR操作  </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">or</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: [</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Bool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Bool</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">or </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">False</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">or (x:xs) = x || or xs</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- any: 检查是否有任何元素满足条件</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: (</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Bool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) -&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Bool</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">any _ </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">False</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">any p (x:xs) = p x || any p xs</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- all: 检查是否所有元素都满足条件</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">all</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: (</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Bool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) -&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Bool</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">all _ </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">all p (x:xs) = p x &amp;&amp; all p xs</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- iterate: 无限迭代应用函数</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">iterate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: (</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) -&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">iterate f x = x : iterate f (f x)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- splitAt: 在指定位置分割列表</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">splitAt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] -&gt; ([</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">splitAt </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> xs = (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, xs)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">splitAt _ </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">splitAt n (x:xs) = </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (ys, zs) = splitAt (n-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) xs </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (x:ys, zs)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- dropWhile: 丢弃满足条件的前缀元素</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dropWhile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: (</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Bool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) -&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] -&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">dropWhile _ </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">dropWhile p (x:xs)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  | p x = dropWhile p xs</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  | otherwise = x:xs</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- span: 分割列表，前部分满足条件，后部分不满足，在第一次不满足条件时停止</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">span</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: (</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Bool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) -&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] -&gt; ([</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">span _ </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">span p (x:xs)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  | p x = </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (ys, zs) = span p xs </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (x:ys, zs)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  | otherwise = (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, x:xs)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- break: span的对偶，找到第一个满足条件的位置分割</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: (</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Bool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) -&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] -&gt; ([</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">break p = span (not . p)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- partition: 根据条件分割列表为两部分 不要求连续</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">partition</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: (</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Bool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) -&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] -&gt; ([</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">partition _ </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">partition p (x:xs) = </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  let</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (ys, zs) = partition p xs</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  in</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> p x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">then</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (x:ys, zs) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (ys, x:zs)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- sort: 简单的插入排序</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Ord</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] -&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">sort </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">sort (x:xs) = insert x (sort xs)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  where</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    insert y </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = [y]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    insert y (z:zs)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      | y &lt;= z = y : z : zs</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      | otherwise = z : insert y zs</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- group: 将相邻的相同元素分组</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">group</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Eq</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] -&gt; [[</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">group </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">group (x:xs) = (x : takeWhile (== x) xs) : group (dropWhile (== x) xs)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- find: 查找第一个满足条件的元素</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">find</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: (</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Bool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) -&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Maybe</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">find _ </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Nothing</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">find p (x:xs)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  | p x = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Just</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  | otherwise = find p xs</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- elemIndex: 查找元素的第一个索引</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">elemIndex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Eq</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Maybe</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;"> Int</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">elemIndex x xs = findIndex (== x) xs</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- findIndex: 查找满足条件的第一个元素的索引</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">findIndex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: (</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Bool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) -&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Maybe</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;"> Int</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">findIndex p xs = findIndex&#39; p xs </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  where</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    findIndex&#39; _ </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> _ = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Nothing</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    findIndex&#39; p (x:xs) n</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      | p x = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Just</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      | otherwise = findIndex&#39; p xs (n+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- elemIndices: 查找元素的所有索引</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">elemIndices</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Eq</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] -&gt; [</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">elemIndices x xs = findIndices (== x) xs</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- findIndices: 查找满足条件的所有元素的索引</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">findIndices</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: (</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Bool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) -&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] -&gt; [</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">findIndices p xs = findIndices&#39; p xs </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  where</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    findIndices&#39; _ </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> _ = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    findIndices&#39; p (x:xs) n</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      | p x = n : findIndices&#39; p xs (n+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      | otherwise = findIndices&#39; p xs (n+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- lines: 按换行符分割字符串</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">lines</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; [</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">lines </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">lines s = </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (l, s&#39;) = break (== </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) s</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">          in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> l : </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">case</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s&#39; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">of</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">                   []</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                   (_:s&#39;&#39;) -&gt; lines s&#39;&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- unlines: 用换行符连接字符串列表</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">unlines</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: [</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">String</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">unlines </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">unlines (x:xs) = x ++ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ++ unlines xs</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- words: 按空白字符分割字符串</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">words</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; [</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">words s = </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">case</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> dropWhile isSpace s </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">of</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            &quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            s&#39; -&gt; w : words s&#39;&#39;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                  where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (w, s&#39;&#39;) = break isSpace s&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- unwords: 用空格连接字符串列表</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">unwords</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: [</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">String</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">unwords </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">unwords [w] = w</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">unwords (w:ws) = w ++ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot; &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ++ unwords ws</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 辅助函数：判断是否为空白字符</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isSpace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Bool</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">isSpace c = c `elem` </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot; </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\t\\n\\r</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- intersect: 求两个列表的交集</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">intersect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Eq</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] -&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] -&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">intersect </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> _ = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">intersect (x:xs) ys</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  | x `elem` ys = x : intersect xs ys</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  | otherwise = intersect xs ys</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- union: 求两个列表的并集</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">union</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Eq</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] -&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] -&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">union </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ys = ys</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">union (x:xs) ys</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  | x `elem` ys = union xs ys</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  | otherwise = x : union xs ys</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- nub: 去除列表中的重复元素</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nub</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Eq</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] -&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">nub </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">nub (x:xs) = x : nub (filter (/= x) xs)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- delete: 删除列表中第一个匹配的元素</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">delete</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Eq</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] -&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">delete _ </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">delete y (x:xs)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  | x == y = xs</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  | otherwise = x : delete y xs</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- deleteAll: 删除列表中所有匹配的元素</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">deleteAll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Eq</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] -&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">deleteAll _ </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">deleteAll y (x:xs)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  | x == y    = deleteAll y xs   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 跳过当前元素，继续删除</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  | otherwise = x : deleteAll y xs  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 保留当前元素，继续删除</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- insert: 在有序列表中插入元素</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">insert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Ord</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] -&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">insert x </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = [x]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">insert x (y:ys)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  | x &lt;= y = x : y : ys</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  | otherwise = y : insert x ys</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- isPrefixOf: 检查是否为前缀</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isPrefixOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Eq</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] -&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Bool</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">isPrefixOf </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> _ = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">isPrefixOf _ </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">False</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">isPrefixOf (x:xs) (y:ys) = x == y &amp;&amp; isPrefixOf xs ys</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- isSuffixOf: 检查是否为后缀</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isSuffixOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Eq</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] -&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Bool</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">isSuffixOf xs ys = isPrefixOf (reverse xs) (reverse ys)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- isInfixOf: 检查是否为子列表</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isInfixOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Eq</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] -&gt; [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Bool</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">isInfixOf </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> _ = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">isInfixOf _ </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">False</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">isInfixOf xs ys@(_:ys&#39;)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  | isPrefixOf xs ys = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  | otherwise = isInfixOf xs ys&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符串处理" tabindex="-1"><a class="header-anchor" href="#字符串处理"><span>字符串处理</span></a></h2><p>好的，下面是针对之前提到的<strong>常见字符串题目</strong>的 Haskell <strong>标准写法答案</strong>，从简单到复杂：</p><hr><h3 id="_1️⃣-统计某字符出现次数" tabindex="-1"><a class="header-anchor" href="#_1️⃣-统计某字符出现次数"><span>1️⃣ 统计某字符出现次数</span></a></h3><div class="language-haskell line-numbers-mode" data-highlighter="shiki" data-ext="haskell" data-title="haskell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">countChar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Int</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">countChar c = length . filter (== c)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_2️⃣-去除所有空格" tabindex="-1"><a class="header-anchor" href="#_2️⃣-去除所有空格"><span>2️⃣ 去除所有空格</span></a></h3><div class="language-haskell line-numbers-mode" data-highlighter="shiki" data-ext="haskell" data-title="haskell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">removeSpaces</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">String</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">removeSpaces = filter (/= </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39; &#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_3️⃣-判断是否是回文" tabindex="-1"><a class="header-anchor" href="#_3️⃣-判断是否是回文"><span>3️⃣ 判断是否是回文</span></a></h3><div class="language-haskell line-numbers-mode" data-highlighter="shiki" data-ext="haskell" data-title="haskell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isPalindrome</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Bool</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">isPalindrome s = s == reverse s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_4️⃣-统计每个字符出现次数" tabindex="-1"><a class="header-anchor" href="#_4️⃣-统计每个字符出现次数"><span>4️⃣ 统计每个字符出现次数</span></a></h3><div class="language-haskell line-numbers-mode" data-highlighter="shiki" data-ext="haskell" data-title="haskell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> Data.List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">group</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">countFreqs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; [(</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">countFreqs s = map (\\g -&gt; (head g, length g)) . group . sort $ s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_5️⃣-反转字符串" tabindex="-1"><a class="header-anchor" href="#_5️⃣-反转字符串"><span>5️⃣ 反转字符串</span></a></h3><div class="language-haskell line-numbers-mode" data-highlighter="shiki" data-ext="haskell" data-title="haskell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">reverseStr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">String</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">reverseStr = reverse</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_6️⃣-run-length-encoding-压缩" tabindex="-1"><a class="header-anchor" href="#_6️⃣-run-length-encoding-压缩"><span>6️⃣ Run-Length Encoding（压缩）</span></a></h3><div class="language-haskell line-numbers-mode" data-highlighter="shiki" data-ext="haskell" data-title="haskell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> Data.List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">group</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">rle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">String</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">rle = concatMap (\\g -&gt; [head g] ++ show (length g)) . group</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_7️⃣-run-length-decoding-解压" tabindex="-1"><a class="header-anchor" href="#_7️⃣-run-length-decoding-解压"><span>7️⃣ Run-Length Decoding（解压）</span></a></h3><div class="language-haskell line-numbers-mode" data-highlighter="shiki" data-ext="haskell" data-title="haskell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> Data.Char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isDigit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">decodeRLE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">String</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">decodeRLE </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">decodeRLE (c:cs) =</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  let</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (digits, rest) = span isDigit cs</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> replicate (read digits) c ++ decodeRLE rest</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_8️⃣-将每个单词首字母大写" tabindex="-1"><a class="header-anchor" href="#_8️⃣-将每个单词首字母大写"><span>8️⃣ 将每个单词首字母大写</span></a></h3><div class="language-haskell line-numbers-mode" data-highlighter="shiki" data-ext="haskell" data-title="haskell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> Data.Char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toUpper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">capitalizeWords</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">String</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">capitalizeWords = unwords . map capitalize . words</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> capitalize (x:xs) = toUpper x : xs</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        capitalize </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_9️⃣-按空格分词-其实就是-words" tabindex="-1"><a class="header-anchor" href="#_9️⃣-按空格分词-其实就是-words"><span>9️⃣ 按空格分词（其实就是 <code>words</code>）</span></a></h3><div class="language-haskell line-numbers-mode" data-highlighter="shiki" data-ext="haskell" data-title="haskell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">splitWords</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; [</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">splitWords = words</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="🔟-移除重复字符-保留顺序" tabindex="-1"><a class="header-anchor" href="#🔟-移除重复字符-保留顺序"><span>🔟 移除重复字符，保留顺序</span></a></h3><div class="language-haskell line-numbers-mode" data-highlighter="shiki" data-ext="haskell" data-title="haskell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> Data.List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nub</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">removeDup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">String</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">removeDup = nub</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_1️⃣1️⃣-子序列" tabindex="-1"><a class="header-anchor" href="#_1️⃣1️⃣-子序列"><span>1️⃣1️⃣ 子序列</span></a></h3><div class="language-haskell line-numbers-mode" data-highlighter="shiki" data-ext="haskell" data-title="haskell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">subsequences</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: [</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] -&gt; [[</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">subsequences </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">subsequences (x:xs) = </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> rest = subsequences xs</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                      in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> rest ++ map (x:) rest</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_1️⃣2️⃣-所有长度为-k-的子串" tabindex="-1"><a class="header-anchor" href="#_1️⃣2️⃣-所有长度为-k-的子串"><span>1️⃣2️⃣ 所有长度为 k 的子串</span></a></h3><div class="language-haskell line-numbers-mode" data-highlighter="shiki" data-ext="haskell" data-title="haskell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">substringsOfLength</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; [</span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">substringsOfLength k s</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  | length s &lt; k = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  | otherwise    = take k s : substringsOfLength k (tail s)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_1️⃣3️⃣-判断两个字符串是否是字母异位词-anagram" tabindex="-1"><a class="header-anchor" href="#_1️⃣3️⃣-判断两个字符串是否是字母异位词-anagram"><span>1️⃣3️⃣ 判断两个字符串是否是字母异位词（Anagram）</span></a></h3><div class="language-haskell line-numbers-mode" data-highlighter="shiki" data-ext="haskell" data-title="haskell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> Data.List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isAnagram</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :: </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#D19A66;">Bool</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">isAnagram s1 s2 = sort s1 == sort s2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>',87)]))}]]),h=JSON.parse('{"path":"/zh/posts/declarative/haskell%E9%80%9F%E8%AE%B0.html","title":"Haskell 常见内置函数速查","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-06-14T00:00:00.000Z","category":["Learning Records"],"tag":["Declarative Programming"],"description":"Haskell 常见内置函数速查 列表操作 数字和数学 布尔逻辑 字符串和字符 语法/函数 类 Tree 1. 计算树的高度（深度） 2. 判断树是否是满二叉树（每个节点要么是叶子，要么有两个子节点） 3. 查找某个元素是否在树中存在 4. 将树转成列表（中序遍历） 5. 计算树中节点值的总和（假设存的值是数字） 6. 找出树中的最大值（假设树非空且元...","head":[["meta",{"property":"og:url","content":"https://crc011220.github.io/zh/posts/declarative/haskell%E9%80%9F%E8%AE%B0.html"}],["meta",{"property":"og:site_name","content":"Ruochen Chen"}],["meta",{"property":"og:title","content":"Haskell 常见内置函数速查"}],["meta",{"property":"og:description","content":"Haskell 常见内置函数速查 列表操作 数字和数学 布尔逻辑 字符串和字符 语法/函数 类 Tree 1. 计算树的高度（深度） 2. 判断树是否是满二叉树（每个节点要么是叶子，要么有两个子节点） 3. 查找某个元素是否在树中存在 4. 将树转成列表（中序遍历） 5. 计算树中节点值的总和（假设存的值是数字） 6. 找出树中的最大值（假设树非空且元..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-19T00:35:51.000Z"}],["meta",{"property":"article:tag","content":"Declarative Programming"}],["meta",{"property":"article:published_time","content":"2025-06-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-19T00:35:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Haskell 常见内置函数速查\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-14T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-19T00:35:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ruochen Chen\\"}]}"]]},"headers":[{"level":3,"title":"列表操作","slug":"列表操作","link":"#列表操作","children":[]},{"level":3,"title":"数字和数学","slug":"数字和数学","link":"#数字和数学","children":[]},{"level":3,"title":"布尔逻辑","slug":"布尔逻辑","link":"#布尔逻辑","children":[]},{"level":3,"title":"字符串和字符","slug":"字符串和字符","link":"#字符串和字符","children":[]},{"level":3,"title":"语法/函数","slug":"语法-函数","link":"#语法-函数","children":[]},{"level":3,"title":"类","slug":"类","link":"#类","children":[]},{"level":3,"title":"Tree","slug":"tree","link":"#tree","children":[]},{"level":3,"title":"1. 计算树的高度（深度）","slug":"_1-计算树的高度-深度","link":"#_1-计算树的高度-深度","children":[]},{"level":3,"title":"2. 判断树是否是满二叉树（每个节点要么是叶子，要么有两个子节点）","slug":"_2-判断树是否是满二叉树-每个节点要么是叶子-要么有两个子节点","link":"#_2-判断树是否是满二叉树-每个节点要么是叶子-要么有两个子节点","children":[]},{"level":3,"title":"3. 查找某个元素是否在树中存在","slug":"_3-查找某个元素是否在树中存在","link":"#_3-查找某个元素是否在树中存在","children":[]},{"level":3,"title":"4. 将树转成列表（中序遍历）","slug":"_4-将树转成列表-中序遍历","link":"#_4-将树转成列表-中序遍历","children":[]},{"level":3,"title":"5. 计算树中节点值的总和（假设存的值是数字）","slug":"_5-计算树中节点值的总和-假设存的值是数字","link":"#_5-计算树中节点值的总和-假设存的值是数字","children":[]},{"level":3,"title":"6. 找出树中的最大值（假设树非空且元素可比较）","slug":"_6-找出树中的最大值-假设树非空且元素可比较","link":"#_6-找出树中的最大值-假设树非空且元素可比较","children":[]},{"level":3,"title":"7. 判断树是否对称（镜像对称）","slug":"_7-判断树是否对称-镜像对称","link":"#_7-判断树是否对称-镜像对称","children":[]},{"level":3,"title":"8. 计算路径总和（判断是否存在根到叶子路径，路径和等于给定值）","slug":"_8-计算路径总和-判断是否存在根到叶子路径-路径和等于给定值","link":"#_8-计算路径总和-判断是否存在根到叶子路径-路径和等于给定值","children":[]},{"level":2,"title":"常见问题","slug":"常见问题","link":"#常见问题","children":[]},{"level":2,"title":"字符串处理","slug":"字符串处理","link":"#字符串处理","children":[{"level":3,"title":"1️⃣ 统计某字符出现次数","slug":"_1️⃣-统计某字符出现次数","link":"#_1️⃣-统计某字符出现次数","children":[]},{"level":3,"title":"2️⃣ 去除所有空格","slug":"_2️⃣-去除所有空格","link":"#_2️⃣-去除所有空格","children":[]},{"level":3,"title":"3️⃣ 判断是否是回文","slug":"_3️⃣-判断是否是回文","link":"#_3️⃣-判断是否是回文","children":[]},{"level":3,"title":"4️⃣ 统计每个字符出现次数","slug":"_4️⃣-统计每个字符出现次数","link":"#_4️⃣-统计每个字符出现次数","children":[]},{"level":3,"title":"5️⃣ 反转字符串","slug":"_5️⃣-反转字符串","link":"#_5️⃣-反转字符串","children":[]},{"level":3,"title":"6️⃣ Run-Length Encoding（压缩）","slug":"_6️⃣-run-length-encoding-压缩","link":"#_6️⃣-run-length-encoding-压缩","children":[]},{"level":3,"title":"7️⃣ Run-Length Decoding（解压）","slug":"_7️⃣-run-length-decoding-解压","link":"#_7️⃣-run-length-decoding-解压","children":[]},{"level":3,"title":"8️⃣ 将每个单词首字母大写","slug":"_8️⃣-将每个单词首字母大写","link":"#_8️⃣-将每个单词首字母大写","children":[]},{"level":3,"title":"9️⃣ 按空格分词（其实就是 words）","slug":"_9️⃣-按空格分词-其实就是-words","link":"#_9️⃣-按空格分词-其实就是-words","children":[]},{"level":3,"title":"🔟 移除重复字符，保留顺序","slug":"🔟-移除重复字符-保留顺序","link":"#🔟-移除重复字符-保留顺序","children":[]},{"level":3,"title":"1️⃣1️⃣ 子序列","slug":"_1️⃣1️⃣-子序列","link":"#_1️⃣1️⃣-子序列","children":[]},{"level":3,"title":"1️⃣2️⃣ 所有长度为 k 的子串","slug":"_1️⃣2️⃣-所有长度为-k-的子串","link":"#_1️⃣2️⃣-所有长度为-k-的子串","children":[]},{"level":3,"title":"1️⃣3️⃣ 判断两个字符串是否是字母异位词（Anagram）","slug":"_1️⃣3️⃣-判断两个字符串是否是字母异位词-anagram","link":"#_1️⃣3️⃣-判断两个字符串是否是字母异位词-anagram","children":[]}]}],"git":{"createdTime":1750161054000,"updatedTime":1750293351000,"contributors":[{"name":"Ruochen Chen","email":"ruocchen1220@gmail.com","commits":2}]},"readingTime":{"minutes":13.73,"words":4119},"filePathRelative":"zh/posts/declarative/haskell速记.md","localizedDate":"2025年6月14日","excerpt":"\\n<h3>列表操作</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>函数</th>\\n<th>类型签名</th>\\n<th>说明</th>\\n<th>例子</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>head</code></td>\\n<td><code>[a] -&gt; a</code></td>\\n<td>取列表第一个元素</td>\\n<td><code>head [1,2,3] = 1</code></td>\\n</tr>\\n<tr>\\n<td><code>tail</code></td>\\n<td><code>[a] -&gt; [a]</code></td>\\n<td>去掉列表第一个元素</td>\\n<td><code>tail [1,2,3] = [2,3]</code></td>\\n</tr>\\n<tr>\\n<td><code>init</code></td>\\n<td><code>[a] -&gt; [a]</code></td>\\n<td>去掉列表最后一个元素</td>\\n<td><code>init [1,2,3] = [1,2]</code></td>\\n</tr>\\n<tr>\\n<td><code>last</code></td>\\n<td><code>[a] -&gt; a</code></td>\\n<td>取列表最后一个元素</td>\\n<td><code>last [1,2,3] = 3</code></td>\\n</tr>\\n<tr>\\n<td><code>length</code></td>\\n<td><code>[a] -&gt; Int</code></td>\\n<td>计算列表长度</td>\\n<td><code>length [1,2,3] = 3</code></td>\\n</tr>\\n<tr>\\n<td><code>null</code></td>\\n<td><code>[a] -&gt; Bool</code></td>\\n<td>判断列表是否为空</td>\\n<td><code>null [] = True</code></td>\\n</tr>\\n<tr>\\n<td><code>reverse</code></td>\\n<td><code>[a] -&gt; [a]</code></td>\\n<td>翻转列表</td>\\n<td><code>reverse [1,2,3] = [3,2,1]</code></td>\\n</tr>\\n<tr>\\n<td><code>take</code></td>\\n<td><code>Int -&gt; [a] -&gt; [a]</code></td>\\n<td>取前 n 个元素</td>\\n<td><code>take 2 [1,2,3] = [1,2]</code></td>\\n</tr>\\n<tr>\\n<td><code>drop</code></td>\\n<td><code>Int -&gt; [a] -&gt; [a]</code></td>\\n<td>丢弃前 n 个元素</td>\\n<td><code>drop 2 [1,2,3] = [3]</code></td>\\n</tr>\\n<tr>\\n<td><code>splitAt</code></td>\\n<td><code>Int -&gt; [a] -&gt; ([a],[a])</code></td>\\n<td>分割列表为两部分</td>\\n<td><code>splitAt 2 [1,2,3] = ([1,2],[3])</code></td>\\n</tr>\\n<tr>\\n<td><code>filter</code></td>\\n<td><code>(a -&gt; Bool) -&gt; [a] -&gt; [a]</code></td>\\n<td>过滤满足条件的元素</td>\\n<td><code>filter even [1..5] = [2,4]</code></td>\\n</tr>\\n<tr>\\n<td><code>map</code></td>\\n<td><code>(a -&gt; b) -&gt; [a] -&gt; [b]</code></td>\\n<td>对列表每个元素应用函数</td>\\n<td><code>map (+1) [1,2,3] = [2,3,4]</code></td>\\n</tr>\\n<tr>\\n<td><code>foldl</code></td>\\n<td><code>(b -&gt; a -&gt; b) -&gt; b -&gt; [a] -&gt; b</code></td>\\n<td>从左到右折叠</td>\\n<td><code>foldl (+) 0 [1,2,3] = 6</code></td>\\n</tr>\\n<tr>\\n<td><code>foldr</code></td>\\n<td><code>(a -&gt; b -&gt; b) -&gt; b -&gt; [a] -&gt; b</code></td>\\n<td>从右到左折叠</td>\\n<td><code>foldr (:) [] [1,2,3] = [1,2,3]</code></td>\\n</tr>\\n<tr>\\n<td><code>zip</code></td>\\n<td><code>[a] -&gt; [b] -&gt; [(a,b)]</code></td>\\n<td>两个列表配对成元组列表</td>\\n<td><code>zip [1,2] [\'a\',\'b\'] = [(1,\'a\'),(2,\'b\')]</code></td>\\n</tr>\\n<tr>\\n<td><code>zipWith</code></td>\\n<td><code>(a -&gt; b -&gt; c) -&gt; [a] -&gt; [b] -&gt; [c]</code></td>\\n<td>两个列表的对应元素分别应用一个函数，返回一个新列表</td>\\n<td><code>zipWith (+) [1,2] [3,4] = [4,6]</code></td>\\n</tr>\\n<tr>\\n<td><code>concat</code></td>\\n<td><code>[[a]] -&gt; [a]</code></td>\\n<td>合并列表的列表</td>\\n<td><code>concat [[1,2],[3]] = [1,2,3]</code></td>\\n</tr>\\n<tr>\\n<td><code>concatMap</code></td>\\n<td><code>(a -&gt; [b]) -&gt; [a] -&gt; [b]</code></td>\\n<td>对列表每个元素应用函数，返回一个新列表</td>\\n<td><code>concatMap (\\\\x -&gt; [x,x]) [1,2,3] = [1,1,2,2,3,3]</code></td>\\n</tr>\\n<tr>\\n<td><code>elem</code></td>\\n<td><code>Eq a =&gt; a -&gt; [a] -&gt; Bool</code></td>\\n<td>判断元素是否在列表中</td>\\n<td><code>elem 3 [1,2,3] = True</code></td>\\n</tr>\\n<tr>\\n<td><code>notElem</code></td>\\n<td><code>Eq a =&gt; a -&gt; [a] -&gt; Bool</code></td>\\n<td>判断元素不在列表中</td>\\n<td><code>notElem 4 [1,2,3] = True</code></td>\\n</tr>\\n<tr>\\n<td><code>takeWhile</code></td>\\n<td><code>(a -&gt; Bool) -&gt; [a] -&gt; [a]</code></td>\\n<td>从头取满足条件的元素</td>\\n<td><code>takeWhile (&lt;3) [1,2,3] = [1,2]</code></td>\\n</tr>\\n<tr>\\n<td><code>dropWhile</code></td>\\n<td><code>(a -&gt; Bool) -&gt; [a] -&gt; [a]</code></td>\\n<td>从头丢弃满足条件的元素</td>\\n<td><code>dropWhile (&lt;3) [1,2,3] = [3]</code></td>\\n</tr>\\n<tr>\\n<td><code>span</code></td>\\n<td><code>(a -&gt; Bool) -&gt; [a] -&gt; ([a], [a])</code></td>\\n<td>从头分割列表，前部分满足条件，后部分不满足，在第一次不满足条件时停止</td>\\n<td><code>span (&lt;3) [1,2,3] = ([1,2],[3])</code></td>\\n</tr>\\n<tr>\\n<td><code>all</code></td>\\n<td><code>(a -&gt; Bool) -&gt; [a] -&gt; Bool</code></td>\\n<td>判断列表所有元素是否满足条件</td>\\n<td><code>all (&lt;3) [1,2,3] = True</code></td>\\n</tr>\\n<tr>\\n<td><code>\\\\\\\\</code></td>\\n<td><code>(a -&gt; Bool) -&gt; [a] -&gt; [a]</code></td>\\n<td>列表差集操作符</td>\\n<td><code>[1,2,3] \\\\\\\\ [1,2] = [3]</code></td>\\n</tr>\\n<tr>\\n<td><code>flip</code></td>\\n<td><code>(a -&gt; b -&gt; c) -&gt; b -&gt; a -&gt; c</code></td>\\n<td>翻转函数参数顺序</td>\\n<td><code>flip (++) \\"word\\" \\" hello\\" = \\"hello word\\"</code></td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}')},6262:(s,i)=>{i.A=(s,i)=>{const a=s.__vccOpts||s;for(const[s,n]of i)a[s]=n;return a}}}]);