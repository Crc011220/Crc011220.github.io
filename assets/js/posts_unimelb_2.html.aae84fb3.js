"use strict";(self.webpackChunkpersonalweb=self.webpackChunkpersonalweb||[]).push([[9477],{6262:(i,s)=>{s.A=(i,s)=>{const e=i.__vccOpts||i;for(const[i,a]of s)e[i]=a;return e}},8063:(i,s,e)=>{e.r(s),e.d(s,{comp:()=>t,data:()=>l});var a=e(641);const n={},t=(0,e(6262).A)(n,[["render",function(i,s){return(0,a.uX)(),(0,a.CE)("div",null,s[0]||(s[0]=[(0,a.Fv)('<h1 id="declarative-programming-comp90048" tabindex="-1"><a class="header-anchor" href="#declarative-programming-comp90048"><span>Declarative Programming (COMP90048)</span></a></h1><h2 id="week-1" tabindex="-1"><a class="header-anchor" href="#week-1"><span>Week 1</span></a></h2><h4 id="imperative-languages-are-based-on-commands-in-the-form-of-instructions-and-statements" tabindex="-1"><a class="header-anchor" href="#imperative-languages-are-based-on-commands-in-the-form-of-instructions-and-statements"><span>Imperative languages are based on commands, in the form of instructions and statements.</span></a></h4><ul><li>Commands are executed.</li><li>Commands have an effect, such as to update the computation state,and later code may depend on this update.</li></ul><h4 id="logic-programming-languages-are-based-on-finding-values-that-satisfy-a-set-of-constraints" tabindex="-1"><a class="header-anchor" href="#logic-programming-languages-are-based-on-finding-values-that-satisfy-a-set-of-constraints"><span>Logic programming languages are based on finding values that satisfy a set of constraints.</span></a></h4><ul><li>Constraints may have multiple solutions or none at all.</li><li>Constraints do not have an effect.</li></ul><h4 id="functional-languages-are-based-on-evaluating-expressions" tabindex="-1"><a class="header-anchor" href="#functional-languages-are-based-on-evaluating-expressions"><span>Functional languages are based on evaluating expressions.</span></a></h4><ul><li>Expressions are evaluated.</li><li>Expressions do not have an effect.</li></ul><h2 id="prolog" tabindex="-1"><a class="header-anchor" href="#prolog"><span>Prolog</span></a></h2><p>Prolog is a declarative programming language. It is based on logic programming and uses the predicate calculus.</p><div class="language-prolog line-numbers-mode" data-highlighter="shiki" data-ext="prolog" data-title="prolog" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">% import the test.pl file</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">% (A small part of) the British Royal family</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">% parent(queen_elizabeth, prince_charles).</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">% parent(prince_philip, prince_charles).</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">% parent(prince_charles, prince_william).</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">% parent(prince_charles, prince_harry).</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">% parent(princess_diana, prince_william).</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">% parent(princess_diana, prince_harry).</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">?- [test].</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">%queries</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">?- parent(prince_charles, prince_william).</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">% true</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">% This query asks: of whom Prince Charles is a parent?</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">?- parent(prince_charles, X)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>If there is more than one answer to the query, Prolog prints them one at a time, pausing to see if more solutions are wanted. Typing semicolon asks for more solutions; just hitting enter (return) finishes without more solutions.</li></ul><h3 id="rules" tabindex="-1"><a class="header-anchor" href="#rules"><span>Rules</span></a></h3><div class="language-prolog line-numbers-mode" data-highlighter="shiki" data-ext="prolog" data-title="prolog" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">% “X is grandparent of Z if X is parent of Y and Y is parent of Z .”</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">grandparent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">X</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Z</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> parent(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">X</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Y</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), parent(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Y</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Z</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Rules can be recursive. Prolog has no looping constructs, so recursion is widely used.</li></ul><div class="language-prolog line-numbers-mode" data-highlighter="shiki" data-ext="prolog" data-title="prolog" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">% A person’s ancestors are their parents and the ancestors of their parents.</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ancestor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Anc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Desc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">parent(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Parent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Desc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),ancestor(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Anc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">Parent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="equality" tabindex="-1"><a class="header-anchor" href="#equality"><span>Equality</span></a></h3><ul><li>Equality in Prolog, written “=” and used as an infix operator, can be used both to bind variables and to check for equality. Prolog is a single-assignment language: once bound, a variable cannot be reassigned.</li></ul><h3 id="disjunction-and-conjunction" tabindex="-1"><a class="header-anchor" href="#disjunction-and-conjunction"><span>Disjunction and Conjunction</span></a></h3><ul><li>Goals can be combined with disjunction (or) as well as conjunction (and). Disjunction is written “;” and used as an infix operator. Conjunction (“,”) has higher precedence (binds tighter) than disjunction, but parentheses can be used to achieve the desired precedence.</li></ul><h3 id="negation" tabindex="-1"><a class="header-anchor" href="#negation"><span>Negation</span></a></h3><ul><li>Negation in Prolog is written “+” and used as a prefix operator. Negation has higher (tighter) precedence than both conjunction and disjunction. Be sure to leave a space between the + and an open parenthesis.</li></ul><div class="language-prolog line-numbers-mode" data-highlighter="shiki" data-ext="prolog" data-title="prolog" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">% Who are the parents of Prince William other than Prince Charles?</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">?- parent(X, prince_william), \\+ X = prince_charles.</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">X</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">princess_diana</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Disequality in Prolog is written as an infix “=”. So X = Y is the same as + X = Y.</li></ul><h3 id="closed-world-assumption" tabindex="-1"><a class="header-anchor" href="#closed-world-assumption"><span>Closed World Assumption</span></a></h3><ul><li>Prolog assumes that all terms are true, unless explicitly stated otherwise. This is called the closed world assumption (CWA). <strong>This means that if a term is not mentioned in the program, it is assumed to be false</strong>. This can be a problem if the program is used to reason about real-world situations, where some terms may be unknown or undecidable.</li></ul>',26)]))}]]),l=JSON.parse('{"path":"/posts/unimelb/2.html","title":"Declarative Programming (COMP90048)","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2025-03-02T00:00:00.000Z","category":["Learning Records"],"tag":["Unimelb"],"description":"Declarative Programming (COMP90048) Week 1 Imperative languages are based on commands, in the form of instructions and statements. Commands are executed. Commands have an effect...","head":[["meta",{"property":"og:url","content":"https://crc011220.github.io/personalweb/personalweb/posts/unimelb/2.html"}],["meta",{"property":"og:site_name","content":"Richard Chen"}],["meta",{"property":"og:title","content":"Declarative Programming (COMP90048)"}],["meta",{"property":"og:description","content":"Declarative Programming (COMP90048) Week 1 Imperative languages are based on commands, in the form of instructions and statements. Commands are executed. Commands have an effect..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-03-06T12:24:15.000Z"}],["meta",{"property":"article:tag","content":"Unimelb"}],["meta",{"property":"article:published_time","content":"2025-03-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-06T12:24:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Declarative Programming (COMP90048)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-03-02T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-06T12:24:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Richard Chen\\"}]}"]]},"headers":[{"level":2,"title":"Week 1","slug":"week-1","link":"#week-1","children":[]},{"level":2,"title":"Prolog","slug":"prolog","link":"#prolog","children":[{"level":3,"title":"Rules","slug":"rules","link":"#rules","children":[]},{"level":3,"title":"Equality","slug":"equality","link":"#equality","children":[]},{"level":3,"title":"Disjunction and Conjunction","slug":"disjunction-and-conjunction","link":"#disjunction-and-conjunction","children":[]},{"level":3,"title":"Negation","slug":"negation","link":"#negation","children":[]},{"level":3,"title":"Closed World Assumption","slug":"closed-world-assumption","link":"#closed-world-assumption","children":[]}]}],"git":{"createdTime":1740916663000,"updatedTime":1741263855000,"contributors":[{"name":"Ruochen Chen","email":"ruocchen1220@gmail.com","commits":2}]},"readingTime":{"minutes":1.66,"words":497},"filePathRelative":"posts/unimelb/2.md","localizedDate":"March 2, 2025","excerpt":"\\n<h2>Week 1</h2>\\n<h4>Imperative languages are based on commands, in the form of instructions and statements.</h4>\\n<ul>\\n<li>Commands are executed.</li>\\n<li>Commands have an effect, such as to update the computation state,and later code may depend on this update.</li>\\n</ul>\\n<h4>Logic programming languages are based on finding values that satisfy a set of constraints.</h4>","autoDesc":true}')}}]);