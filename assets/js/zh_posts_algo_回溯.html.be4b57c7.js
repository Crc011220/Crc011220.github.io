"use strict";(self.webpackChunkpersonalweb=self.webpackChunkpersonalweb||[]).push([[6018],{6262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}},6391:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>l,data:()=>p});var e=a(641);const i={},l=(0,a(6262).A)(i,[["render",function(n,s){return(0,e.uX)(),(0,e.CE)("div",null,s[0]||(s[0]=[(0,e.Fv)('<h1 id="回溯" tabindex="-1"><a class="header-anchor" href="#回溯"><span>回溯</span></a></h1><h2 id="回溯算法" tabindex="-1"><a class="header-anchor" href="#回溯算法"><span>回溯算法</span></a></h2><p>回溯算法是一种通过构建决策树来解决问题的算法。它通过逐步构建决策树，并在每个节点进行选择，然后递归地解决子问题，最后回溯到根节点，得到最终的解。</p><div class="language-psudocode line-numbers-mode" data-highlighter="shiki" data-ext="psudocode" data-title="psudocode" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>void backtracking(参数) {</span></span>\n<span class="line"><span>    if (终止条件) {</span></span>\n<span class="line"><span>        存放结果;</span></span>\n<span class="line"><span>        return;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>    for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) {</span></span>\n<span class="line"><span>        处理节点;</span></span>\n<span class="line"><span>        backtracking(路径，选择列表); // 递归</span></span>\n<span class="line"><span>        回溯，撤销处理结果</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',4)]))}]]),p=JSON.parse('{"path":"/zh/posts/algo/%E5%9B%9E%E6%BA%AF.html","title":"回溯","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-05-22T00:00:00.000Z","category":["Learning Records"],"tag":["Algorithm"],"description":"回溯 回溯算法 回溯算法是一种通过构建决策树来解决问题的算法。它通过逐步构建决策树，并在每个节点进行选择，然后递归地解决子问题，最后回溯到根节点，得到最终的解。","head":[["meta",{"property":"og:url","content":"https://crc011220.github.io/zh/posts/algo/%E5%9B%9E%E6%BA%AF.html"}],["meta",{"property":"og:site_name","content":"Richard Chen"}],["meta",{"property":"og:title","content":"回溯"}],["meta",{"property":"og:description","content":"回溯 回溯算法 回溯算法是一种通过构建决策树来解决问题的算法。它通过逐步构建决策树，并在每个节点进行选择，然后递归地解决子问题，最后回溯到根节点，得到最终的解。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-23T13:31:08.000Z"}],["meta",{"property":"article:tag","content":"Algorithm"}],["meta",{"property":"article:published_time","content":"2025-05-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-23T13:31:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"回溯\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-05-22T00:00:00.000Z\\",\\"dateModified\\":\\"2025-05-23T13:31:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Richard Chen\\"}]}"]]},"headers":[{"level":2,"title":"回溯算法","slug":"回溯算法","link":"#回溯算法","children":[]}],"git":{"createdTime":1748007068000,"updatedTime":1748007068000,"contributors":[{"name":"Ruochen Chen","email":"ruocchen1220@gmail.com","commits":1}]},"readingTime":{"minutes":0.49,"words":148},"filePathRelative":"zh/posts/algo/回溯.md","localizedDate":"2025年5月22日","excerpt":"\\n<h2>回溯算法</h2>\\n<p>回溯算法是一种通过构建决策树来解决问题的算法。它通过逐步构建决策树，并在每个节点进行选择，然后递归地解决子问题，最后回溯到根节点，得到最终的解。</p>\\n<div class=\\"language-psudocode line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"psudocode\\" data-title=\\"psudocode\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>void backtracking(参数) {</span></span>\\n<span class=\\"line\\"><span>    if (终止条件) {</span></span>\\n<span class=\\"line\\"><span>        存放结果;</span></span>\\n<span class=\\"line\\"><span>        return;</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>    for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) {</span></span>\\n<span class=\\"line\\"><span>        处理节点;</span></span>\\n<span class=\\"line\\"><span>        backtracking(路径，选择列表); // 递归</span></span>\\n<span class=\\"line\\"><span>        回溯，撤销处理结果</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);