"use strict";(self.webpackChunkpersonalweb=self.webpackChunkpersonalweb||[]).push([[8565],{2942:(e,a,i)=>{i.r(a),i.d(a,{comp:()=>r,data:()=>l});var t=i(641);const n={},r=(0,i(6262).A)(n,[["render",function(e,a){return(0,t.uX)(),(0,t.CE)("div",null,a[0]||(a[0]=[(0,t.Fv)('<h1 id="horizontal-and-vertical-scaling" tabindex="-1"><a class="header-anchor" href="#horizontal-and-vertical-scaling"><span>Horizontal and Vertical Scaling</span></a></h1><p>Scaling is a crucial concept in software architecture and system design, allowing systems to handle increasing loads by adding resources. There are two primary types of scaling: horizontal and vertical scaling.</p><h2 id="horizontal-scaling-scale-out" tabindex="-1"><a class="header-anchor" href="#horizontal-scaling-scale-out"><span>Horizontal Scaling (Scale Out)</span></a></h2><p>Horizontal scaling, also known as &quot;scaling out,&quot; involves adding more machines or instances to distribute the workload.</p><ul><li><strong>How it works</strong>: New servers or nodes are added to a system, which allows for additional traffic or requests to be handled by distributing the load across these instances.</li><li><strong>Examples</strong>: <ul><li>Adding more instances of an application in a load-balanced setup.</li><li>Expanding the number of database replicas to spread read operations.</li></ul></li><li><strong>Benefits</strong>: <ul><li>Greater fault tolerance, as workload is shared across multiple nodes.</li><li>Flexibility to add or remove instances based on demand.</li><li>Often less expensive for cloud-based systems, as more low-cost instances can be added.</li></ul></li><li><strong>Use Cases</strong>: <ul><li>Web applications with high user traffic.</li><li>Microservices architectures where each service can scale independently.</li></ul></li></ul><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h3><p>In a web application, if there is a surge in users, new application server instances can be added, and a load balancer can distribute traffic across them. This allows the system to handle more requests without overloading any single instance.</p><h2 id="vertical-scaling-scale-up" tabindex="-1"><a class="header-anchor" href="#vertical-scaling-scale-up"><span>Vertical Scaling (Scale Up)</span></a></h2><p>Vertical scaling, also known as &quot;scaling up,&quot; involves increasing the resources (CPU, memory, storage) of a single server or instance.</p><ul><li><strong>How it works</strong>: Instead of adding more servers, the power and capacity of an existing server are increased.</li><li><strong>Examples</strong>: <ul><li>Upgrading the server with more CPUs, additional RAM, or faster storage.</li><li>Increasing the disk space or memory allocation of a virtual machine.</li></ul></li><li><strong>Benefits</strong>: <ul><li>Simpler to manage as there is a single server or fewer instances to handle.</li><li>No need to modify application code to handle distributed load.</li><li>Often suitable for database servers, where scaling horizontally is more complex.</li></ul></li><li><strong>Limitations</strong>: <ul><li>Hardware limitations; there is a maximum capacity that can be added.</li><li>Downtime may be required to upgrade hardware in physical servers.</li></ul></li><li><strong>Use Cases</strong>: <ul><li>Applications that require a lot of memory or CPU but are not distributed.</li><li>Monolithic applications where all components are tightly coupled.</li></ul></li></ul><h3 id="example-1" tabindex="-1"><a class="header-anchor" href="#example-1"><span>Example</span></a></h3><p>For an application that primarily runs on a single server, vertical scaling could involve increasing the server’s CPU and memory to handle more traffic or data processing.</p><h2 id="comparison-of-horizontal-vs-vertical-scaling" tabindex="-1"><a class="header-anchor" href="#comparison-of-horizontal-vs-vertical-scaling"><span>Comparison of Horizontal vs. Vertical Scaling</span></a></h2><table><thead><tr><th>Feature</th><th>Horizontal Scaling</th><th>Vertical Scaling</th></tr></thead><tbody><tr><td><strong>Method</strong></td><td>Add more servers/nodes</td><td>Add more power to existing server</td></tr><tr><td><strong>Cost</strong></td><td>Often cheaper in cloud environments</td><td>Can become costly due to hardware limits</td></tr><tr><td><strong>Complexity</strong></td><td>Requires load balancing</td><td>Simpler but limited by server capacity</td></tr><tr><td><strong>Fault Tolerance</strong></td><td>High (more redundancy)</td><td>Lower (single point of failure)</td></tr><tr><td><strong>Scalability</strong></td><td>Virtually unlimited</td><td>Limited by hardware capacity</td></tr></tbody></table><h2 id="choosing-between-horizontal-and-vertical-scaling" tabindex="-1"><a class="header-anchor" href="#choosing-between-horizontal-and-vertical-scaling"><span>Choosing Between Horizontal and Vertical Scaling</span></a></h2><p>The choice between horizontal and vertical scaling depends on:</p><ul><li><strong>System architecture</strong>: Distributed systems (microservices) are often suited for horizontal scaling, while monolithic applications may scale better vertically.</li><li><strong>Budget and resources</strong>: Cloud services provide flexibility for horizontal scaling with lower upfront costs, while vertical scaling can be expensive.</li><li><strong>Fault tolerance needs</strong>: Systems that require high availability generally favor horizontal scaling.</li></ul><h3 id="hybrid-approach" tabindex="-1"><a class="header-anchor" href="#hybrid-approach"><span>Hybrid Approach</span></a></h3><p>Many modern architectures use a combination of both methods. For example, a database may use vertical scaling to maximize performance on a single powerful instance, while application servers are horizontally scaled to handle user traffic.</p>',19)]))}]]),l=JSON.parse('{"path":"/posts/clich%C3%A9/6.html","title":"Horizontal and Vertical Scaling","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2024-11-09T00:00:00.000Z","category":["Learning Records"],"tag":["Programmer cliché"],"description":"Horizontal and Vertical Scaling Scaling is a crucial concept in software architecture and system design, allowing systems to handle increasing loads by adding resources. There a...","head":[["meta",{"property":"og:url","content":"https://crc011220.github.io/personalweb/personalweb/posts/clich%C3%A9/6.html"}],["meta",{"property":"og:site_name","content":"Richard Chen"}],["meta",{"property":"og:title","content":"Horizontal and Vertical Scaling"}],["meta",{"property":"og:description","content":"Horizontal and Vertical Scaling Scaling is a crucial concept in software architecture and system design, allowing systems to handle increasing loads by adding resources. There a..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-08T11:26:58.000Z"}],["meta",{"property":"article:tag","content":"Programmer cliché"}],["meta",{"property":"article:published_time","content":"2024-11-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-08T11:26:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Horizontal and Vertical Scaling\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-09T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-08T11:26:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Richard Chen\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"Horizontal Scaling (Scale Out)","slug":"horizontal-scaling-scale-out","link":"#horizontal-scaling-scale-out","children":[{"level":3,"title":"Example","slug":"example","link":"#example","children":[]}]},{"level":2,"title":"Vertical Scaling (Scale Up)","slug":"vertical-scaling-scale-up","link":"#vertical-scaling-scale-up","children":[{"level":3,"title":"Example","slug":"example-1","link":"#example-1","children":[]}]},{"level":2,"title":"Comparison of Horizontal vs. Vertical Scaling","slug":"comparison-of-horizontal-vs-vertical-scaling","link":"#comparison-of-horizontal-vs-vertical-scaling","children":[]},{"level":2,"title":"Choosing Between Horizontal and Vertical Scaling","slug":"choosing-between-horizontal-and-vertical-scaling","link":"#choosing-between-horizontal-and-vertical-scaling","children":[{"level":3,"title":"Hybrid Approach","slug":"hybrid-approach","link":"#hybrid-approach","children":[]}]}],"git":{"createdTime":1731065218000,"updatedTime":1731065218000,"contributors":[{"name":"Ruochen Chen","email":"ruocchen1220@gmail.com","commits":1}]},"readingTime":{"minutes":1.84,"words":551},"filePathRelative":"posts/cliché/6.md","localizedDate":"November 9, 2024","excerpt":"\\n<p>Scaling is a crucial concept in software architecture and system design, allowing systems to handle increasing loads by adding resources. There are two primary types of scaling: horizontal and vertical scaling.</p>\\n<h2>Horizontal Scaling (Scale Out)</h2>\\n<p>Horizontal scaling, also known as \\"scaling out,\\" involves adding more machines or instances to distribute the workload.</p>","autoDesc":true}')},6262:(e,a)=>{a.A=(e,a)=>{const i=e.__vccOpts||e;for(const[e,t]of a)i[e]=t;return i}}}]);