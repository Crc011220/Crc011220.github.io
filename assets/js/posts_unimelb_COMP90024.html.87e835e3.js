"use strict";(self.webpackChunkpersonalweb=self.webpackChunkpersonalweb||[]).push([[9679],{6262:(e,t)=>{t.A=(e,t)=>{const s=e.__vccOpts||e;for(const[e,i]of t)s[e]=i;return s}},8013:(e,t,s)=>{s.r(t),s.d(t,{comp:()=>h,data:()=>p});var i=s(641);const a=s.p+"assets/img/Amdhal_vs_Gustafsons_Law.a70e6e87.png",n=s.p+"assets/img/HPC_Cluster_Design.2a5e775c.png",o=s.p+"assets/img/openstack.e4d4acad.png",l=s.p+"assets/img/containerization.5e1c5957.png",d=s.p+"assets/img/evolution.be67dd8a.png",r=s.p+"assets/img/k8s-example.dd37bd65.png",c={},h=(0,s(6262).A)(c,[["render",function(e,t){const s=(0,i.g2)("RouteLink");return(0,i.uX)(),(0,i.CE)("div",null,[t[10]||(t[10]=(0,i.Fv)('<h1 id="cluster-and-cloud-computing-comp90024" tabindex="-1"><a class="header-anchor" href="#cluster-and-cloud-computing-comp90024"><span>Cluster and Cloud Computing (COMP90024)</span></a></h1><h2 id="week-1" tabindex="-1"><a class="header-anchor" href="#week-1"><span>Week 1</span></a></h2><h3 id="cloud-characteristics" tabindex="-1"><a class="header-anchor" href="#cloud-characteristics"><span>Cloud Characteristics</span></a></h3><p>‚Äì On-demand self-service . A consumer can provision computing capabilities as needed without requiring human interaction with each service provider. ‚Äì Networked access . Capabilities are available over the network and accessed through standard mechanisms that promote use by heterogeneous client platforms.</p><ul><li>Resource pooling . The provider&#39;s computing resources are pooled to serve multiple consumers using a multi-tenant model potentially with different physical and virtual resources that can be dynamically assigned and reassigned according to consumer demand. ‚Äì Rapid elasticity . Capabilities can be elastically provisioned and released, in some cases automatically, to scale rapidly upon demand. ‚Äì Measured service . Cloud systems automatically control and optimize resource use by leveraging a metering capability at some level of abstraction appropriate to the type of service.</li></ul><h3 id="grid-computing" tabindex="-1"><a class="header-anchor" href="#grid-computing"><span>Grid Computing</span></a></h3><h2 id="week-2" tabindex="-1"><a class="header-anchor" href="#week-2"><span>Week 2</span></a></h2><h3 id="horizontal-and-vertical-scaling" tabindex="-1"><a class="header-anchor" href="#horizontal-and-vertical-scaling"><span>Horizontal and Vertical Scaling</span></a></h3><ul><li>Horizontal scaling refers to adding more resources to a system, easy to add more, cost not so high.</li><li>Vertical scaling refers to increasing the resources of a system, more complex, cost high.</li></ul><figure><img src="'+a+'" alt="Amdhal vs. Gustafson&#39;s Law" tabindex="0" loading="lazy"><figcaption>Amdhal vs. Gustafson&#39;s Law</figcaption></figure><h3 id="categories-of-flynn-s-taxonomy" tabindex="-1"><a class="header-anchor" href="#categories-of-flynn-s-taxonomy"><span>Categories of Flynn&#39;s Taxonomy</span></a></h3><table><thead><tr><th>Type</th><th>Full Name</th><th>Instruction Stream</th><th>Data Stream</th><th>Example</th></tr></thead><tbody><tr><td><strong>SISD</strong></td><td>Single Instruction, Single Data</td><td>Single</td><td>Single</td><td>Traditional single-core CPU</td></tr><tr><td><strong>SIMD</strong></td><td>Single Instruction, Multiple Data</td><td>Single</td><td>Multiple</td><td>GPU, vector processors</td></tr><tr><td><strong>MISD</strong></td><td>Multiple Instruction, Single Data</td><td>Multiple</td><td>Single</td><td>Fault-tolerant systems (rare)</td></tr><tr><td><strong>MIMD</strong></td><td>Multiple Instruction, Multiple Data</td><td>Multiple</td><td>Multiple</td><td>Multi-core CPUs, distributed systems</td></tr></tbody></table><hr><h3 id="approaches-for-parallelism-where-and-how" tabindex="-1"><a class="header-anchor" href="#approaches-for-parallelism-where-and-how"><span>Approaches for Parallelism (where and how)</span></a></h3><p>‚Äì Explicit (openMP / MPI) vs Implicit parallelism ‚Äì Hardware ‚Äì Operating System ‚Äì Software/Applications ‚Äì Some or all of these</p><div class="hint-container info"><p class="hint-container-title">Info</p><p>Message Passing Interface (MPI) is a standardized and portable message-passing system designed to function on a wide range of parallel computers.</p></div><h3 id="erroneous-assumptions-of-distributed-systems" tabindex="-1"><a class="header-anchor" href="#erroneous-assumptions-of-distributed-systems"><span>Erroneous Assumptions of Distributed Systems</span></a></h3><ol><li>The network is reliable</li><li>Latency is zero</li><li>Bandwidth is infinite</li><li>The network is secure</li><li>Topology doesn&#39;t change</li><li>There is one administrator</li><li>Transport cost is zero</li><li>The network is homogeneous</li><li>Time is ubiquitous</li></ol><h2 id="week-3" tabindex="-1"><a class="header-anchor" href="#week-3"><span>Week 3</span></a></h2><figure><img src="'+n+'" alt="HPC Cluster Design" tabindex="0" loading="lazy"><figcaption>HPC Cluster Design</figcaption></figure><h3 id="amdahl-s-law-and-gustafson-s-law" tabindex="-1"><a class="header-anchor" href="#amdahl-s-law-and-gustafson-s-law"><span>Amdahl&#39;s Law and Gustafson&#39;s Law</span></a></h3><h4 id="üåü-key-differences" tabindex="-1"><a class="header-anchor" href="#üåü-key-differences"><span>üåü <strong>Key Differences</strong></span></a></h4><table><thead><tr><th>Law</th><th>Assumption</th><th>Best Use Case</th><th>Result</th></tr></thead><tbody><tr><td><strong>Amdahl&#39;s Law</strong></td><td>Fixed problem size</td><td>Small-scale problems, focus on bottlenecks</td><td>Speedup limited by the serial part</td></tr><tr><td><strong>Gustafson&#39;s Law</strong></td><td>Scalable problem size</td><td>Large-scale problems, focus on parallel efficiency</td><td>Speedup can scale nearly linearly with the number of processors</td></tr></tbody></table><p><strong>If you can make use of parallelisation you should make use of it! It will always generate some benefit, and the larger the problem the bigger the gain.</strong></p><h3 id="environment-modules" tabindex="-1"><a class="header-anchor" href="#environment-modules"><span>Environment Modules</span></a></h3><p>Environment Modules is a tool used to dynamically manage and configure the user‚Äôs shell environment in Unix-like systems. It is widely used in High-Performance Computing (HPC) environments to simplify the use of software packages and manage different software versions without conflicts.</p><p>Modules work by modifying environment variables (e.g., <code>PATH</code>, <code>LD_LIBRARY_PATH</code>, <code>MANPATH</code>, etc.) when a module is loaded or unloaded. This allows users to switch between different versions of the same software easily without modifying the system configuration.</p><hr><h3 id="üõ†Ô∏è-common-module-commands" tabindex="-1"><a class="header-anchor" href="#üõ†Ô∏è-common-module-commands"><span>üõ†Ô∏è <strong>Common <code>module</code> Commands</strong></span></a></h3><table><thead><tr><th>Command</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td><code>module help</code></td><td>Displays help information about the <code>module</code> command, including available options and subcommands.</td><td><code>module help</code></td></tr><tr><td><code>module avail</code></td><td>Lists all available modules in the system.</td><td><code>module avail</code></td></tr><tr><td><code>module whatis &lt;modulefile&gt;</code></td><td>Shows a brief description of the specified module.</td><td><code>module whatis gcc</code></td></tr><tr><td><code>module display &lt;modulefile&gt;</code></td><td>Displays detailed information about what a module will modify in your environment (e.g., <code>PATH</code>, <code>MANPATH</code>, etc.).</td><td><code>module display gcc/10.2.0</code></td></tr><tr><td><code>module load &lt;modulefile&gt;</code></td><td>Loads the specified module and updates the environment accordingly.</td><td><code>module load gcc/10.2.0</code></td></tr><tr><td><code>module unload &lt;modulefile&gt;</code></td><td>Unloads the specified module and resets the environment.</td><td><code>module unload gcc/10.2.0</code></td></tr><tr><td><code>module list</code></td><td>Lists all currently loaded modules.</td><td><code>module list</code></td></tr><tr><td><code>module purge</code></td><td>Unloads all currently loaded modules.</td><td><code>module purge</code></td></tr><tr><td><code>module swap &lt;old_module&gt; &lt;new_module&gt;</code></td><td>Unloads the old module and loads the new one in a single step.</td><td><code>module swap gcc/9.3.0 gcc/10.2.0</code></td></tr><tr><td><code>module save &lt;name&gt;</code></td><td>Saves the current module environment as a named collection.</td><td><code>module save my_environment</code></td></tr><tr><td><code>module restore &lt;name&gt;</code></td><td>Restores a previously saved module collection.</td><td><code>module restore my_environment</code></td></tr></tbody></table><hr><h3 id="üõ†Ô∏è-common-slurm-commands" tabindex="-1"><a class="header-anchor" href="#üõ†Ô∏è-common-slurm-commands"><span>üõ†Ô∏è <strong>Common <code>slurm</code> Commands</strong></span></a></h3><table><thead><tr><th>Command</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td><code>sbatch</code></td><td>Submit a job</td><td><code>sbatch job.slurm</code></td></tr><tr><td><code>squeue</code></td><td>View job status</td><td><code>squeue -u &lt;username&gt;</code></td></tr><tr><td><code>scancel</code></td><td>Cancel a job</td><td><code>scancel 12345</code></td></tr><tr><td><code>sinfo</code></td><td>View node status</td><td><code>sinfo</code></td></tr><tr><td><code>sacct</code></td><td>View job history</td><td><code>sacct -u username</code></td></tr><tr><td><code>sstat</code></td><td>View running job status</td><td><code>sstat 12345</code></td></tr><tr><td><code>scontrol</code></td><td>Manage jobs, nodes, partitions</td><td><code>scontrol show job 12345</code></td></tr><tr><td><code>sprio</code></td><td>View job priority</td><td><code>sprio</code></td></tr><tr><td><code>srun</code></td><td>Run a command interactively</td><td><code>srun --pty bash</code></td></tr><tr><td><code>sinteractive</code></td><td>Start an interactive session</td><td><code>sinteractive -n 4 -t 2:00:00 --mem=8G</code></td></tr></tbody></table><h3 id="slurm-job-scripts" tabindex="-1"><a class="header-anchor" href="#slurm-job-scripts"><span>Slurm Job Scripts</span></a></h3><p>Example</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#!/bin/bash</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#SBATCH --job-name=myjob        # ‰Ωú‰∏öÂêç</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#SBATCH --output=output.txt     # Ê†áÂáÜËæìÂá∫Êñá‰ª∂</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#SBATCH --error=error.txt       # Ê†áÂáÜÈîôËØØËæìÂá∫Êñá‰ª∂</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#SBATCH --ntasks=1              # ‰ªªÂä°Êï∞</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#SBATCH --cpus-per-task=4      # ÊØè‰∏™‰ªªÂä°ÁöÑCPUÊ†∏Êï∞</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#SBATCH --mem=4GB               # ÂàÜÈÖçÁöÑÂÜÖÂ≠ò</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#SBATCH --time=01:00:00         # ÊúÄÂ§ßËøêË°åÊó∂Èó¥Ôºà1Â∞èÊó∂Ôºâ</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#SBATCH --partition=standard    # ÂàÜÂå∫ÂêçÁß∞</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># ‰∏ãÈù¢ÊòØÂÆûÈôÖÊâßË°åÁöÑÂëΩ‰ª§</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Starting my job...&quot;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">srun</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> my_program</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> arg1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> arg2</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # ÊâßË°åÁöÑÁ®ãÂ∫èÂèäÂèÇÊï∞</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">Info</p><h3 id="some-linux-commands" tabindex="-1"><a class="header-anchor" href="#some-linux-commands"><span>Some Linux Commands</span></a></h3><table><thead><tr><th><strong>Command</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td><code>touch &lt;filename&gt;</code></td><td>Creates an empty file. If the file already exists, it updates the file&#39;s timestamp.</td></tr><tr><td><code>scp &lt;source&gt; &lt;destination&gt;</code></td><td>Securely copies files or directories to/from a remote host.</td></tr><tr><td><code>diff &lt;file1&gt; &lt;file2&gt;</code></td><td>Compares the differences between two files.</td></tr><tr><td><code>sdiff &lt;file1&gt; &lt;file2&gt;</code></td><td>Displays the differences between two files side by side.</td></tr><tr><td><code>comm &lt;file1&gt; &lt;file2&gt;</code></td><td>Compares two sorted files and outputs common and different lines.</td></tr><tr><td><code>find &lt;path&gt; &lt;options&gt;</code></td><td>Searches for files or directories within the specified path.</td></tr><tr><td><code>grep &lt;pattern&gt; &lt;file&gt;</code></td><td>Searches for lines in a file that match a given pattern.</td></tr><tr><td><code>tar -xvfh &lt;archive&gt;</code></td><td>Extracts a <code>.tar</code> file and shows the file list.</td></tr><tr><td><code>ls -d &lt;path&gt;</code></td><td>Lists only the directory itself, not its contents.</td></tr><tr><td><code>cut &lt;options&gt;</code></td><td>Extracts specific columns from text.</td></tr><tr><td><code>paste &lt;file1&gt; &lt;file2&gt;</code></td><td>Merges the contents of two files side by side by columns.</td></tr><tr><td>`ls</td><td>wc -l`</td></tr><tr><td><code>tar -xvfh &lt;archive.tar&gt;</code></td><td>Extracts a <code>.tar</code> archive and shows detailed information.</td></tr><tr><td><code>tar -cvf &lt;archive.tar&gt; &lt;files&gt;</code></td><td>Creates a <code>.tar</code> archive.</td></tr><tr><td><code>ls -l</code></td><td>Lists files in the current directory with detailed information like permissions, size, and modified time.</td></tr><tr><td><code>tar -cvf &lt;archive.tar&gt; &lt;files&gt;</code></td><td>Creates a <code>.tar</code> archive.</td></tr><tr><td><code>ls -l</code></td><td>Displays detailed information about files in the current directory.</td></tr><tr><td><code>tar -xvfh archive.tar</code></td><td>Extracts the contents of a <code>.tar</code> file and shows the files being extracted.</td></tr><tr><td>`ls</td><td>wc -l`</td></tr><tr><td><code>tar -cvf archive.tar</code></td><td>Creates a <code>.tar</code> file from specified files.</td></tr><tr><td><code>ls -d */</code></td><td>Lists only the subdirectories in the current directory.</td></tr><tr><td><code>cut -f1 -d&quot;:&quot; &lt;file&gt;</code></td><td>Extracts the first column of data before the colon (üòÉ delimiter in a file.</td></tr></tbody></table></div><h2 id="week-4" tabindex="-1"><a class="header-anchor" href="#week-4"><span>Week 4</span></a></h2><h3 id="public-clouds" tabindex="-1"><a class="header-anchor" href="#public-clouds"><span>Public Clouds</span></a></h3><h4 id="pros" tabindex="-1"><a class="header-anchor" href="#pros"><span>Pros</span></a></h4><p>‚Äì Utility computing ‚Äì Can focus on core business ‚Äì Cost-effective ‚Äì ‚ÄúRight-sizing‚Äù ‚Äì Democratisation of computing</p><h4 id="cons" tabindex="-1"><a class="header-anchor" href="#cons"><span>Cons</span></a></h4><p>‚Äì Security ‚Äì Loss of control ‚Äì Possible lock-in ‚Äì Dependency of Cloud provider continued existence</p><h3 id="private-on-premise-clouds" tabindex="-1"><a class="header-anchor" href="#private-on-premise-clouds"><span>Private (on premise) Clouds</span></a></h3><h4 id="pros-1" tabindex="-1"><a class="header-anchor" href="#pros-1"><span>Pros</span></a></h4><p>‚Äì Control ‚Äì Consolidation of resources ‚Äì Easier to secure ‚Äì More trust</p><h4 id="cons-1" tabindex="-1"><a class="header-anchor" href="#cons-1"><span>Cons</span></a></h4><p>‚Äì Relevance to core business? e.g., Netflix -&gt;Amazon ‚Äì Staff/management overheads ‚Äì Hardware obsolescence ‚Äì Over/under utilisation challenges ‚Äì (Effort and cost of establishing a data centre)</p><h3 id="openstack" tabindex="-1"><a class="header-anchor" href="#openstack"><span>OpenStack</span></a></h3><ul><li>Open Source: OpenStack is a completely open-source cloud computing platform, and anyone can download, install, and modify the source code. It allows enterprises to build and manage their own cloud infrastructure in private data centers with full control.</li><li>Deployment: OpenStack is typically deployed on an organization&#39;s own hardware or can be deployed on any supported hardware (including virtual machines). Therefore, it is suitable for private cloud and hybrid cloud deployments.</li><li>Highly Customizable: Being open-source, OpenStack allows users to highly customize according to their needs.</li><li>Primarily provides Infrastructure as a Service (IaaS) functionalities such as computing, storage, and networking.</li><li>Offers services like Nova (compute), Swift (object storage), Neutron (networking), Cinder (block storage), Keystone (identity management), etc.</li><li>Requires enterprises to manage and maintain their services themselves. <img src="'+o+'" alt="OpenStack Architecture" loading="lazy"></li></ul><h2 id="week-5" tabindex="-1"><a class="header-anchor" href="#week-5"><span>Week 5</span></a></h2><p><img src="'+l+'" alt="Virutalization vs. Containerization.png" loading="lazy"><img src="'+d+'" alt="Evolution" loading="lazy"></p><h3 id="container-orchestration-tools" tabindex="-1"><a class="header-anchor" href="#container-orchestration-tools"><span>Container Orchestration Tools</span></a></h3><ul><li>Container orchestration technologies provide a framework for integrating and managing containers at scale</li></ul><ol><li>Container orchestration technologies feature</li></ol><ul><li>Networking</li><li>Scaling</li><li>Service discovery and load balancing</li><li>Health check and self-healing</li><li>Security</li><li>Rolling updates</li></ul><ol start="2"><li>Goals:</li></ol><ul><li>Simplify container management processes</li><li>Help to manage availability and scaling of containers</li></ul><h3 id="persistence" tabindex="-1"><a class="header-anchor" href="#persistence"><span>Persistence</span></a></h3><h4 id="docker-has-two-options-for-containers-to-store-files-on-the-host-machine-so-that-the-files-are-persisted-even-after-the-container-stops" tabindex="-1"><a class="header-anchor" href="#docker-has-two-options-for-containers-to-store-files-on-the-host-machine-so-that-the-files-are-persisted-even-after-the-container-stops"><span>Docker has two options for containers to store files on the host machine, so that the files are persisted even after the container stops.</span></a></h4><ul><li>Docker volumes (Managed by Docker, /var/lib/docker/volume/)</li><li>Bind mounts (Managed by user, anywhere on the file system)</li></ul><h3 id="docker-networking" tabindex="-1"><a class="header-anchor" href="#docker-networking"><span>Docker networking</span></a></h3><ul><li>‚Äúhost‚Äù: every container uses the host network stack; which means all containers share the same IP address, hence ports cannot be reused in different containers (Docker Engine on Linux only, not for Docker Desktop for Linux, MacOS, or Windows)</li></ul><h3 id="docker-networking-modes" tabindex="-1"><a class="header-anchor" href="#docker-networking-modes"><span>Docker networking modes</span></a></h3><ul><li>‚Äúbridge‚Äù: containers can re-use the same port, as they havedifferent IP addresses, and expose a port of their own that belong to the hosts, allowing containers to be somewhat visible from theoutside.</li><li>‚Äúnone‚Äù: no network, completely isolated. i.e. No access fromoutside, no access to the outside.</li><li>‚Äúoverlay‚Äù: used in Docker SWARM for multi-host communications.</li><li>‚Äúmacvlan‚Äù: containers gets its own IP on the physical network (like a real machine)</li></ul><h3 id="ci-cd" tabindex="-1"><a class="header-anchor" href="#ci-cd"><span>CI/CD</span></a></h3><ul><li><p>CI/CD Pipeline - Integrates the CI/CD practices, the tools, and stages that software changes undergo from development to deployment</p></li><li><p>Lint Check</p></li><li><p>Dependency Check</p></li><li><p>Code Quality Analysis</p></li><li><p>Unit Testing</p></li><li><p>Integration/E2E Tests</p></li><li><p>Pack the Software (build docker image)</p></li><li><p>Deployment</p></li></ul><h2 id="week-6" tabindex="-1"><a class="header-anchor" href="#week-6"><span>Week 6</span></a></h2><h3 id="k8s" tabindex="-1"><a class="header-anchor" href="#k8s"><span>K8S</span></a></h3>',69)),(0,i.Lk)("ul",null,[t[3]||(t[3]=(0,i.Lk)("li",null,"Node: a compute node (usually a Virtual Machine) that k8s runs on",-1)),t[4]||(t[4]=(0,i.Lk)("li",null,"Volume: persistent storage that can be attached to a node and mounted as a file system",-1)),t[5]||(t[5]=(0,i.Lk)("li",null,"Pod: a set of one or more containers that work together to accomplish a task: a pod is the smallest component that can be deployed in a k8s cluster",-1)),t[6]||(t[6]=(0,i.Lk)("li",null,"Deployment: a set of identical pods that run at the same time: it can be used to keep a number of replicas of the same app (say, a deployment of three Nginx pods)",-1)),t[7]||(t[7]=(0,i.Lk)("li",null,"Service: functionality a pod offers on a port. Services are internal to a k8s cluster",-1)),t[8]||(t[8]=(0,i.Lk)("li",null,"Ingress: a component that allows clients access to one or more services with routing based on hostname, paths, etc",-1)),t[9]||(t[9]=(0,i.Lk)("li",null,"Config map: a way to pass parameters around in a k8s cluster",-1)),(0,i.Lk)("li",null,[t[1]||(t[1]=(0,i.eW)("Namespace: all the objects above (except nodes) are grouped in namespaces for easier management. In every k8s cluster there is a default namespace called ‚Äúdefault‚Äù ")),t[2]||(t[2]=(0,i.Lk)("img",{src:r,alt:"K8S Architecture Example",loading:"lazy"},null,-1)),(0,i.bF)(s,{to:"/posts/kubernetes/"},{default:(0,i.k6)((()=>t[0]||(t[0]=[(0,i.eW)("Check more about K8S")]))),_:1})])]),t[11]||(t[11]=(0,i.Fv)('<h3 id="soap-vs-rest" tabindex="-1"><a class="header-anchor" href="#soap-vs-rest"><span>SOAP vs REST</span></a></h3><ul><li>ReST is more of a style to use HTTP than a separate protocol</li><li>SOAP/WS is a stack of protocols that covers every aspect of using a remote service, from service discovery, to service description, to the actual request/response</li></ul><h3 id="wdsl-web-services-description-language" tabindex="-1"><a class="header-anchor" href="#wdsl-web-services-description-language"><span>WDSL (Web Services Description Language)</span></a></h3><ul><li>WSDLÔºàWeb Services Description LanguageÔºâÊòØWebÊúçÂä°ÁöÑÊ†∏ÂøÉÊ†áÂáÜ‰πã‰∏ÄÔºåÂÆÉÂú®ËøáÂéªÂæàÈïø‰∏ÄÊÆµÊó∂Èó¥ÂÜÖË¢´ÂπøÊ≥õÁî®‰∫éÊèèËø∞ÂíåÂÆûÁé∞SOAPÔºàSimple Object Access ProtocolÔºâÈ£éÊ†ºÁöÑWebÊúçÂä°„ÄÇÁÑ∂ËÄåÔºåÈöèÁùÄÊäÄÊúØÁöÑÂèëÂ±ïÔºåÁâπÂà´ÊòØÂú®RESTÔºàRepresentational State TransferÔºâÊû∂ÊûÑÈ£éÊ†ºÁöÑÂÖ¥Ëµ∑ÂíåÂæÆÊúçÂä°Êû∂ÊûÑÁöÑÊµÅË°åÔºåWSDLÁöÑ‰ΩøÁî®Á°ÆÂÆûÊúâÊâÄÂáèÂ∞ë„ÄÇ</li></ul><h3 id="rest-best-practices" tabindex="-1"><a class="header-anchor" href="#rest-best-practices"><span>ReST Best Practices</span></a></h3><ol><li>Keep URIs short ‚Äì and create URIs that don‚Äôt change.</li><li>URIs should be opaque identifiers that are meant to be discovered by following hyperlinks, not constructed by the client.</li><li>Use nouns, not verbs in URLs</li><li>Make all HTTP GETs side-effect free. Doing so makes the request &quot;safe&quot;.</li><li>Use links in your responses to requests! Doing so connects your response with other data. It enables client applications to be &quot;self-propelled‚Äù, i.e. &quot;what is the next step to take&quot;.</li><li>Minimize use of query strings.</li></ol><h2 id="week-7" tabindex="-1"><a class="header-anchor" href="#week-7"><span>Week 7</span></a></h2><h3 id="faas" tabindex="-1"><a class="header-anchor" href="#faas"><span>FaaS</span></a></h3><ul><li>The idea behind Serverless/FaaS is to develop software applications without bothering with the infrastructure (especially scaling-up and down as load increases or decreases): the cloud provider manages servers and capacity</li></ul><p>‚óè FaaSÂáΩÊï∞ÊòØ‰∏Ä‰∏™Áã¨Á´ãÁöÑËøáÁ®ãÔºåÂÆÉËøîÂõûÁöÑÂÄºË¢´ÂÖ∂‰ªñËøõÁ®ãÊâÄÊ∂àË¥π„ÄÇÂú®ËÆ∏Â§öFaaSÊ°ÜÊû∂‰∏≠ÔºåFaaSÂáΩÊï∞ÊòØ‰∏Ä‰∏™DockerÂÆπÂô®„ÄÇ ‚óè FaaSÂáΩÊï∞ÂøÖÈ°ªËøîÂõû‰∏Ä‰∏™ÂèØ‰ª•Ë¢´ÂÖ∂‰ªñÈ°πÁõÆÊ∂àË¥πÁöÑÂÄºÔºåÈÄöÂ∏∏Ëøô‰∏™ÂÄºÊòØ‰∏Ä‰∏™ÂØπË±°ÁöÑJSONË°®Á§∫„ÄÇ</p><h4 id="why-faas" tabindex="-1"><a class="header-anchor" href="#why-faas"><span>Why FaaS</span></a></h4><p>‚óè Simpler deployment (the cloud provider takes care of the infrastructure) ‚óè Reduced computing costs (only the time during which functions are executed is billed) and more efficient use of computing resources ‚óè Reduced application complexity and more flexibility due to loosely-coupled architecture</p><p>The main difference between proprietary FaaS services and open-source FaaS frameworks is that the latter can be deployed on your cluster, looked into, disassembled, and improved by you.</p><h3 id="functions" tabindex="-1"><a class="header-anchor" href="#functions"><span>Functions</span></a></h3><p>‚óè ‰∏ç‰øÆÊîπÁ≥ªÁªüÁä∂ÊÄÅÁöÑÂáΩÊï∞Ë¢´Áß∞‰∏∫Êó†ÂâØ‰ΩúÁî®ÁöÑÔºà‰æãÂ¶ÇÔºå‰∏Ä‰∏™Êé•ÂèóÂõæÂÉèÂπ∂ËøîÂõûËØ•ÂõæÂÉèÁº©Áï•ÂõæÁöÑÂáΩÊï∞Ôºâ„ÄÇ ‚óè ‰ª•ÊüêÁßçÊñπÂºèÊîπÂèòÁ≥ªÁªüÁöÑÂáΩÊï∞‰∏çÊòØÊó†ÂâØ‰ΩúÁî®ÁöÑÔºà‰æãÂ¶ÇÔºå‰∏Ä‰∏™ËøîÂõûÂõæÂÉèÁº©Áï•ÂõæÂπ∂Â∞ÜÂÖ∂ÂÜôÂÖ•Êñá‰ª∂Á≥ªÁªüÁöÑÂáΩÊï∞Ôºâ„ÄÇ ‚óè Êó†ÂâØ‰ΩúÁî®ÁöÑÂáΩÊï∞ÂèØ‰ª•Âπ∂Ë°åËøêË°åÔºåÂπ∂‰∏îÂú®ÁªôÂÆöÁõ∏ÂêåËæìÂÖ•ÁöÑÊÉÖÂÜµ‰∏ãÔºå‰øùËØÅËøîÂõûÁõ∏ÂêåÁöÑËæìÂá∫„ÄÇ ‚óè ÁÑ∂ËÄåÔºåÂú®Áõ∏ÂØπÂ§çÊùÇÁöÑÁ≥ªÁªü‰∏≠ÔºåÂâØ‰ΩúÁî®Âá†‰πéÊòØ‰∏çÂèØÈÅøÂÖçÁöÑ„ÄÇÂõ†Ê≠§ÔºåÂøÖÈ°ªËÄÉËôëÂ¶Ç‰Ωï‰ΩøÂÖ∑ÊúâÂâØ‰ΩúÁî®ÁöÑÂáΩÊï∞Âú®FaaSÁéØÂ¢É‰∏≠ÈÄöÂ∏∏ÊâÄÈúÄÁöÑÂπ∂Ë°åËøêË°åÔºåÈÅøÂÖçÊ≠ªÈîÅÔºàÊØè‰∏™ÂáΩÊï∞ÈÉΩÂú®Á≠âÂæÖÂè¶‰∏Ä‰∏™ÂáΩÊï∞ÈáäÊîæËµÑÊ∫êÔºâ„ÄÇ ‚óè Â∞ÜÈùûÊó†ÂâØ‰ΩúÁî®ÁöÑÂáΩÊï∞Êï∞ÈáèÈôêÂà∂Âú®ÊúÄÂ∞èËåÉÂõ¥ÂÜÖÊòØ‰∏Ä‰∏™Â•ΩÁöÑÂÆûË∑µÔºåËÄå‰∏çÊòØÂú®Â∫îÁî®Á®ãÂ∫è‰∏≠Êï£Â∏ÉÊîπÂèòÁ≥ªÁªüÁöÑ‰ª£Á†ÅÁâáÊÆµ„ÄÇ</p><p>ÊúâÁä∂ÊÄÅÂáΩÊï∞ÔºöËæìÂá∫‰æùËµñ‰∫éÂÜÖÈÉ®Â≠òÂÇ®ÁöÑ‰ø°ÊÅØÔºåÈöæ‰ª•Âπ∂Ë°åËøêË°å„ÄÇ Êó†Áä∂ÊÄÅÂáΩÊï∞Ôºö‰∏çÂÜÖÈÉ®Â≠òÂÇ®‰ø°ÊÅØÔºå‰æùËµñÂ§ñÈÉ®Â≠òÂÇ®Êù•Áª¥Êä§Áä∂ÊÄÅÔºåÊõ¥ÈÄÇÂêàÂú®FaaSÁéØÂ¢É‰∏≠ËøêË°å</p><p>‚óè ÈªòËÆ§ÊÉÖÂÜµ‰∏ãÔºåFaaS‰∏≠ÁöÑÂáΩÊï∞ÊòØÂêåÊ≠•ÁöÑÔºåÂõ†Ê≠§ÂÆÉ‰ª¨‰ºöÁ´ãÂç≥ÔºàÊàñÂá†‰πéÁ´ãÂç≥ÔºâËøîÂõûÁªìÊûú„ÄÇ ‚óè ÁÑ∂ËÄåÔºåÊúâ‰∫õÂáΩÊï∞ÂèØËÉΩÈúÄË¶ÅÊõ¥ÈïøÁöÑÊó∂Èó¥ÊâçËÉΩËøîÂõûÁªìÊûúÔºåÂõ†Ê≠§Âú®ËøáÁ®ã‰∏≠ÂèØËÉΩ‰ºöÂØºËá¥Ë∂ÖÊó∂Âπ∂ÈîÅÂÆö‰∏éÂÆ¢Êà∑Á´ØÁöÑËøûÊé•ÔºåÂõ†Ê≠§ÊúÄÂ•ΩÂ∞ÜÂÆÉ‰ª¨ËΩ¨Êç¢‰∏∫ÂºÇÊ≠•ÂáΩÊï∞„ÄÇ ‚óè ÂºÇÊ≠•ÂáΩÊï∞ËøîÂõû‰∏Ä‰∏™‰ª£Á†ÅÔºåÈÄöÁü•ÂÆ¢Êà∑Á´ØÊâßË°åÂ∑≤ÂºÄÂßãÔºàÈÄöÂ∏∏ÊòØHTTPÁä∂ÊÄÅÁ†Å202ÔºâÔºåÁÑ∂ÂêéÂú®ÊâßË°åÂÆåÊàêÊó∂Ëß¶Âèë‰∏Ä‰∏™‰∫ã‰ª∂„ÄÇ ‚óè Âú®Êõ¥Â§çÊùÇÁöÑÊÉÖÂÜµ‰∏ãÔºåÂèØ‰ª•‰ΩøÁî®Ê∂âÂèäÊ∂àÊÅØÈòüÂàóÁ≥ªÁªüÁöÑÂèëÂ∏É/ËÆ¢ÈòÖÊ®°ÂºèÊù•Â§ÑÁêÜÂºÇÊ≠•ÂáΩÊï∞„ÄÇ</p><table><thead><tr><th>ÁâπÊÄß</th><th>Âçï‰ΩìÂ∫îÁî®</th><th>ÂæÆÊúçÂä°Â∫îÁî®</th><th>Êó†ÊúçÂä°Âô®Â∫îÁî®</th></tr></thead><tbody><tr><td><strong>Êû∂ÊûÑ</strong></td><td>ÊâÄÊúâÂäüËÉΩÂú®‰∏Ä‰∏™‰ª£Á†ÅÂ∫ìÂíåËøêË°åÊó∂ÁéØÂ¢É‰∏≠</td><td>Â∞ÜÂäüËÉΩÊãÜÂàÜ‰∏∫Â§ö‰∏™Áã¨Á´ãÁöÑÊúçÂä°ÔºåÊØè‰∏™ÊúçÂä°ÊúâËá™Â∑±ÁöÑ‰ª£Á†ÅÂ∫ìÂíåËøêË°åÊó∂ÁéØÂ¢É</td><td>Â∞ÜÂäüËÉΩËøõ‰∏ÄÊ≠•ÊãÜÂàÜ‰∏∫ÂáΩÊï∞ÔºåÁî±Á¨¨‰∏âÊñπÂπ≥Âè∞ÁÆ°ÁêÜËøêË°åÊó∂ÁéØÂ¢É</td></tr><tr><td><strong>ÈÉ®ÁΩ≤</strong></td><td>‰Ωú‰∏∫‰∏Ä‰∏™Êï¥‰ΩìÈÉ®ÁΩ≤</td><td>ÂêÑ‰∏™ÊúçÂä°Áã¨Á´ãÈÉ®ÁΩ≤</td><td>ÂáΩÊï∞ÊåâÈúÄÈÉ®ÁΩ≤ÔºåÁî±Âπ≥Âè∞Ëá™Âä®Êâ©Â±ï</td></tr><tr><td><strong>Êâ©Â±ï</strong></td><td>ÂûÇÁõ¥Êâ©Â±ïÔºàÂ¢ûÂä†ËµÑÊ∫êÔºâ</td><td>Ê∞¥Âπ≥Êâ©Â±ïÔºàÂ¢ûÂä†ÂÆû‰æãÔºâ</td><td>Ëá™Âä®Ê∞¥Âπ≥Êâ©Â±ï</td></tr><tr><td><strong>ËÄ¶ÂêàÂ∫¶</strong></td><td>È´òËÄ¶Âêà</td><td>‰ΩéËÄ¶Âêà</td><td>Êó†ËÄ¶Âêà</td></tr><tr><td><strong>ÊäÄÊúØÊ†à</strong></td><td>ÈÄöÂ∏∏‰ΩøÁî®Âçï‰∏ÄÊäÄÊúØÊ†à</td><td>ÂêÑ‰∏™ÊúçÂä°ÂèØ‰ª•‰ΩøÁî®‰∏çÂêåÁöÑÊäÄÊúØÊ†à</td><td>ÂáΩÊï∞ÂèØ‰ª•‰ΩøÁî®‰∏çÂêåÁöÑËØ≠Ë®ÄÂíåÁéØÂ¢É</td></tr><tr><td><strong>ÂºÄÂèë</strong></td><td>ÂºÄÂèëÂíåË∞ÉËØïÁõ∏ÂØπÁÆÄÂçï</td><td>ÂºÄÂèëÂíåË∞ÉËØïÊõ¥Â§çÊùÇÔºåÈúÄË¶ÅÊúçÂä°Èó¥ÈÄö‰ø°Êú∫Âà∂</td><td>ÂºÄÂèëÁÆÄÂçïÔºåÂè™ÈúÄÂÖ≥Ê≥®ÂáΩÊï∞ÈÄªËæë</td></tr><tr><td><strong>ÊµãËØï</strong></td><td>ÊµãËØïÁõ∏ÂØπÁÆÄÂçï</td><td>ÈúÄË¶ÅËøõË°åÈõÜÊàêÊµãËØïÂíåÁ´ØÂà∞Á´ØÊµãËØï</td><td>ÊµãËØïÁõ∏ÂØπÁÆÄÂçïÔºå‰ΩÜÈúÄË¶ÅÊ®°Êãü‰∫ã‰ª∂Ëß¶Âèë</td></tr><tr><td><strong>Áª¥Êä§</strong></td><td>Áª¥Êä§Áõ∏ÂØπÁÆÄÂçï</td><td>ÈúÄË¶ÅÁª¥Êä§Â§ö‰∏™ÊúçÂä°ÔºåÊõ¥Â§çÊùÇ</td><td>Áª¥Êä§Áî±Âπ≥Âè∞Ë¥üË¥£ÔºåÂºÄÂèëËÄÖÂè™ÈúÄÂÖ≥Ê≥®‰ª£Á†Å</td></tr><tr><td><strong>ÊïÖÈöúÈöîÁ¶ª</strong></td><td>ÊïÖÈöú‰ºöÂΩ±ÂìçÊï¥‰∏™Â∫îÁî®</td><td>ÊïÖÈöúË¢´ÈöîÁ¶ªÂú®Âçï‰∏™ÊúçÂä°‰∏≠</td><td>ÊïÖÈöúË¢´ÈöîÁ¶ªÂú®Âçï‰∏™ÂáΩÊï∞‰∏≠</td></tr><tr><td><strong>ËµÑÊ∫êÂà©Áî®Áéá</strong></td><td>ËµÑÊ∫êÂà©Áî®ÁéáÂèØËÉΩËæÉ‰Ωé</td><td>ËµÑÊ∫êÂà©Áî®ÁéáËæÉÈ´òÔºå‰ΩÜÈúÄË¶ÅÁÆ°ÁêÜÂ§ö‰∏™ÊúçÂä°</td><td>ËµÑÊ∫êÂà©Áî®ÁéáÊúÄÈ´òÔºåÊåâÈúÄ‰ªòË¥π</td></tr><tr><td><strong>Âª∂Ëøü</strong></td><td>ÈÄöÂ∏∏ËæÉ‰Ωé</td><td>ÂèØËÉΩÂºïÂÖ•ÁΩëÁªúÂª∂Ëøü</td><td>ÂèØËÉΩÂºïÂÖ•ÁΩëÁªúÂª∂ËøüÂíåÂÜ∑ÂêØÂä®Âª∂Ëøü</td></tr><tr><td><strong>ÊàêÊú¨</strong></td><td>ÂàùÊúüÊàêÊú¨ËæÉ‰ΩéÔºå‰ΩÜÈöèÁùÄËßÑÊ®°Êâ©Â§ßÊàêÊú¨Â¢ûÂä†</td><td>ÂàùÊúüÊàêÊú¨ËæÉÈ´òÔºå‰ΩÜÊõ¥ÂÆπÊòìÊâ©Â±ïÔºåÈïøÊúüÊàêÊú¨ÂèØËÉΩËæÉ‰Ωé</td><td>ÊàêÊú¨‰∏é‰ΩøÁî®ÈáèÁõ¥Êé•Áõ∏ÂÖ≥ÔºåÈÄÇÂêà‰∫ã‰ª∂È©±Âä®ÁöÑÂ∫îÁî®</td></tr><tr><td><strong>ÈÄÇÁî®Âú∫ÊôØ</strong></td><td>Â∞èÂûãÂ∫îÁî®„ÄÅÂø´ÈÄüÂéüÂûãÂºÄÂèë</td><td>Â§ßÂûãÂ§çÊùÇÂ∫îÁî®„ÄÅÈúÄË¶ÅÁÅµÊ¥ªÊÄßÂíåÂèØÊâ©Â±ïÊÄßÁöÑÂ∫îÁî®</td><td>‰∫ã‰ª∂È©±Âä®ÁöÑÂ∫îÁî®„ÄÅÈúÄË¶ÅÈ´òÂ∫¶ÂºπÊÄßÂíåËá™Âä®Êâ©Â±ïÁöÑÂ∫îÁî®</td></tr><tr><td><strong>Á§∫‰æãÂ∑•ÂÖ∑</strong></td><td>‰º†ÁªüÁöÑ Web Â∫îÁî®Ê°ÜÊû∂</td><td>Kubernetes, Docker, Istio</td><td>AWS Lambda, Azure Functions, Google Cloud Functions</td></tr><tr><td><strong>ÊÄªÁªì:</strong></td><td></td><td></td><td></td></tr></tbody></table><ul><li><strong>Âçï‰ΩìÂ∫îÁî®</strong> ÁÆÄÂçïÊòìÁî®ÔºåÈÄÇÂêàÂ∞èÂûãÈ°πÁõÆÊàñÂø´ÈÄüÂéüÂûãÂºÄÂèë„ÄÇ</li><li><strong>ÂæÆÊúçÂä°Â∫îÁî®</strong> Êèê‰æõÊõ¥È´òÁöÑÁÅµÊ¥ªÊÄßÂíåÂèØÊâ©Â±ïÊÄßÔºåÈÄÇÂêàÂ§ßÂûãÂ§çÊùÇÈ°πÁõÆ„ÄÇ</li><li><strong>Êó†ÊúçÂä°Âô®Â∫îÁî®</strong> Êèê‰æõÊúÄÈ´òÁöÑÂºπÊÄßÂíåËá™Âä®Êâ©Â±ïËÉΩÂäõÔºåÈÄÇÂêà‰∫ã‰ª∂È©±Âä®ÁöÑÂ∫îÁî®„ÄÇ</li></ul><h3 id="fission" tabindex="-1"><a class="header-anchor" href="#fission"><span>Fission</span></a></h3><p>‚óè Function: a software module that returns a value and can be called independently by a trigger ‚óè Environment: the Docker image that a function runs on. An environment is a language-specific, includes an HTTP server and some base libraries, but it can be customised ‚óè Package: a set of files (usually source code and/or compiled binaries) that is used to customise an Environment ‚óè Trigger: an event that causes the execution of a function, such as: ‚óã An HTTP request ‚óã A timer ‚óã A message published on a queue ‚óã The completion of a Kubernetes job ‚óè Router: a component that directs an HTTP request to a function ‚óè Specifications (Specs): a set of YAML files that defines the components of a Fission application. ‚ÄúSpecs‚Äù make it easier to deploy and maintain applications compared to the use of CLI commands</p><h4 id="executors" tabindex="-1"><a class="header-anchor" href="#executors"><span>Executors</span></a></h4><p>‚óè Fission executes function in two different ways: ‚ñ† PoolManager (default executor): Fission manages a pool of pods for every environment; when a function is invoked the function packages are loaded into the pod and the function executed. There is a single instance of a function running on any given time ‚ñ† NewDeploy: new pods are created as the load increases ‚óè PoolManager minimizes the latency in executing functions (warm start), but cannot cope with heavy load on a single function (functions are multi-threaded and able to service different request at the same time, but they may become overloaded) ‚óè NewDeploy has a higher latency (cold start) but allows multiple instances of the same function to run at the same time, hence it can cope better under heavy loads. Additional function instances are automatically spun according to some metrics (such as CPU consumption)</p><h4 id="fission-cli" tabindex="-1"><a class="header-anchor" href="#fission-cli"><span>Fission Cli</span></a></h4><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fission</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> environment</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> list</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fission</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> packages</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> list</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fission</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> function</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> log</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --name</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fission</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> function</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hello</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --env</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> python</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --code</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hello.py</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # create a function</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> name&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> --namespace &lt;namespace&gt; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># see the log of a function</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fission</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> function</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">function</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">--namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">namespac</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># test function</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fission</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> specs</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apply</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # To update the cluster based on specs</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>While the test command is useful for a quick test, it is not how functions are invoked, for that we need a trigger, The most typical use case is an HTTP request, hence we need to create a route (aka HTTP trigger):</li></ul><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fission</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> route</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hellort</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --function</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hello</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --method</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> GET</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --url</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /hello</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="fission-mq" tabindex="-1"><a class="header-anchor" href="#fission-mq"><span>Fission MQ</span></a></h4><ul><li>To achieve asynchronous functions (e.g using kafka or redis)</li></ul><h4 id="fission-websocket" tabindex="-1"><a class="header-anchor" href="#fission-websocket"><span>Fission WebSocket</span></a></h4><ul><li>Fission can accommodate long-running tasks between a back-end application and a web front-end</li></ul><p>‰Ω†ÈóÆÁöÑËøô‰∏™Ôºö‚Äú<strong>fission ÁöÑ package ÊπøË∫´</strong>‚ÄùÔºåÊàëÁåú‰Ω†ÊòØÊâìÈîô‰∫ÜÔºåÂ∫îËØ•ÊòØÊÉ≥ÈóÆÔºö</p><blockquote><p><strong>‚ÄúFission ÁöÑ package ÊòØ‰ªÄ‰πàÔºü‚Äù</strong>Ôºà‰πüÂèØËÉΩÊÉ≥ÈóÆÔºöFission ÁöÑ package ÊòØÊÄé‰πàÂ∑•‰ΩúÁöÑ„ÄÅÊÄé‰πàÁî®Ôºâ</p></blockquote><hr>',34))])}]]),p=JSON.parse('{"path":"/posts/unimelb/COMP90024.html","title":"Cluster and Cloud Computing (COMP90024)","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2025-03-02T00:00:00.000Z","category":["Learning Records"],"tag":["Unimelb"],"description":"Cluster and Cloud Computing (COMP90024) Week 1 Cloud Characteristics ‚Äì On-demand self-service . A consumer can provision computing capabilities as needed without requiring human...","head":[["meta",{"property":"og:url","content":"https://crc011220.github.io/personalweb/personalweb/posts/unimelb/COMP90024.html"}],["meta",{"property":"og:site_name","content":"Richard Chen"}],["meta",{"property":"og:title","content":"Cluster and Cloud Computing (COMP90024)"}],["meta",{"property":"og:description","content":"Cluster and Cloud Computing (COMP90024) Week 1 Cloud Characteristics ‚Äì On-demand self-service . A consumer can provision computing capabilities as needed without requiring human..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-04-19T07:17:49.000Z"}],["meta",{"property":"article:tag","content":"Unimelb"}],["meta",{"property":"article:published_time","content":"2025-03-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-19T07:17:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Cluster and Cloud Computing (COMP90024)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-03-02T00:00:00.000Z\\",\\"dateModified\\":\\"2025-04-19T07:17:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Richard Chen\\"}]}"]]},"headers":[{"level":2,"title":"Week 1","slug":"week-1","link":"#week-1","children":[{"level":3,"title":"Cloud Characteristics","slug":"cloud-characteristics","link":"#cloud-characteristics","children":[]},{"level":3,"title":"Grid Computing","slug":"grid-computing","link":"#grid-computing","children":[]}]},{"level":2,"title":"Week 2","slug":"week-2","link":"#week-2","children":[{"level":3,"title":"Horizontal and Vertical Scaling","slug":"horizontal-and-vertical-scaling","link":"#horizontal-and-vertical-scaling","children":[]},{"level":3,"title":"Categories of Flynn\'s Taxonomy","slug":"categories-of-flynn-s-taxonomy","link":"#categories-of-flynn-s-taxonomy","children":[]},{"level":3,"title":"Approaches for Parallelism (where and how)","slug":"approaches-for-parallelism-where-and-how","link":"#approaches-for-parallelism-where-and-how","children":[]},{"level":3,"title":"Erroneous Assumptions of Distributed Systems","slug":"erroneous-assumptions-of-distributed-systems","link":"#erroneous-assumptions-of-distributed-systems","children":[]}]},{"level":2,"title":"Week 3","slug":"week-3","link":"#week-3","children":[{"level":3,"title":"Amdahl\'s Law and Gustafson\'s Law","slug":"amdahl-s-law-and-gustafson-s-law","link":"#amdahl-s-law-and-gustafson-s-law","children":[]},{"level":3,"title":"Environment Modules","slug":"environment-modules","link":"#environment-modules","children":[]},{"level":3,"title":"üõ†Ô∏è Common module Commands","slug":"üõ†Ô∏è-common-module-commands","link":"#üõ†Ô∏è-common-module-commands","children":[]},{"level":3,"title":"üõ†Ô∏è Common slurm Commands","slug":"üõ†Ô∏è-common-slurm-commands","link":"#üõ†Ô∏è-common-slurm-commands","children":[]},{"level":3,"title":"Slurm Job Scripts","slug":"slurm-job-scripts","link":"#slurm-job-scripts","children":[]}]},{"level":2,"title":"Week 4","slug":"week-4","link":"#week-4","children":[{"level":3,"title":"Public Clouds","slug":"public-clouds","link":"#public-clouds","children":[]},{"level":3,"title":"Private (on premise) Clouds","slug":"private-on-premise-clouds","link":"#private-on-premise-clouds","children":[]},{"level":3,"title":"OpenStack","slug":"openstack","link":"#openstack","children":[]}]},{"level":2,"title":"Week 5","slug":"week-5","link":"#week-5","children":[{"level":3,"title":"Container Orchestration Tools","slug":"container-orchestration-tools","link":"#container-orchestration-tools","children":[]},{"level":3,"title":"Persistence","slug":"persistence","link":"#persistence","children":[]},{"level":3,"title":"Docker networking","slug":"docker-networking","link":"#docker-networking","children":[]},{"level":3,"title":"Docker networking modes","slug":"docker-networking-modes","link":"#docker-networking-modes","children":[]},{"level":3,"title":"CI/CD","slug":"ci-cd","link":"#ci-cd","children":[]}]},{"level":2,"title":"Week 6","slug":"week-6","link":"#week-6","children":[{"level":3,"title":"K8S","slug":"k8s","link":"#k8s","children":[]},{"level":3,"title":"SOAP vs REST","slug":"soap-vs-rest","link":"#soap-vs-rest","children":[]},{"level":3,"title":"WDSL (Web Services Description Language)","slug":"wdsl-web-services-description-language","link":"#wdsl-web-services-description-language","children":[]},{"level":3,"title":"ReST Best Practices","slug":"rest-best-practices","link":"#rest-best-practices","children":[]}]},{"level":2,"title":"Week 7","slug":"week-7","link":"#week-7","children":[{"level":3,"title":"FaaS","slug":"faas","link":"#faas","children":[]},{"level":3,"title":"Functions","slug":"functions","link":"#functions","children":[]},{"level":3,"title":"Fission","slug":"fission","link":"#fission","children":[]}]}],"git":{"createdTime":1742122096000,"updatedTime":1745047069000,"contributors":[{"name":"Ruochen Chen","email":"ruocchen1220@gmail.com","commits":8}]},"readingTime":{"minutes":12.4,"words":3719},"filePathRelative":"posts/unimelb/COMP90024.md","localizedDate":"March 2, 2025","excerpt":"\\n<h2>Week 1</h2>\\n<h3>Cloud Characteristics</h3>\\n<p>‚Äì On-demand self-service . A consumer can provision computing\\ncapabilities as needed without requiring human interaction with\\neach service provider.\\n‚Äì Networked access . Capabilities are available over the network and\\naccessed through standard mechanisms that promote use by\\nheterogeneous client platforms.</p>","autoDesc":true}')}}]);