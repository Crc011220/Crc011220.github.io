"use strict";(self.webpackChunkpersonalweb=self.webpackChunkpersonalweb||[]).push([[9340],{3355:(e,t,s)=>{s.r(t),s.d(t,{comp:()=>d,data:()=>n});var a=s(641);const o=s.p+"assets/img/memory-hierarchy.7001c79d.png",r=s.p+"assets/img/memory-hierarchy-model.12c863eb.png",i={},d=(0,s(6262).A)(i,[["render",function(e,t){return(0,a.uX)(),(0,a.CE)("div",null,t[0]||(t[0]=[(0,a.Fv)('<h1 id="advanced-database-systems-comp90050" tabindex="-1"><a class="header-anchor" href="#advanced-database-systems-comp90050"><span>Advanced Database Systems (COMP90050)</span></a></h1><h2 id="week-1" tabindex="-1"><a class="header-anchor" href="#week-1"><span>Week 1</span></a></h2><h3 id="modelling-disk-access" tabindex="-1"><a class="header-anchor" href="#modelling-disk-access"><span>Modelling Disk Access</span></a></h3><p>Disk access time = seek time + rotational delay + (transfer length / bandwidth)</p><ul><li>Seek time: the time it takes to locate the requested sector on the disk.</li><li>Rotational delay: the time it takes to rotate the disk to the correct position.</li><li>Transfer length: the number of bytes to be transferred.</li><li>Bandwidth: the maximum rate of data transfer.</li></ul><h3 id="hdd-vs-ssd" tabindex="-1"><a class="header-anchor" href="#hdd-vs-ssd"><span>HDD vs SSD</span></a></h3><table><thead><tr><th><strong>Feature</strong></th><th><strong>HDD</strong></th><th><strong>SSD</strong></th></tr></thead><tbody><tr><td><strong>Storage Type</strong></td><td>Magnetic disks</td><td>Flash memory</td></tr><tr><td><strong>Speed</strong></td><td>Slower (100MB/s to 200MB/s)</td><td>Faster (500MB/s to 5000MB/s+)</td></tr><tr><td><strong>Durability</strong></td><td>Less durable, susceptible to damage</td><td>More durable, resistant to shocks</td></tr><tr><td><strong>Capacity</strong></td><td>Larger capacities (up to 10TB+)</td><td>Smaller capacities (up to 4TB+)</td></tr><tr><td><strong>Noise</strong></td><td>Noisy due to moving parts</td><td>Silent</td></tr><tr><td><strong>Power Consumption</strong></td><td>Higher power consumption</td><td>Lower power consumption</td></tr><tr><td><strong>Cost</strong></td><td>More affordable for large storage</td><td>More expensive per GB</td></tr></tbody></table><ul><li>SSD do not have seek and rotation delays.</li><li>Moore’s law: memory chip capacity doubles every 18 months since 1970</li><li>Joy’s law for processors: processor performance doubles every two years since 1984</li></ul><figure><img src="'+o+'" alt="Memory Hierarchy" tabindex="0" loading="lazy"><figcaption>Memory Hierarchy</figcaption></figure><figure><img src="'+r+'" alt="Memory Hierarchy Model" tabindex="0" loading="lazy"><figcaption>Memory Hierarchy Model</figcaption></figure><h3 id="disk-access-time" tabindex="-1"><a class="header-anchor" href="#disk-access-time"><span>Disk Access Time</span></a></h3><p>For HDD:</p><ul><li>Disk Access Time = Seek Time + Rotational Delay + Transfer Time For SSD:</li><li>Disk Access Time = Transfer Time</li><li>Transfer Time = Transfer Length / Bandwidth</li></ul><h3 id="hit-ratio" tabindex="-1"><a class="header-anchor" href="#hit-ratio"><span>Hit Ratio</span></a></h3><ul><li>Hit ratio = (Number of hits) / (Number of requests)</li><li>Hit ratio (HR): the percentage of requests that are satisfied by the buffer.</li><li>If the hit ratio (HB) is high, the effective access time (EA) will be closer to the buffer access time (BC), meaning accessing data will generally be fast.</li><li>If the hit ratio is low, the access time will be closer to the disk access time (D), meaning it will take longer to access the data, as more requests will result in disk accesses instead of buffer hits.</li><li>Effective memory access time, EA = H*C+(1-H)*M,where H = hit ratio, C = cache access time; M = memory access time</li></ul><h2 id="week-2" tabindex="-1"><a class="header-anchor" href="#week-2"><span>Week 2</span></a></h2><h3 id="storage-area-networks-sans" tabindex="-1"><a class="header-anchor" href="#storage-area-networks-sans"><span>Storage Area Networks (SANs)</span></a></h3><ul><li>A SAN is a network of storage devices that provides a single logical storage space to multiple hosts.</li><li>SANs are used to increase storage capacity, availability, and performance.</li><li>They are used for shared-disk file systems</li><li>They regularly also allow for automated back up functionality</li><li>It was the fundamental storage for data center type systems with mainframes for decades</li><li>Different versions evolved over time to allow for more data but fundamentals are the same even today</li><li>They came with their own networking capabilities</li><li>We visit a version of these when we see what can be done about failures</li><li>In a nutshell failure probability of one disk is different to 100s of disks which requires design choices</li></ul><h3 id="deductive-database-systems-ddbs" tabindex="-1"><a class="header-anchor" href="#deductive-database-systems-ddbs"><span>Deductive database systems (DDBS)</span></a></h3><ul><li>e.g. prolog</li></ul><hr><h3 id="comparison-table-between-nested-loop-join-and-block-nested-loop-join" tabindex="-1"><a class="header-anchor" href="#comparison-table-between-nested-loop-join-and-block-nested-loop-join"><span>Comparison Table between Nested Loop Join and Block Nested-Loop Join</span></a></h3><table><thead><tr><th>Criteria</th><th>Nested Loop Join (NLJ)</th><th>Block Nested-Loop Join (BNLJ)</th></tr></thead><tbody><tr><td><strong>Data Access Level</strong></td><td>Record-by-record</td><td>Block-by-block</td></tr><tr><td><strong>I/O Cost</strong></td><td>High</td><td>Reduced</td></tr><tr><td><strong>Seeks</strong></td><td>High</td><td>Lower</td></tr><tr><td><strong>Memory Requirement</strong></td><td>Low</td><td>Higher (requires memory to store a block)</td></tr><tr><td><strong>Best for</strong></td><td>Small tables or indexed joins</td><td>Large tables with limited memory</td></tr><tr><td><strong>Performance</strong></td><td>Poor for large tables</td><td>Better for large tables</td></tr></tbody></table><h3 id="worst-case-cost-estimation" tabindex="-1"><a class="header-anchor" href="#worst-case-cost-estimation"><span>Worst Case Cost Estimation</span></a></h3><ul><li><p>r is called the outer relation and s is the inner relation of the join. In the worst case, if there is enough memory only to hold one block of each table, the estimated cost is:</p></li><li><p><strong>Block Transfers</strong>:<br> [ n_r \\times b_s + b_r ]</p></li><li><p><strong>Seeks</strong>:<br> [ n_r + b_r ]</p></li></ul><h4 id="calculation-example" tabindex="-1"><a class="header-anchor" href="#calculation-example"><span>Calculation Example</span></a></h4><h4 id="given" tabindex="-1"><a class="header-anchor" href="#given"><span><strong>Given:</strong></span></a></h4><table><thead><tr><th>Table</th><th>Records</th><th>Blocks</th></tr></thead><tbody><tr><td><code>customer</code></td><td>10,000</td><td>400</td></tr><tr><td><code>depositor</code></td><td>5,000</td><td>100</td></tr></tbody></table><h4 id="costs" tabindex="-1"><a class="header-anchor" href="#costs"><span><strong>Costs:</strong></span></a></h4><table><thead><tr><th>Method</th><th>Block Transfers</th><th>Seeks</th></tr></thead><tbody><tr><td><strong>Nested Loop Join</strong></td><td>( 10,000 \\times 100 + 400 = 1,000,400 )</td><td>( 10,000 + 400 = 10,400 )</td></tr><tr><td><strong>Block Nested-Loop Join</strong></td><td>( 400 \\times 100 = 40,000 )</td><td>( 400 + 100 = 500 )</td></tr></tbody></table><h3 id="other-join-comparison" tabindex="-1"><a class="header-anchor" href="#other-join-comparison"><span>Other Join Comparison</span></a></h3><table><thead><tr><th>Criteria</th><th>Nested-Loop Join</th><th>Block Nested-Loop Join</th><th>Indexed Nested-Loop Join</th><th>Merge Join</th><th>Hash Join</th></tr></thead><tbody><tr><td><strong>Data Access Level</strong></td><td>Record-by-record</td><td>Block-by-block</td><td>Record-by-record (with index)</td><td>Sort and merge</td><td>Partitioning and hashing</td></tr><tr><td><strong>I/O Cost</strong></td><td>High</td><td>Reduced</td><td>Low</td><td>Low</td><td>Low</td></tr><tr><td><strong>Seeks</strong></td><td>High</td><td>Lower</td><td>Low</td><td>Low</td><td>Low</td></tr><tr><td><strong>Memory Requirement</strong></td><td>Low</td><td>Higher (for block storage)</td><td>Low</td><td>Moderate</td><td>High</td></tr><tr><td><strong>Best for</strong></td><td>Small tables or indexed joins</td><td>Large tables with limited memory</td><td>When the inner table has an index</td><td>When both tables are sorted</td><td>Large tables where sorting is expensive</td></tr><tr><td><strong>Performance</strong></td><td>Poor for large tables</td><td>Better for large tables</td><td>Efficient when an index exists</td><td>Very efficient for sorted data</td><td>Efficient when no natural order of data exists</td></tr></tbody></table>',32)]))}]]),n=JSON.parse('{"path":"/posts/unimelb/COMP90050.html","title":"Advanced Database Systems (COMP90050)","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2025-03-02T00:00:00.000Z","category":["Learning Records"],"tag":["Unimelb"],"description":"Advanced Database Systems (COMP90050) Week 1 Modelling Disk Access Disk access time = seek time + rotational delay + (transfer length / bandwidth) Seek time: the time it takes t...","head":[["meta",{"property":"og:url","content":"https://crc011220.github.io/personalweb/personalweb/posts/unimelb/COMP90050.html"}],["meta",{"property":"og:site_name","content":"Richard Chen"}],["meta",{"property":"og:title","content":"Advanced Database Systems (COMP90050)"}],["meta",{"property":"og:description","content":"Advanced Database Systems (COMP90050) Week 1 Modelling Disk Access Disk access time = seek time + rotational delay + (transfer length / bandwidth) Seek time: the time it takes t..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-03-17T11:30:38.000Z"}],["meta",{"property":"article:tag","content":"Unimelb"}],["meta",{"property":"article:published_time","content":"2025-03-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-17T11:30:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Advanced Database Systems (COMP90050)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-03-02T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-17T11:30:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Richard Chen\\"}]}"]]},"headers":[{"level":2,"title":"Week 1","slug":"week-1","link":"#week-1","children":[{"level":3,"title":"Modelling Disk Access","slug":"modelling-disk-access","link":"#modelling-disk-access","children":[]},{"level":3,"title":"HDD vs SSD","slug":"hdd-vs-ssd","link":"#hdd-vs-ssd","children":[]},{"level":3,"title":"Disk Access Time","slug":"disk-access-time","link":"#disk-access-time","children":[]},{"level":3,"title":"Hit Ratio","slug":"hit-ratio","link":"#hit-ratio","children":[]}]},{"level":2,"title":"Week 2","slug":"week-2","link":"#week-2","children":[{"level":3,"title":"Storage Area Networks (SANs)","slug":"storage-area-networks-sans","link":"#storage-area-networks-sans","children":[]},{"level":3,"title":"Deductive database systems (DDBS)","slug":"deductive-database-systems-ddbs","link":"#deductive-database-systems-ddbs","children":[]},{"level":3,"title":"Comparison Table between Nested Loop Join and Block Nested-Loop Join","slug":"comparison-table-between-nested-loop-join-and-block-nested-loop-join","link":"#comparison-table-between-nested-loop-join-and-block-nested-loop-join","children":[]},{"level":3,"title":"Worst Case Cost Estimation","slug":"worst-case-cost-estimation","link":"#worst-case-cost-estimation","children":[]},{"level":3,"title":"Other Join Comparison","slug":"other-join-comparison","link":"#other-join-comparison","children":[]}]}],"git":{"createdTime":1742122096000,"updatedTime":1742211038000,"contributors":[{"name":"Ruochen Chen","email":"ruocchen1220@gmail.com","commits":2}]},"readingTime":{"minutes":2.46,"words":739},"filePathRelative":"posts/unimelb/COMP90050.md","localizedDate":"March 2, 2025","excerpt":"\\n<h2>Week 1</h2>\\n<h3>Modelling Disk Access</h3>\\n<p>Disk access time = seek time + rotational delay + (transfer length / bandwidth)</p>\\n<ul>\\n<li>Seek time: the time it takes to locate the requested sector on the disk.</li>\\n<li>Rotational delay: the time it takes to rotate the disk to the correct position.</li>\\n<li>Transfer length: the number of bytes to be transferred.</li>\\n<li>Bandwidth: the maximum rate of data transfer.</li>\\n</ul>","autoDesc":true}')},6262:(e,t)=>{t.A=(e,t)=>{const s=e.__vccOpts||e;for(const[e,a]of t)s[e]=a;return s}}}]);