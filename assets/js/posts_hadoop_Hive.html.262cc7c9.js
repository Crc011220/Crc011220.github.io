"use strict";(self.webpackChunkpersonalweb=self.webpackChunkpersonalweb||[]).push([[8250],{6023:(e,t,a)=>{a.r(t),a.d(t,{comp:()=>d,data:()=>l});var n=a(641);const s=a.p+"assets/img/Internal_vs_external_tables.1bcbdf0f.png",i=a.p+"assets/img/array_map_struct.235f45ad.png",r={},d=(0,a(6262).A)(r,[["render",function(e,t){const a=(0,n.g2)("RouteLink");return(0,n.uX)(),(0,n.CE)("div",null,[t[1]||(t[1]=(0,n.Fv)('<h1 id="hive" tabindex="-1"><a class="header-anchor" href="#hive"><span>Hive</span></a></h1><ul><li>Hive&#39;s database is essentially a folder stored in HDFS, by default located at <code>hdfs://ruochen:8020/user/hive/warehouse/</code></li></ul><h2 id="hive-table-types-summary" tabindex="-1"><a class="header-anchor" href="#hive-table-types-summary"><span>Hive Table Types Summary</span></a></h2><table><thead><tr><th>Table Type</th><th>Data Storage</th><th>Deletion Behavior</th><th>Use Case</th></tr></thead><tbody><tr><td><strong>Managed Table</strong></td><td>Hive warehouse</td><td><code>DROP TABLE</code> removes both table and data</td><td>When Hive manages the full data lifecycle</td></tr><tr><td><strong>External Table</strong></td><td>HDFS/S3/GCS</td><td><code>DROP TABLE</code> removes metadata only</td><td>When multiple applications share the data</td></tr><tr><td><strong>Partitioned Table</strong></td><td>HDFS/S3, stored by partitions</td><td><code>DROP TABLE</code> removes table and data</td><td>Optimizing queries by partitioning on time, region, etc.</td></tr><tr><td><strong>Bucketed Table</strong></td><td>HDFS/S3, stored in buckets</td><td><code>DROP TABLE</code> removes table and data</td><td>Improving JOIN and GROUP BY performance</td></tr><tr><td><strong>Temporary Table</strong></td><td>Session-only memory</td><td>Automatically removed after session ends</td><td>Temporary calculations or short-term queries</td></tr><tr><td><strong>ACID Table</strong></td><td>Hive warehouse, supports transactions</td><td><code>DROP TABLE</code> removes table and data</td><td>When transactional updates (INSERT, UPDATE, DELETE) are needed</td></tr><tr><td><strong>View</strong></td><td>Only stores query logic</td><td><code>DROP VIEW</code> removes view only</td><td>Simplifying complex queries or providing unified data access</td></tr><tr><td><strong>Temporary View</strong></td><td>Session-only memory</td><td>Automatically removed after session ends</td><td>Temporary query results without persistence</td></tr></tbody></table><h3 id="internal-vs-external-tables" tabindex="-1"><a class="header-anchor" href="#internal-vs-external-tables"><span>Internal vs. External Tables</span></a></h3><figure><img src="'+s+'" alt="internal vs. external tables" tabindex="0" loading="lazy"><figcaption>internal vs. external tables</figcaption></figure><ul><li>For external tables, you can create the metadata first and then load the files, or you can load the files first and then create the metadata. So the metadata and the files are independant.</li><li>Use <code>create external table</code> to create an external table. Must use <code>location</code> to specify the file path, and can use <code>location</code> to specify the file location.</li></ul><div class="hint-container info"><p class="hint-container-title">Info</p><p><code>desc formatted [table_name];</code> will show the table info. <code>alter table [table_name] set tblproperties (&#39;external&#39;=&#39;true or false&#39;);</code> to set the table as external or internal.</p></div><h3 id="complex-data-types" tabindex="-1"><a class="header-anchor" href="#complex-data-types"><span>Complex data types</span></a></h3><figure><img src="'+i+'" alt="array, map, and struct" tabindex="0" loading="lazy"><figcaption>array, map, and struct</figcaption></figure><div class="language-hive line-numbers-mode" data-highlighter="shiki" data-ext="hive" data-title="hive" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-- array</span></span>\n<span class="line"><span>create table test_array(name string, work_location array&lt;string&gt;)</span></span>\n<span class="line"><span>row format delimited fields terminated by &#39;\\t&#39;</span></span>\n<span class="line"><span>collection items terminated by &#39;,&#39;;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>load data local inpath &#39;/home/hadoop/data_for_array_type.txt&#39; into table test_array;</span></span>\n<span class="line"><span>select * from test_array;</span></span>\n<span class="line"><span>select name, work_location[1] from test_array;</span></span>\n<span class="line"><span>select name,size(test_array.work_location) from test_array;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>-- map</span></span>\n<span class="line"><span>create table test_map(id int, name string, member map&lt;string,string&gt;, age int)</span></span>\n<span class="line"><span>row format delimited    fields terminated by &#39;,&#39;</span></span>\n<span class="line"><span>collection items terminated by &quot;#&quot;</span></span>\n<span class="line"><span>map keys terminated by &#39;:&#39;;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>load data local inpath &#39;/home/hadoop/data_for_map_type.txt&#39; into table test_map;</span></span>\n<span class="line"><span>select * from test_map;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>-- struct</span></span>\n<span class="line"><span>create table test_struct(id int, info struct&lt;name:string,age:int&gt;)</span></span>\n<span class="line"><span>row format delimited fields terminated by &quot;#&quot;</span></span>\n<span class="line"><span>collection items terminated by &quot;:&quot;;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>load data local inpath &#39;/home/hadoop/data_for_struct_type.txt&#39; into table test_struct;</span></span>\n<span class="line"><span>select * from test_struct;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="more-hive-sql-syntax" tabindex="-1"><a class="header-anchor" href="#more-hive-sql-syntax"><span>More Hive SQL Syntax</span></a></h2>',12)),(0,n.Lk)("p",null,[(0,n.bF)(a,{to:"/zh/posts/hive/Hive-SQL%E8%AF%AD%E6%B3%95%E5%A4%A7%E5%85%A8.html"},{default:(0,n.k6)((()=>t[0]||(t[0]=[(0,n.eW)("More about Hive SQL syntax")]))),_:1})]),t[2]||(t[2]=(0,n.Lk)("div",{class:"hint-container info"},[(0,n.Lk)("p",{class:"hint-container-title"},"Info"),(0,n.Lk)("p",null,"start-dfs.sh start-yarn.sh history server hive-server2 hive-metastore Need to start all these services before running Hive queries.")],-1))])}]]),l=JSON.parse('{"path":"/posts/hadoop/Hive.html","title":"Hive","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2025-03-16T00:00:00.000Z","category":["Learning Records"],"tag":["Hadoop"],"description":"Hive Hive\'s database is essentially a folder stored in HDFS, by default located at hdfs://ruochen:8020/user/hive/warehouse/ Hive Table Types Summary Internal vs. External Tables...","head":[["meta",{"property":"og:url","content":"https://crc011220.github.io/posts/hadoop/Hive.html"}],["meta",{"property":"og:site_name","content":"Richard Chen"}],["meta",{"property":"og:title","content":"Hive"}],["meta",{"property":"og:description","content":"Hive Hive\'s database is essentially a folder stored in HDFS, by default located at hdfs://ruochen:8020/user/hive/warehouse/ Hive Table Types Summary Internal vs. External Tables..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-03-18T12:08:56.000Z"}],["meta",{"property":"article:tag","content":"Hadoop"}],["meta",{"property":"article:published_time","content":"2025-03-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-18T12:08:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Hive\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-03-16T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-18T12:08:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Richard Chen\\"}]}"]]},"headers":[{"level":2,"title":"Hive Table Types Summary","slug":"hive-table-types-summary","link":"#hive-table-types-summary","children":[{"level":3,"title":"Internal vs. External Tables","slug":"internal-vs-external-tables","link":"#internal-vs-external-tables","children":[]},{"level":3,"title":"Complex data types","slug":"complex-data-types","link":"#complex-data-types","children":[]}]},{"level":2,"title":"More Hive SQL Syntax","slug":"more-hive-sql-syntax","link":"#more-hive-sql-syntax","children":[]}],"git":{"createdTime":1742122096000,"updatedTime":1742299736000,"contributors":[{"name":"Ruochen Chen","email":"ruocchen1220@gmail.com","commits":3}]},"readingTime":{"minutes":1.46,"words":438},"filePathRelative":"posts/hadoop/Hive.md","localizedDate":"March 16, 2025","excerpt":"\\n<ul>\\n<li>Hive\'s database is essentially a folder stored in HDFS, by default located at <code>hdfs://ruochen:8020/user/hive/warehouse/</code></li>\\n</ul>\\n<h2>Hive Table Types Summary</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Table Type</th>\\n<th>Data Storage</th>\\n<th>Deletion Behavior</th>\\n<th>Use Case</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><strong>Managed Table</strong></td>\\n<td>Hive warehouse</td>\\n<td><code>DROP TABLE</code> removes both table and data</td>\\n<td>When Hive manages the full data lifecycle</td>\\n</tr>\\n<tr>\\n<td><strong>External Table</strong></td>\\n<td>HDFS/S3/GCS</td>\\n<td><code>DROP TABLE</code> removes metadata only</td>\\n<td>When multiple applications share the data</td>\\n</tr>\\n<tr>\\n<td><strong>Partitioned Table</strong></td>\\n<td>HDFS/S3, stored by partitions</td>\\n<td><code>DROP TABLE</code> removes table and data</td>\\n<td>Optimizing queries by partitioning on time, region, etc.</td>\\n</tr>\\n<tr>\\n<td><strong>Bucketed Table</strong></td>\\n<td>HDFS/S3, stored in buckets</td>\\n<td><code>DROP TABLE</code> removes table and data</td>\\n<td>Improving JOIN and GROUP BY performance</td>\\n</tr>\\n<tr>\\n<td><strong>Temporary Table</strong></td>\\n<td>Session-only memory</td>\\n<td>Automatically removed after session ends</td>\\n<td>Temporary calculations or short-term queries</td>\\n</tr>\\n<tr>\\n<td><strong>ACID Table</strong></td>\\n<td>Hive warehouse, supports transactions</td>\\n<td><code>DROP TABLE</code> removes table and data</td>\\n<td>When transactional updates (INSERT, UPDATE, DELETE) are needed</td>\\n</tr>\\n<tr>\\n<td><strong>View</strong></td>\\n<td>Only stores query logic</td>\\n<td><code>DROP VIEW</code> removes view only</td>\\n<td>Simplifying complex queries or providing unified data access</td>\\n</tr>\\n<tr>\\n<td><strong>Temporary View</strong></td>\\n<td>Session-only memory</td>\\n<td>Automatically removed after session ends</td>\\n<td>Temporary query results without persistence</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}')},6262:(e,t)=>{t.A=(e,t)=>{const a=e.__vccOpts||e;for(const[e,n]of t)a[e]=n;return a}}}]);