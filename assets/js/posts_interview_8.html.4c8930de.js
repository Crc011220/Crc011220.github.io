"use strict";(self.webpackChunkpersonalweb=self.webpackChunkpersonalweb||[]).push([[7946],{3377:(e,a,t)=>{t.r(a),t.d(a,{comp:()=>r,data:()=>c});var i=t(641);const o=t.p+"assets/img/JVM.cbf447a9.png",n=t.p+"assets/img/thread-safe.5059b71d.jpg",s=t.p+"assets/img/Reachability Analysis.936b46fd.png",l={},r=(0,t(6262).A)(l,[["render",function(e,a){return(0,i.uX)(),(0,i.CE)("div",null,a[0]||(a[0]=[(0,i.Fv)('<h1 id="jvm" tabindex="-1"><a class="header-anchor" href="#jvm"><span>JVM</span></a></h1><h2 id="_1-1-what-are-the-components-of-the-jvm-and-what-is-the-execution-process" tabindex="-1"><a class="header-anchor" href="#_1-1-what-are-the-components-of-the-jvm-and-what-is-the-execution-process"><span>1.1 What are the components of the JVM and what is the execution process?</span></a></h2><p><img src="'+o+'" alt="JVM.png" loading="lazy"> From the diagram, we can see the main components of the JVM:</p><ul><li>ClassLoader</li><li>Runtime Data Area</li><li>Execution Engine</li><li>Native Method Library</li></ul><p>Execution process:</p><ol><li>The ClassLoader converts Java code into bytecode.</li><li>The Runtime Data Area loads the bytecode into memory. The bytecode file is merely a set of instruction specifications for the JVM and cannot be directly executed by the underlying system; it requires the Execution Engine to run.</li><li>The Execution Engine translates the bytecode into low-level system instructions, which are then executed by the CPU. At this point, it may need to call the Native Method Library to implement the functionality of the entire program.</li></ol><h2 id="_1-2-what-is-a-program-counter" tabindex="-1"><a class="header-anchor" href="#_1-2-what-is-a-program-counter"><span>1.2 What is a program counter?</span></a></h2><p>The program counter is a thread-private area that stores the line number of the bytecode being executed. It is used to record the address of the currently executing bytecode instruction. <code>javap -verbose xx.class</code> prints the stack size, the number of local variables, and the method parameters. The Java Virtual Machine handles multithreading by switching between threads and allocating execution time. At any given moment, a processor will only execute one thread. If the currently executing thread runs out of its allocated execution time, it will be suspended, and the processor will switch to another thread. When that thread&#39;s execution time is also exhausted, the processor will return to execute the suspended thread. Now, the question arises: how does the current processor know where the suspended thread last executed? This is where the program counter comes in, allowing the current thread to return to the last executed line number and continue execution. The program counter is the only area in the JVM specification that does not have a defined OutOfMemoryError (OOM) condition, so this space will not undergo garbage collection (GC).</p><h2 id="_1-3-what-is-the-java-heap" tabindex="-1"><a class="header-anchor" href="#_1-3-what-is-the-java-heap"><span>1.3 What is the Java heap?</span></a></h2><p>The heap is a shared area among threads, primarily used to store object instances, arrays, etc. When there is no memory space available in the heap to allocate to an instance and it cannot be expanded, an OutOfMemoryError exception is thrown.</p><ul><li>The young generation is divided into three parts: the Eden space and two equally sized Survivor spaces. According to the JVM&#39;s strategy, objects that survive several garbage collections in the Survivor spaces will be moved to the old generation.</li><li>The old generation mainly stores long-lived objects, typically older objects.</li><li>The Metaspace stores class information, static variables, constants, and compiled code. To avoid OOM in the method area, in Java 8, the method area (Permanent Generation) on the heap was moved to local memory, creating a new space called Metaspace. This change helps to avoid OOM occurrences.</li></ul><h3 id="introduction-to-metaspace" tabindex="-1"><a class="header-anchor" href="#introduction-to-metaspace"><span>Introduction to Metaspace</span></a></h3><p>In the HotSpot JVM, the Permanent Generation (â‰ˆ Method Area) is used to store metadata about classes and methods, as well as the constant pool, such as Class and Method. Whenever a class is loaded for the first time, its metadata is placed in the Permanent Generation. The Permanent Generation has a size limit, so if too many classes are loaded, it can lead to memory overflow, resulting in an OutOfMemoryError, necessitating tuning of the virtual machine. Removing the Permanent Generation was an effort to merge the HotSpot JVM with the JRockit VM, as JRockit does not have a Permanent Generation and does not require configuration for it.</p><ol><li>Since PermGen memory often overflows, causing OutOfMemoryError, JVM developers wanted this memory to be managed more flexibly to avoid frequent OOM occurrences.</li><li>Removing PermGen facilitates the integration of HotSpot JVM with JRockit VM, as JRockit does not have a Permanent Generation. Specifically, the string constant pool in the Perm area was moved to heap memory after Java 7, and in Java 8, PermGen was replaced by Metaspace. Other contents, such as class metadata, fields, static properties, methods, constants, etc., were moved to the Metaspace area. For example, class metadata for <code>java/lang/Object</code>, static property <code>System.out</code>, integer constants, etc. The essence of Metaspace is similar to that of the Permanent Generation, both being implementations of the method area in the JVM specification. However, the biggest difference between Metaspace and the Permanent Generation is that Metaspace is not located in the virtual machine but uses local memory. Therefore, by default, the size of Metaspace is only limited by local memory.</li></ol><h2 id="_1-4-java-virtual-machine-stacks" tabindex="-1"><a class="header-anchor" href="#_1-4-java-virtual-machine-stacks"><span>1.4 Java Virtual Machine Stacks</span></a></h2><ul><li>The memory required for each thread during execution is called the virtual machine stack, which follows a last-in, first-out (LIFO) structure.</li><li>Each stack consists of multiple stack frames, corresponding to the memory occupied by each method call.</li><li>Each thread can only have one active stack frame, corresponding to the currently executing method. <img src="'+n+'" alt="thread-safe.jpg" loading="lazy"></li></ul><h3 id="stack-memory-overflow-situations" tabindex="-1"><a class="header-anchor" href="#stack-memory-overflow-situations"><span>Stack Memory Overflow Situations</span></a></h3><ul><li>Stack frames can overflow due to excessive stack frames, a typical issue being recursive calls.</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> method</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(){</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    method</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Stack memory can overflow due to excessively large stack frames.</li></ul><h2 id="_1-5-jvm-runtime-data-area" tabindex="-1"><a class="header-anchor" href="#_1-5-jvm-runtime-data-area"><span>1.5 JVM Runtime Data Area</span></a></h2><p>Components include: heap, method area, stack, native method stack, and program counter.</p><ol><li>The heap addresses the problem of storing object instances and is the main area managed by the garbage collector.</li><li>The method area can be considered a part of the heap, used to store information loaded by the virtual machine, constants, static variables, and code compiled by the just-in-time compiler.</li><li>The stack addresses the problem of program execution, storing stack frames, which contain local variable tables, operand stacks, dynamic links, method exits, and other information.</li><li>The native method stack functions similarly to the stack, executing native methods, which are interfaces for Java to call non-Java code.</li><li>The program counter (PC register) stores the line number of the bytecode currently being executed by the thread. The JVM works by changing the value of this counter to select the next bytecode instruction to execute.</li></ol><h2 id="_1-6-method-area" tabindex="-1"><a class="header-anchor" href="#_1-6-method-area"><span>1.6 Method Area</span></a></h2><ul><li>The Method Area is a memory area shared by all threads.</li><li>It mainly stores class information and the runtime constant pool.</li><li>It is created when the virtual machine starts and released when the virtual machine shuts down.</li><li>If the memory in the method area cannot satisfy allocation requests, an OutOfMemoryError: Metaspace will be thrown.</li></ul><h2 id="_1-7-what-are-the-differences-between-stack-and-heap" tabindex="-1"><a class="header-anchor" href="#_1-7-what-are-the-differences-between-stack-and-heap"><span>1.7 What are the differences between stack and heap?</span></a></h2><ol><li>Stack memory is generally used to store local variables and method calls, while heap memory is used to store Java objects and arrays. The heap undergoes garbage collection, while the stack does not.</li><li>Stack memory is thread-private, while heap memory is shared among threads.</li><li>The exceptions for both are different, but if either stack or heap memory is insufficient, exceptions will be thrown. <ul><li>Insufficient stack space: <code>java.lang.StackOverFlowError</code>.</li><li>Insufficient heap space: <code>java.lang.OutOfMemoryError</code>.</li></ul></li></ol><h2 id="_2-1-what-is-a-class-loader-and-what-types-of-class-loaders-are-there" tabindex="-1"><a class="header-anchor" href="#_2-1-what-is-a-class-loader-and-what-types-of-class-loaders-are-there"><span>2.1 What is a class loader, and what types of class loaders are there?</span></a></h2><ul><li>Class Loader: Used to load bytecode files (.class files).</li><li>Runtime Data Area: Used to allocate storage space.</li><li>Execution Engine: Executes bytecode files or native methods.</li><li>Garbage Collector: Used to reclaim garbage content in the JVM.</li></ul><h3 id="class-loader" tabindex="-1"><a class="header-anchor" href="#class-loader"><span>Class Loader</span></a></h3><p>The JVM only runs binary files, and the main function of the ClassLoader is to load bytecode files into the JVM, allowing Java programs to start. Existing class loaders are mostly subclasses of <code>java.lang.ClassLoader</code>, whose primary responsibility is to find or generate the corresponding bytecode file for the specified class, while also loading the resources required by the program.</p><h3 id="types-of-class-loaders" tabindex="-1"><a class="header-anchor" href="#types-of-class-loaders"><span>Types of Class Loaders</span></a></h3><p>Class loaders are divided into four types based on their loading scope:</p><ul><li><strong>Bootstrap ClassLoader</strong>: This class does not inherit from the ClassLoader class and is implemented in C++. It is used to load classes from the <code>JAVA_HOME/jre/lib</code> directory.</li><li><strong>ExtClassLoader</strong>: This class is a subclass of ClassLoader and mainly loads classes from the <code>JAVA_HOME/jre/lib/ext</code> directory.</li><li><strong>AppClassLoader</strong>: This class is a subclass of ClassLoader and is primarily used to load classes from the classPath, which includes classes written by developers.</li><li><strong>Custom ClassLoader</strong>: Developers can create custom class loaders by inheriting from ClassLoader and implementing custom loading rules.</li></ul><p>The class loader system is not an &quot;inheritance&quot; system but a delegation system. Class loaders first look for classes or resources in their parent class loader; if not found, they will search locally. The motivation for this delegation behavior is to avoid loading the same class multiple times.</p><h2 id="_2-2-what-is-the-parent-delegation-model" tabindex="-1"><a class="header-anchor" href="#_2-2-what-is-the-parent-delegation-model"><span>2.2 What is the parent delegation model?</span></a></h2><p>When a class loader receives a request to load a class, it does not attempt to load the class itself but delegates the task to its parent class loader. This process continues recursively. If the parent class loader can complete the loading task, it returns success; only if the parent class loader cannot complete the loading task will the next level attempt to load it.</p><h2 id="_2-3-why-does-the-jvm-adopt-the-parent-delegation-mechanism" tabindex="-1"><a class="header-anchor" href="#_2-3-why-does-the-jvm-adopt-the-parent-delegation-mechanism"><span>2.3 Why does the JVM adopt the parent delegation mechanism?</span></a></h2><ol><li>The parent delegation mechanism prevents a class from being loaded multiple times. Once a parent class has loaded a class, it does not need to load it again, ensuring uniqueness.</li><li>For security reasons, it ensures that the class library API cannot be modified.</li></ol><h2 id="_2-4-what-is-the-execution-process-of-class-loading" tabindex="-1"><a class="header-anchor" href="#_2-4-what-is-the-execution-process-of-class-loading"><span>2.4 What is the execution process of class loading?</span></a></h2><p>The entire lifecycle of a class from loading into the virtual machine until unloading includes seven stages: loading, verification, preparation, resolution, initialization, usage, and unloading. The verification, preparation, and resolution stages are collectively referred to as linking.</p><ol><li><p><strong>Loading</strong>:</p><ul><li>Obtain the binary data stream of the class using its fully qualified name.</li><li>Parse the binary data stream into a data structure in the method area (Java class model).</li><li>Create an instance of <code>java.lang.Class</code> to represent the type, serving as an access point for various data of this class in the method area.</li></ul></li><li><p><strong>Verification</strong>: Verify whether the class complies with JVM specifications and perform security checks.</p><ul><li>(1) File format verification: Check if it conforms to the Class file specification.</li><li>(2) Metadata verification: <ul><li>Does this class have a parent class (except for the Object class, all other classes should have a parent)?</li><li>Does this class extend a class that is marked as final (a final class cannot be inherited)?</li><li>Do the fields and methods in this class conflict with those in the parent class (final methods or fields cannot be overridden)?</li></ul></li><li>(3) Bytecode verification: <ul><li>The main purpose is to analyze the data flow and control flow to determine if the program semantics are legal and logical.</li></ul></li><li>(4) Symbol reference verification: Symbol references describe the target being referenced using a set of symbols, which can be any form of literal. <ul><li>For example: <code>int i = 3;</code> Literal: 3, Symbol reference: i.</li></ul></li></ul></li><li><p><strong>Preparation</strong>: Allocate memory for class variables and set their initial values.</p><ul><li>Static variables have their space allocated during the preparation phase (default values set), and assignment occurs during the initialization phase.</li><li>Static variables of final primitive types and string constants have their values determined and assigned during the preparation phase.</li><li>For static variables of final reference types, assignment will also occur during the initialization phase.</li></ul></li><li><p><strong>Resolution</strong>: Convert symbol references in the class to direct references.</p><ul><li>For example, if a method calls another method, the method name can be understood as a symbol reference, while the direct reference uses a pointer to directly point to the method.</li></ul></li><li><p><strong>Initialization</strong>: Execute initialization operations for the class&#39;s static variables and static code blocks.</p><ul><li>If a class is being initialized and its parent class has not yet been initialized, the parent class will be initialized first.</li><li>If there are multiple static variables and static code blocks, they will be executed in order from top to bottom.</li></ul></li><li><p><strong>Usage</strong>: The JVM begins executing the user&#39;s program code from the entry method.</p><ul><li>Call static class member information (e.g., static fields, static methods).</li><li>Use the <code>new</code> keyword to create object instances.</li></ul></li><li><p><strong>Unloading</strong>: Once the user&#39;s program code has finished executing, the JVM begins destroying the created Class objects, and finally, the JVM responsible for execution exits memory.</p></li></ol><h2 id="_3-1-briefly-describe-the-java-garbage-collection-mechanism-gc-what-is-gc-and-why-is-it-needed" tabindex="-1"><a class="header-anchor" href="#_3-1-briefly-describe-the-java-garbage-collection-mechanism-gc-what-is-gc-and-why-is-it-needed"><span>3.1 Briefly describe the Java garbage collection mechanism (GC). What is GC and why is it needed?</span></a></h2><p>To allow programmers to focus more on code implementation without worrying excessively about memory release, Java has an automatic garbage collection mechanism, commonly known as GC (Garbage Collection). With garbage collection, programmers only need to concern themselves with memory allocation; the system automatically identifies when to release memory. During garbage collection, different object reference types trigger GC at different times. In other words, the algorithms for automatic garbage collection become very important. If the algorithms are unreasonable, leading to memory resources not being released, it can also cause memory overflow. Other languages, such as C# and Python, also have automatic garbage collection mechanisms.</p><h2 id="_3-2-when-can-an-object-be-garbage-collected" tabindex="-1"><a class="header-anchor" href="#_3-2-when-can-an-object-be-garbage-collected"><span>3.2 When can an object be garbage collected?</span></a></h2><p>If one or more objects have no references pointing to them, then these objects are considered garbage and may be collected by the garbage collector. To determine what constitutes garbage, there are two methods: the reference counting method (which cannot solve circular references and may lead to memory leaks) and the reachability analysis algorithm (commonly used).</p><h3 id="_3-2-1-reachability-analysis-algorithm" tabindex="-1"><a class="header-anchor" href="#_3-2-1-reachability-analysis-algorithm"><span>3.2.1 Reachability Analysis Algorithm</span></a></h3><p>Current virtual machines use the reachability analysis algorithm to determine which objects are garbage. There exists a root node (GC Roots) that points to the next node, and from there, the next node is found, continuing downwards until all nodes have been traversed.</p><p><img src="'+s+'" alt="Reachability Analysis.png" loading="lazy"> Nodes X and Y are collectible, but they will not be collected immediately! Objects have a method called <code>finalize</code>. When an object is marked for collection, during GC, it first checks whether the <code>finalize</code> method has been executed. If it has not been executed, this method will be called first. In this method, the current object can establish a connection with GC ROOTS. After this method completes, GC will check again if the object is reachable. If it is still unreachable, it will be collected; if it is reachable, it will not be collected. The <code>finalize</code> method is executed only once for each object. If the first time this method is executed, the current object is associated with RC ROOTS, it will not be collected this time. When the object is marked for collection a second time, its <code>finalize</code> method will not be executed again.</p><h2 id="_3-3-what-are-the-garbage-collection-algorithms-in-the-jvm" tabindex="-1"><a class="header-anchor" href="#_3-3-what-are-the-garbage-collection-algorithms-in-the-jvm"><span>3.3 What are the garbage collection algorithms in the JVM?</span></a></h2><h3 id="_3-3-1-mark-and-sweep-algorithm" tabindex="-1"><a class="header-anchor" href="#_3-3-1-mark-and-sweep-algorithm"><span>3.3.1 Mark-and-Sweep Algorithm</span></a></h3><p>The mark-and-sweep algorithm divides garbage collection into two phases: marking and sweeping.</p><ol><li>Mark the garbage identified by the reachability analysis algorithm.</li><li>Collect the marked objects. The mark-and-sweep algorithm solves the circular reference problem found in the reference counting algorithm, as objects not referenced from the root node will be collected. However, the mark-and-sweep algorithm also has drawbacks:</li></ol><ul><li>It is less efficient, as both marking and sweeping require traversing all objects, and during GC, the application must be paused, which can lead to a poor experience for interactive applications.</li><li>(Important) The memory cleared by the mark-and-sweep algorithm can be severely fragmented, as collected objects may be scattered throughout memory, resulting in non-contiguous memory.</li></ul><h3 id="_3-3-2-copying-algorithm" tabindex="-1"><a class="header-anchor" href="#_3-3-2-copying-algorithm"><span>3.3.2 Copying Algorithm</span></a></h3><p>The core of the copying algorithm is to divide the original memory space into two halves, using only one half at a time. During garbage collection, live objects from the used memory area are copied to the unused memory area, and then the used memory area is cleared, swapping the roles of the two memory areas. If there are many garbage objects in memory, there will be fewer objects to copy, making this method suitable and efficient; otherwise, it is not suitable.</p><ol><li>Divide the memory area into two parts, operating on one at a time.</li><li>During garbage collection, move live objects from the used memory area to the unused memory area. Once the move is complete, clear that part of the memory area.</li><li>Repeat this process. <strong>Advantages</strong>:</li></ol><ul><li>More efficient when there are many garbage objects.</li><li>No fragmentation in memory after cleanup. <strong>Disadvantages</strong>:</li><li>Only half of the allocated memory can be used at any one time, leading to lower memory utilization.</li></ul><h3 id="_3-3-3-mark-and-compact-algorithm" tabindex="-1"><a class="header-anchor" href="#_3-3-3-mark-and-compact-algorithm"><span>3.3.3 Mark-and-Compact Algorithm</span></a></h3><p>The mark-and-compact algorithm is an optimized version of the mark-and-sweep algorithm. Like the mark-and-sweep algorithm, it starts from the root node to mark object references. However, during the cleanup phase, it does not simply clear the collectible objects; instead, it moves the live objects to one end of the memory and then clears the garbage beyond the boundary, thus solving the fragmentation problem.</p><ol><li>Mark the garbage.</li><li>Move the objects that need to be cleared to the right, and those that do not need to be cleared to the left.</li><li>Clear the garbage beyond the boundary. The advantages and disadvantages are similar to those of the mark-and-sweep algorithm, solving the fragmentation issue while adding an extra step of moving object memory locations, which can impact efficiency. In comparison to the copying algorithm, the copying algorithm copies immediately after marking, while the mark-and-compact algorithm waits until all live objects are marked before performing the compaction.</li></ol><h3 id="_3-3-4-generational-collection-algorithm" tabindex="-1"><a class="header-anchor" href="#_3-3-4-generational-collection-algorithm"><span>3.3.4 Generational Collection Algorithm</span></a></h3><ul><li>Minor GC (young GC) occurs in the young generation, with short pause times (STW).</li><li>Mixed GC collects garbage from both the young generation and parts of the old generation, unique to the G1 collector.</li><li>Full GC: A complete garbage collection of both the young and old generations, with long pause times (STW), which should be avoided whenever possible.</li></ul><h2 id="_3-4-what-are-the-differences-between-strong-references-soft-references-weak-references-and-phantom-references" tabindex="-1"><a class="header-anchor" href="#_3-4-what-are-the-differences-between-strong-references-soft-references-weak-references-and-phantom-references"><span>3.4 What are the differences between strong references, soft references, weak references, and phantom references?</span></a></h2><ul><li><strong>Strong Reference</strong>: An object can only be garbage collected if it is not referenced by any GC Roots.</li><li><strong>Soft Reference</strong>: An object is only collected when it is softly referenced and memory is insufficient after garbage collection.</li><li><strong>Weak Reference</strong>: An object is collected whenever it is weakly referenced, regardless of memory availability during garbage collection.</li><li><strong>Phantom Reference</strong>: Must be used in conjunction with a reference queue. When the referenced object is collected, the phantom reference is enqueued, allowing the Reference Handler thread to call methods related to the phantom reference to release direct memory.</li></ul><h2 id="_4-1-where-can-jvm-tuning-parameters-be-set" tabindex="-1"><a class="header-anchor" href="#_4-1-where-can-jvm-tuning-parameters-be-set"><span>4.1 Where can JVM tuning parameters be set?</span></a></h2><p>When starting a Spring Boot project JAR file, parameters can typically be added directly in the Linux system to start the Spring Boot project.</p><h2 id="_4-2-key-jvm-optimization-parameters" tabindex="-1"><a class="header-anchor" href="#_4-2-key-jvm-optimization-parameters"><span>4.2 Key JVM Optimization Parameters</span></a></h2><h3 id="memory-space-tuning" tabindex="-1"><a class="header-anchor" href="#memory-space-tuning"><span>Memory Space Tuning</span></a></h3><ul><li>Young Generation Memory</li><li>Old Generation Memory</li><li>Metaspace Memory Size</li></ul><h3 id="garbage-collection-parameters" tabindex="-1"><a class="header-anchor" href="#garbage-collection-parameters"><span>Garbage Collection Parameters</span></a></h3><ul><li>Garbage Collector Type Selection</li><li>Heap Size Configuration</li></ul><h3 id="reference-documentation" tabindex="-1"><a class="header-anchor" href="#reference-documentation"><span>Reference Documentation</span></a></h3><ul><li>Official Oracle JVM Options: <a href="https://www.oracle.com/java/technologies/javase/vmoptions-jsp.html" target="_blank" rel="noopener noreferrer">Oracle JVM Options</a></li></ul><h2 id="jvm-monitoring-tools-4-3" tabindex="-1"><a class="header-anchor" href="#jvm-monitoring-tools-4-3"><span>JVM Monitoring Tools 4.3</span></a></h2><h2 id="command-line-tools-4-3-1" tabindex="-1"><a class="header-anchor" href="#command-line-tools-4-3-1"><span>Command Line Tools 4.3.1</span></a></h2><h3 id="_4-3-1-1-jps-java-process-status" tabindex="-1"><a class="header-anchor" href="#_4-3-1-1-jps-java-process-status"><span>4.3.1.1 <code>jps</code> (Java Process Status)</span></a></h3><ul><li>Outputs JVM process status information</li><li>Deprecated in favor of <code>jconsole</code></li></ul><h3 id="_4-3-1-2-jstack" tabindex="-1"><a class="header-anchor" href="#_4-3-1-2-jstack"><span>4.3.1.2 <code>jstack</code></span></a></h3><ul><li>Retrieves thread stack information for Java processes</li></ul><h3 id="_4-3-1-3-jmap" tabindex="-1"><a class="header-anchor" href="#_4-3-1-3-jmap"><span>4.3.1.3 <code>jmap</code></span></a></h3><ul><li>Generates heap dump snapshots</li></ul><h3 id="_4-3-1-4-jhat" tabindex="-1"><a class="header-anchor" href="#_4-3-1-4-jhat"><span>4.3.1.4 <code>jhat</code></span></a></h3><ul><li>Analyzes heap dump snapshots</li><li>Not recommended; prefer Eclipse Memory Analyzer</li></ul><h3 id="_4-3-1-5-jstat" tabindex="-1"><a class="header-anchor" href="#_4-3-1-5-jstat"><span>4.3.1.5 <code>jstat</code></span></a></h3><ul><li>JVM statistical monitoring tool</li><li>Displays: <ul><li>Garbage collection information</li><li>Class loading statistics</li><li>Young generation metrics</li></ul></li></ul><h2 id="gui-monitoring-tools-4-3-2" tabindex="-1"><a class="header-anchor" href="#gui-monitoring-tools-4-3-2"><span>GUI Monitoring Tools 4.3.2</span></a></h2><h3 id="_4-3-2-1-jconsole" tabindex="-1"><a class="header-anchor" href="#_4-3-2-1-jconsole"><span>4.3.2.1 <code>jconsole</code></span></a></h3><ul><li>JMX-based GUI performance monitoring tool</li><li>Monitors: <ul><li>JVM memory</li><li>Threads</li><li>Classes</li></ul></li><li>Launched from Java installation&#39;s <code>bin</code> directory</li><li>Executable: <code>jconsole.exe</code></li></ul><h3 id="_4-3-2-2-visualvm" tabindex="-1"><a class="header-anchor" href="#_4-3-2-2-visualvm"><span>4.3.2.2 <code>VisualVM</code></span></a></h3><ul><li>Comprehensive fault processing tool</li><li>Capabilities: <ul><li>Thread monitoring</li><li>Memory analysis</li><li>Method CPU time tracking</li><li>Heap object inspection</li><li>Garbage-collected object tracking</li><li>Reverse stack allocation view</li></ul></li><li>Launched from Java installation&#39;s <code>bin</code> directory</li><li>Executable: <code>jvisualvm.exe</code></li></ul>',91)]))}]]),c=JSON.parse('{"path":"/posts/interview/8.html","title":"JVM","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2024-11-24T00:00:00.000Z","category":["Learning Records"],"tag":["Technical Interview"],"description":"JVM 1.1 What are the components of the JVM and what is the execution process? JVM.png From the diagram, we can see the main components of the JVM: ClassLoader Runtime Data Area ...","head":[["meta",{"property":"og:url","content":"https://crc011220.github.io/personalweb/personalweb/posts/interview/8.html"}],["meta",{"property":"og:site_name","content":"Richard Chen"}],["meta",{"property":"og:title","content":"JVM"}],["meta",{"property":"og:description","content":"JVM 1.1 What are the components of the JVM and what is the execution process? JVM.png From the diagram, we can see the main components of the JVM: ClassLoader Runtime Data Area ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-26T10:44:31.000Z"}],["meta",{"property":"article:tag","content":"Technical Interview"}],["meta",{"property":"article:published_time","content":"2024-11-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-26T10:44:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JVM\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-26T10:44:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Richard Chen\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"1.1 What are the components of the JVM and what is the execution process?","slug":"_1-1-what-are-the-components-of-the-jvm-and-what-is-the-execution-process","link":"#_1-1-what-are-the-components-of-the-jvm-and-what-is-the-execution-process","children":[]},{"level":2,"title":"1.2 What is a program counter?","slug":"_1-2-what-is-a-program-counter","link":"#_1-2-what-is-a-program-counter","children":[]},{"level":2,"title":"1.3 What is the Java heap?","slug":"_1-3-what-is-the-java-heap","link":"#_1-3-what-is-the-java-heap","children":[{"level":3,"title":"Introduction to Metaspace","slug":"introduction-to-metaspace","link":"#introduction-to-metaspace","children":[]}]},{"level":2,"title":"1.4 Java Virtual Machine Stacks","slug":"_1-4-java-virtual-machine-stacks","link":"#_1-4-java-virtual-machine-stacks","children":[{"level":3,"title":"Stack Memory Overflow Situations","slug":"stack-memory-overflow-situations","link":"#stack-memory-overflow-situations","children":[]}]},{"level":2,"title":"1.5 JVM Runtime Data Area","slug":"_1-5-jvm-runtime-data-area","link":"#_1-5-jvm-runtime-data-area","children":[]},{"level":2,"title":"1.6 Method Area","slug":"_1-6-method-area","link":"#_1-6-method-area","children":[]},{"level":2,"title":"1.7 What are the differences between stack and heap?","slug":"_1-7-what-are-the-differences-between-stack-and-heap","link":"#_1-7-what-are-the-differences-between-stack-and-heap","children":[]},{"level":2,"title":"2.1 What is a class loader, and what types of class loaders are there?","slug":"_2-1-what-is-a-class-loader-and-what-types-of-class-loaders-are-there","link":"#_2-1-what-is-a-class-loader-and-what-types-of-class-loaders-are-there","children":[{"level":3,"title":"Class Loader","slug":"class-loader","link":"#class-loader","children":[]},{"level":3,"title":"Types of Class Loaders","slug":"types-of-class-loaders","link":"#types-of-class-loaders","children":[]}]},{"level":2,"title":"2.2 What is the parent delegation model?","slug":"_2-2-what-is-the-parent-delegation-model","link":"#_2-2-what-is-the-parent-delegation-model","children":[]},{"level":2,"title":"2.3 Why does the JVM adopt the parent delegation mechanism?","slug":"_2-3-why-does-the-jvm-adopt-the-parent-delegation-mechanism","link":"#_2-3-why-does-the-jvm-adopt-the-parent-delegation-mechanism","children":[]},{"level":2,"title":"2.4 What is the execution process of class loading?","slug":"_2-4-what-is-the-execution-process-of-class-loading","link":"#_2-4-what-is-the-execution-process-of-class-loading","children":[]},{"level":2,"title":"3.1 Briefly describe the Java garbage collection mechanism (GC). What is GC and why is it needed?","slug":"_3-1-briefly-describe-the-java-garbage-collection-mechanism-gc-what-is-gc-and-why-is-it-needed","link":"#_3-1-briefly-describe-the-java-garbage-collection-mechanism-gc-what-is-gc-and-why-is-it-needed","children":[]},{"level":2,"title":"3.2 When can an object be garbage collected?","slug":"_3-2-when-can-an-object-be-garbage-collected","link":"#_3-2-when-can-an-object-be-garbage-collected","children":[{"level":3,"title":"3.2.1 Reachability Analysis Algorithm","slug":"_3-2-1-reachability-analysis-algorithm","link":"#_3-2-1-reachability-analysis-algorithm","children":[]}]},{"level":2,"title":"3.3 What are the garbage collection algorithms in the JVM?","slug":"_3-3-what-are-the-garbage-collection-algorithms-in-the-jvm","link":"#_3-3-what-are-the-garbage-collection-algorithms-in-the-jvm","children":[{"level":3,"title":"3.3.1 Mark-and-Sweep Algorithm","slug":"_3-3-1-mark-and-sweep-algorithm","link":"#_3-3-1-mark-and-sweep-algorithm","children":[]},{"level":3,"title":"3.3.2 Copying Algorithm","slug":"_3-3-2-copying-algorithm","link":"#_3-3-2-copying-algorithm","children":[]},{"level":3,"title":"3.3.3 Mark-and-Compact Algorithm","slug":"_3-3-3-mark-and-compact-algorithm","link":"#_3-3-3-mark-and-compact-algorithm","children":[]},{"level":3,"title":"3.3.4 Generational Collection Algorithm","slug":"_3-3-4-generational-collection-algorithm","link":"#_3-3-4-generational-collection-algorithm","children":[]}]},{"level":2,"title":"3.4 What are the differences between strong references, soft references, weak references, and phantom references?","slug":"_3-4-what-are-the-differences-between-strong-references-soft-references-weak-references-and-phantom-references","link":"#_3-4-what-are-the-differences-between-strong-references-soft-references-weak-references-and-phantom-references","children":[]},{"level":2,"title":"4.1 Where can JVM tuning parameters be set?","slug":"_4-1-where-can-jvm-tuning-parameters-be-set","link":"#_4-1-where-can-jvm-tuning-parameters-be-set","children":[]},{"level":2,"title":"4.2 Key JVM Optimization Parameters","slug":"_4-2-key-jvm-optimization-parameters","link":"#_4-2-key-jvm-optimization-parameters","children":[{"level":3,"title":"Memory Space Tuning","slug":"memory-space-tuning","link":"#memory-space-tuning","children":[]},{"level":3,"title":"Garbage Collection Parameters","slug":"garbage-collection-parameters","link":"#garbage-collection-parameters","children":[]},{"level":3,"title":"Reference Documentation","slug":"reference-documentation","link":"#reference-documentation","children":[]}]},{"level":2,"title":"JVM Monitoring Tools 4.3","slug":"jvm-monitoring-tools-4-3","link":"#jvm-monitoring-tools-4-3","children":[]},{"level":2,"title":"Command Line Tools 4.3.1","slug":"command-line-tools-4-3-1","link":"#command-line-tools-4-3-1","children":[{"level":3,"title":"4.3.1.1 jps (Java Process Status)","slug":"_4-3-1-1-jps-java-process-status","link":"#_4-3-1-1-jps-java-process-status","children":[]},{"level":3,"title":"4.3.1.2 jstack","slug":"_4-3-1-2-jstack","link":"#_4-3-1-2-jstack","children":[]},{"level":3,"title":"4.3.1.3 jmap","slug":"_4-3-1-3-jmap","link":"#_4-3-1-3-jmap","children":[]},{"level":3,"title":"4.3.1.4 jhat","slug":"_4-3-1-4-jhat","link":"#_4-3-1-4-jhat","children":[]},{"level":3,"title":"4.3.1.5 jstat","slug":"_4-3-1-5-jstat","link":"#_4-3-1-5-jstat","children":[]}]},{"level":2,"title":"GUI Monitoring Tools 4.3.2","slug":"gui-monitoring-tools-4-3-2","link":"#gui-monitoring-tools-4-3-2","children":[{"level":3,"title":"4.3.2.1 jconsole","slug":"_4-3-2-1-jconsole","link":"#_4-3-2-1-jconsole","children":[]},{"level":3,"title":"4.3.2.2 VisualVM","slug":"_4-3-2-2-visualvm","link":"#_4-3-2-2-visualvm","children":[]}]}],"git":{"createdTime":1732446941000,"updatedTime":1732617871000,"contributors":[{"name":"Ruochen Chen","email":"ruocchen1220@gmail.com","commits":2}]},"readingTime":{"minutes":10.77,"words":3230},"filePathRelative":"posts/interview/8.md","localizedDate":"November 24, 2024","excerpt":"\\n<h2>1.1 What are the components of the JVM and what is the execution process?</h2>\\n<p>\\nFrom the diagram, we can see the main components of the JVM:</p>\\n<ul>\\n<li>ClassLoader</li>\\n<li>Runtime Data Area</li>\\n<li>Execution Engine</li>\\n<li>Native Method Library</li>\\n</ul>\\n<p>Execution process:</p>\\n<ol>\\n<li>The ClassLoader converts Java code into bytecode.</li>\\n<li>The Runtime Data Area loads the bytecode into memory. The bytecode file is merely a set of instruction specifications for the JVM and cannot be directly executed by the underlying system; it requires the Execution Engine to run.</li>\\n<li>The Execution Engine translates the bytecode into low-level system instructions, which are then executed by the CPU. At this point, it may need to call the Native Method Library to implement the functionality of the entire program.</li>\\n</ol>","autoDesc":true}')},6262:(e,a)=>{a.A=(e,a)=>{const t=e.__vccOpts||e;for(const[e,i]of a)t[e]=i;return t}}}]);